{"config":{"lang":["en","ja"],"separator":"[\\s\\-\\.]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"o(\u3003'\u25bd'\u3003)o Hi!","text":"<p>\u8fd9\u91cc\u662f\u5de6\u5b97\u53f3\u7684\u7a7a\u95f4\uff01</p> <p>\u5e0c\u671b\u8fd9\u91cc\u7684\u5185\u5bb9\u8d8a\u6765\u8d8a\u591a\uff0c\u6709\u4ec0\u4e48\u597d\u7684\u63d0\u8bae\u8bf7\u544a\u8bc9\u6211\u3002</p> <p>\u6bd5\u7adf...\u6211\u592a\u60f3\u8fdb\u6b65\u4e86\uff01</p> <p>\u4eca\u665a\u98df\u4e5c\u5622 </p> <p>\u591a\u5e74\u4ee5\u540e\uff0c\u9762\u5bf9\u4eba\u8ff9\u7f55\u81f3\u7684\u7b14\u8bb0\u535a\u5ba2\uff0c\u5de6\u5b97\u53f3\u4f1a\u60f3\u8d77\u7f51\u7ad9\u6210\u529f\u90e8\u7f72\u7684\u90a3\u4e2a\u9065\u8fdc\u7684\u4e0b\u5348\u3002</p> <p>\u90a3\u65f6\u5019\u672a\u6765\u9065\u8fdc\u7684\u6ca1\u6709\u5f62\u72b6\uff0c\u4ed6\u60f3\u7684\u53ea\u6709\u665a\u4e0a\u8981\u5403\u4ec0\u4e48\u3002</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/leetcode-biweekly-contest-148/","title":"Leetcode biweekly Contest 148","text":"<p>\u4e0d\u662f\u54e5\u4eec\u513f\uff01\u53c8\u662f\u4e24\u9898\uff0c\u540e\u9762\u4e24\u9053hard\u662f\u771f\u52a8\u4e0d\u4e86\u624b\u554a\u3002\u9274\u5b9a\u4e3a\u624b\u901f\u4e24\u9898\u573a\u3002</p> <p>\u6392\u540d\uff1a522</p>"},{"location":"blog/leetcode-biweekly-contest-148/#leetcode-biweekly-contest-148","title":"Leetcode biweekly Contest 148","text":""},{"location":"blog/leetcode-biweekly-contest-148/#t1-3423","title":"T1 3423. \u5faa\u73af\u6570\u7ec4\u4e2d\u76f8\u90bb\u5143\u7d20\u7684\u6700\u5927\u5dee\u503c","text":"<p>\u7b2c\u4e00\u9898\u80a5\u80a0\u6e29\u67d4\uff0c\u53ea\u9700\u8981\u6309\u7167\u9898\u76ee\u7684\u610f\u601d\u6a21\u62df\u4e00\u904d\u5c31\u884c\u4e86\u3002\u904d\u5386\u4e00\u904d\u6570\u7ec4\uff0c\u8ba1\u7b97\u76f8\u90bb\u6570\u7684\u5dee\u7684\u7edd\u5bf9\u503c\uff0c\u8bb0\u5f55\u6700\u5927\u503c</p> <pre><code>import java.util.*;\nclass Solution {\n    public int maxAdjacentDistance(int[] nums) {\n        int ans = Math.abs(nums[0] - nums[nums.length - 1]);\n        for(int i = 0; i &lt; nums.length - 1; i ++) {\n            ans = Math.max(ans, Math.abs(nums[i] - nums[i + 1]));\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"blog/leetcode-biweekly-contest-148/#t2-3424","title":"T2 3424. \u5c06\u6570\u7ec4\u53d8\u76f8\u540c\u7684\u6700\u5c0f\u4ee3\u4ef7","text":"<p>\u7b2c\u4e8c\u9898\u505a\u7684\u65f6\u5019\u8fd8\u662f\u6bd4\u8f83\u4e0d\u786e\u5b9a\u7684\uff0c\u6bd4\u8d5b\u7684\u65f6\u5019\u662f\u6309\u7167\u8d2a\u5fc3\u7684\u60f3\u6cd5\u6765\u731c\u7684\u3002\u53ef\u4ee5\u77e5\u9053\u91cd\u65b0\u6392\u5217\u53ef\u4ee5\u5212\u5206\u6210\u6bcf\u4e2a\u5b50\u6570\u7ec4\u53ea\u5305\u542b\u4e00\u4e2a\u6570\uff0c\u5373\u91cd\u65b0\u6392\u5217\u6ca1\u6709\u9650\u5236\uff0c\u53ef\u4ee5\u82b1\u8d39 \\(k\\) \u7684\u4ee3\u4ef7\u5bf9\u6570\u7ec4\u8fdb\u884c\u4efb\u610f\u7684\u6446\u653e\u3002\u90a3\u4e48\u6211\u60f3\u7684\u5c31\u662f\u628a\u6bcf\u4e2a\u6570\u6446\u653e\u5230\u4e0e\u5b83\u5dee\u503c\u6700\u5c0f\u7684\u6570\u7684\u4f4d\u7f6e\u4e0a\u53bb\uff0c\u8fd9\u6837\u6bcf\u4e2a\u6570\u7684\u5dee\u503c\u7684\u7edd\u5bf9\u503c\u90fd\u5c0f\uff0c\u6700\u540e\u5f97\u5230\u7684\u5dee\u503c\u7684\u603b\u548c\u4e5f\u6700\u5c0f\u3002</p> <p>\u4ece0x3f\u90a3\u770b\u7684\u4ea4\u6362\u8bba\u8bc1\u6cd5\u53ef\u4ee5\u5728\u8fd9\u91cc\u4f7f\u7528\uff0c\u5373\u5bf9\u4e8e \\(brr\\) \u4e2d\u7684\u6bcf\u4e2a\u6570\uff0c\u82e5 \\(arr\\) \u4e0d\u628a\u4e0e\u5176\u5dee\u503c\u6700\u5c0f\u7684\u6570\u653e\u5230\u5bf9\u5e94\u7684\u4f4d\u7f6e\u4e0a\uff0c\u90a3\u4e48\u5f97\u5230\u7684\u5dee\u503c\u4e00\u5b9a\u6bd4\u4e4b\u524d\u7684\u5927\uff0c\u6240\u4ee5\u6309\u7167\u539f\u601d\u8def\u8d2a\u5fc3\u662f\u5bf9\u7684\u3002</p> <pre><code>import java.util.*;\nclass Solution {\n    public long minCost(int[] arr, int[] brr, long k) {\n        long ans1 = 0;\n        int n = arr.length;\n\n        for(int i = 0; i &lt; n; i ++) {\n            ans1 += Math.abs(brr[i] - arr[i]);\n        }\n\n        Arrays.sort(arr);\n        Arrays.sort(brr);\n        long ans2 = k;\n\n        for(int i = 0; i &lt; n; i ++) {\n            ans2 += Math.abs(brr[i] - arr[i]);\n        }\n\n        return Math.min(ans1, ans2);\n    }\n}\n</code></pre>"},{"location":"blog/leetcode-contest-430/","title":"LeetCode Contest 430","text":"<p>\u8bfb\u4e2a\u4e66\u600e\u4e48\u8fd9\u4e48\u591a\u4e8b\u554a\uff0c\u771f\u590d\u4e60\u4e0d\u8fc7\u6765\u4e86\u5367\u69fd</p> <p>\u6392\u540d: 774</p> <p>\u671f\u672b\u590d\u4e60\u8fd8\u80fd\u5077\u6478\u6253\u4e00\u628a\u3002\u7ecf\u5178\u4e24\u9898\u9009\u624b\uff0c\u6211\u5565\u65f6\u5019\u80fd\u4e0a knight \u554a\uff01</p>"},{"location":"blog/leetcode-contest-430/#t1-3402","title":"T1  3402.\u4f7f\u6bcf\u4e00\u5217\u4e25\u683c\u9012\u589e\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570","text":"<p>\u6bcf\u6b21\u56fa\u5b9a\u4e00\u5217\uff0c\u6309\u884c\u4ece\u4e0a\u5230\u4e0b\u8fdb\u884c\u904d\u5386\uff0c\u5982\u679c \\(grid[i][j] &gt; grid[i - 1][j]\\) \u5c31\u8ba9 \\(grid[i][j]\\) \u81ea\u589e\u4e00\u6b21\uff0c\u4e14\u8bb0\u5f55\u7684\u7b54\u6848\u81ea\u589e\u4e00\u6b21</p> <pre><code>class Solution {\n    public int minimumOperations(int[][] grid) {\n        int n = grid.length;\n        int m = grid[0].length;\n\n        int ans = 0;\n\n        for(int j = 0; j &lt; m; j ++) {\n            for(int i = 0; i &lt; n; i ++) {\n                while(i &gt; 0 &amp;&amp; grid[i][j] &lt;= grid[i - 1][j]) {\n                    ans ++;\n                    grid[i][j] ++;\n                }\n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"blog/leetcode-contest-430/#t2-3403-i","title":"T2 3403. \u4ece\u76d2\u5b50\u4e2d\u627e\u51fa\u5b57\u5178\u5e8f\u6700\u5927\u7684\u5b57\u7b26\u4e32 I","text":"<p>\u8fd9\u9053\u9898\u76ee\u591a\u4e86\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u63cf\u8ff0\uff0c\u4f7f\u5f97\u9898\u76ee\u7684\u610f\u601d\u5e76\u4e0d\u662f\u5f88\u597d\u628a\u63e1\u3002</p> <p>\u9898\u76ee\u7684\u610f\u601d\u662f\uff1a\u4ece\u5b57\u7b26\u4e32 word \u4e2d \u5206\u51fa numFriends \u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e0d\u80fd\u4e3a\u7a7a\uff0c\u5224\u65ad\u53ef\u4ee5\u5206\u51fa\u7684\u5b57\u5178\u5e8f\u6700\u5927\u7684\u5b50\u5b57\u7b26\u4e32\u662f\u54ea\u4e2a\uff1f</p> <p>\u7531\u5b57\u5178\u5e8f\u7684\u5b9a\u4e49\u53ef\u4ee5\u77e5\u9053\uff0c\u5728 \\(word\\) \u4e2d\u540c\u4e00\u8d77\u59cb\u4f4d\u7f6e\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u8d8a\u957f\uff0c\u5b57\u5178\u5e8f\u8d8a\u5927\u3002\u6240\u4ee5\u6211\u4eec\u5f88\u81ea\u7136\u5730\u60f3\u5230\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e3a \\(word\\) \u4e2d\u6bcf\u4e2a\u5b57\u6bcd\uff0c\u627e\u4e00\u4e2a\u4ee5\u8be5\u5b57\u6bcd\u5f00\u5934\u7684\u53ef\u4ee5\u5212\u5206\u7684\u6700\u957f\u7684\u5b50\u5b57\u7b26\u4e32\u3002 \\(word\\) \u4e2d\u9898\u76ee\u8981\u6c42\u4ece \\(word\\) \u4e2d\u5212\u5206\u51fa \\(numFriends\\) \u4e2a\u5b50\u5b57\u7b26\u4e32\uff0c\u4e14\u6bcf\u4e2a\u5b50\u5b57\u7b26\u4e32\u4e0d\u80fd\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u6240\u4ee5\u6700\u957f\u7684\u5b50\u5b57\u7b26\u4e32\u4e0d\u80fd\u8d85\u8fc7 \\(word.length - numFriends + 1\\) \u3002</p> <p>\u6ce8\u610f\u8981\u7279\u5224\uff0c\u5f53 \\(numFriends = 1\\) \u7684\u65f6\u5019\u53ea\u80fd\u5212\u5206\u51fa\u539f\u5b57\u7b26\u4e32\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 </p> <pre><code>class Solution {\n    public String answerString(String word, int numFriends) {\n        if(numFriends == 1) {\n            return word;\n        }\n        int len = word.length() - numFriends + 1;\n        int n = word.length();\n        String ans = \"\";\n\n        for (int i = 0; i &lt; n; i++) {\n            String temp;\n            if(i &lt; n - len + 1) {\n                temp = word.substring(i, i + len);\n            } else {\n                temp = word.substring(i, word.length());\n            }\n\n            if(temp.compareTo(ans) &gt; 0) {\n                ans = temp;\n            }\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"blog/leetcode-contest-430/#t3-3404","title":"T3 3404. \u7edf\u8ba1\u7279\u6b8a\u5b50\u5e8f\u5217\u7684\u6570\u76ee","text":"<p>\u9898\u76ee\u5927\u610f\uff1a\u4ece\u6570\u7ec4 \\(nums\\) \u4e2d\u9009\u53d6 \\(4\\) \u4e0b\u6807 \\(p, q, r, s\\)\uff0c\u6ee1\u8db3 \\(p&lt;q&lt;r&lt;s\\) \u4e14\u8fd9 \\(4\\) \u4e2a\u6570\u6bcf\u4e24\u4e2a\u4e0b\u6807\u4e4b\u95f4\uff0c\u81f3\u5c11\u76f8\u9694\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4e14\u8fd9 \\(4\\) \u4e2a\u4e0b\u6807\u6ee1\u8db3 \\(nums[p] * nums[r] == nums[q]*nums[s]\\)</p> <p>\u6570\u7ec4\u957f\u5ea6\u4e3a \\(1000\\) \uff0c\u9700\u8981 \\(O(n^2)\\) \u4ee5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u624d\u80fd\u591f\u4e0d\u8d85\u65f6\u89e3\u51b3\u95ee\u9898\u3002</p>"},{"location":"blog/leetcode-contest-432/","title":"LeetCode Contest 432","text":"<p>\u7ec8\u4e8e\u71ac\u8fc7\u671f\u672b\u5468\u3002\u53ef\u60dc\u53c8\u662f\u4e24\u9898\u9009\u624b\uff0c\u9057\u61be\u6389\u5206\u3002\u5e93\u9732\u897f 555\u3002</p> <p>\u6392\u540d:797</p>"},{"location":"blog/leetcode-contest-434/","title":"LeetCode Contest 434","text":"<p>\u6625\u8282\u524d\u6700\u540e\u4e00\u573a\u5468\u8d5b\u3002\u6b7b\u78d5T3\uff0c\u8d2a\u5fc3\u60f3\u7834\u5934\uff0c\u62fc\u5c3d\u5168\u529b\u65e0\u6cd5\u6218\u80dc\u3002\u4e24\u9898\u9009\u624bQAQ</p> <p>\u6392\u540d:517</p>"},{"location":"blog/leetcode-contest-436/","title":"LeetCode Contest 436","text":"<p>\u6625\u8282\u540e\u7684\u7b2c\u4e00\u573a\u5468\u8d5b\uff0c\u4e24\u9898\u6389\u5206\u9009\u624b\uff0c1800\u5206\u597d\u50cf\u8fd1\u5728\u54ab\u5c3a\u4f46\u662f\u5374\u89e6\u6478\u4e0d\u5230\u3002</p> <p>\u6392\u540d:661</p>"},{"location":"blog/leetcode-contest-437/","title":"LeetCode Contest 437","text":"<p>T2\u8fdeWA\u4e94\u6b21\u7ec8\u4e8e\u901a\u8fc7\uff0cT3\u592a\u8fc7\u6df1\u5965\u62fc\u5c3d\u5168\u529b\u65e0\u6cd5\u6218\u80dc</p> <p>\u6392\u540d:676</p>"},{"location":"blog/leetcode-contest-437/#t1-k","title":"T1.\u627e\u51fa\u957f\u5ea6\u4e3a K \u7684\u7279\u6b8a\u5b50\u5b57\u7b26\u4e32","text":""},{"location":"blog/leetcode-contest-437/#t2","title":"T2.\u5403\u62ab\u8428","text":""},{"location":"blog/leetcode-contest-437/#t3-k","title":"T3.\u9009\u62e9 K \u4e2a\u4e92\u4e0d\u91cd\u53e0\u7684\u7279\u6b8a\u5b50\u5b57\u7b26\u4e32","text":""},{"location":"blog/leetcode-contest-437/#t4v","title":"T4.\u6700\u957fV\u5f62\u5bf9\u89d2\u7ebf\u6bb5\u7684\u957f\u5ea6","text":""},{"location":"blog/leetcode-contest-439/","title":"LeetCode Contest 439","text":"<p>T2\u8fd9\u4e48\u96be\uff1f\u4f60\u8981\u628a\u5468\u8d5b\u6bc1\u4e86\u5417\u7262\u6263\uff01</p> <p>\u6392\u540d:488</p>"},{"location":"blog/oppo%E6%8F%90%E5%89%8D%E6%89%B9%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%9820230715/","title":"oppo\u63d0\u524d\u6279\u7b14\u8bd5\u771f\u989820230715","text":"<p>\u7b14\u8bd5\u771f\u9898</p>"},{"location":"blog/oppo%E6%8F%90%E5%89%8D%E6%89%B9%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%9820230715/#111","title":"111. \u6784\u9020\u4e8c\u9636\u884c\u5217\u5f0f","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5c0f\u6b27\u5e0c\u671b\u4f60\u6784\u9020\u4e00\u4e2a\u4e8c\u9636\u884c\u5217\u5f0f\uff0c\u6ee1\u8db3\u884c\u5217\u5f0f\u4e2d\u6bcf\u4e2a\u6570\u5747\u4e3a\u4e0d\u8d85\u8fc7 20 \u7684\u6b63\u6574\u6570\uff0c\u4e14\u884c\u5217\u5f0f\u7684\u503c\u6070\u597d\u7b49\u4e8ex\u3002\u4f60\u80fd\u5e2e\u5e2e\u5979\u5417?</p> <p>\u8f93\u5165\u63cf\u8ff0:</p> <p>\u4e00\u4e2a\u6b63\u6574\u6570x\u3002-1000 &lt;= x &lt;= 1000</p> <p>\u8f93\u51fa\u63cf\u8ff0\uff1a</p> <p>\u5982\u679c\u65e0\u89e3\uff0c\u8bf7\u8f93\u51fa-1\u3002\u5426\u5219\u8f93\u51fa\u4efb\u610f\u5408\u6cd5\u884c\u5217\u5f0f\u5373\u53ef(\u8f93\u51fa\u4e24\u884c,\u6bcf\u884c\u8f93\u51fa\u4e24\u4e2a\u4e0d\u8d85\u8fc720\u7684\u6b63\u6574\u6570)\u3002</p> <p>\u66b4\u529b\u679a\u4e3e\uff0c\u679a\u4e3e\u7684\u6b21\u6570\u6700\u591a\u662f \\(20 ^ 4 = 160000\\) \u4e0d\u4f1a\u8d85\u65f6</p> <pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int x = sc.nextInt();\n        int a, b, c,  d;\n        a = b = c = d = -1;\n\n        for(int i = 1; i &lt;= 20; i ++) {\n            for(int j = 1; j &lt;= 20; j ++) {\n                for(int l = 1; l &lt;= 20; l ++) {\n                    for(int r = 1; r &lt;= 20; r ++) {\n                        if(i * j - l * r == x) {\n                            System.out.println(i + \" \" + l + '\\n' + r + \" \" + j);\n                            return;\n                        }\n                    }\n                }\n            }\n        }\n\n        System.out.println(-1);\n    }\n}\n</code></pre>"},{"location":"blog/oppo%E6%8F%90%E5%89%8D%E6%89%B9%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%9820230715/#112-boss","title":"112. \u6311\u6218boss","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5c0f\u6b27\u6b63\u5728\u4e00\u4e2a\u56de\u5408\u5236\u683c\u6597\u6e38\u620f\u4e2d\u6311\u6218\u4e00\u4e2aboss\u3002\u5df2\u77e5\u6e38\u620f\u7684\u673a\u5236\u5982\u4e0b: </p> <p>\u6bcf\u56de\u5408\u5c0f\u6b27\u5148\u624b\u653b\u51fbboss\uff0c\u7136\u540eboss\u653b\u51fb\u5c0f\u6b27\uff0c\u6b64\u65f61\u56de\u5408\u7ed3\u675f\u3002</p> <p>\u5c0f\u6b27\u6709\u65f6\u53ef\u4ee5\u95ea\u907fboss\u7684\u653b\u51fb\uff0c\u5f53\u95ea\u907f\u6210\u529f\u65f6\u8fd9\u56de\u5408\u5c06\u4e0d\u53d7boss\u7684\u4f24\u5bb3\u3002 \u5c0f\u6b27\u653b\u51fbboss\u65f6\u53ef\u4ee5\u6512\u201c\u8fde\u51fb\u70b9\u201d\uff0c\u5979\u653b\u51fb\u9020\u6210\u7684\u4f24\u5bb3\u4e3a \\(a+kb\\)\uff0c\u5176\u4e2d \\(a\\) \u4e3a\u57fa\u7840\u653b\u51fb\u529b\uff0c\\(b\\) \u4e3a\u57fa\u7840\u8fde\u51fb\u4f24\u5bb3\uff0c\\(k\\) \u4e3a\u8fde\u51fb\u6b21\u6570\u3002\u5c0f\u6b27\u6bcf\u6b21\u653b\u51fb\u540e\u4f1a\u8ba9\u8fde\u51fb\u6b21\u6570\u52a0 \\(1\\)\uff0c\u4f46\u5f53\u5c0f\u6b27\u53d7\u5230\u4f24\u5bb3\u540e\u4f1a\u91cd\u7f6e\u8fde\u51fb\u6b21\u6570\u4e3a \\(0\\) \u3002 </p> <p>\u5c0f\u6b27\u60f3\u77e5\u9053\uff0c\u5979\u6700\u7ec8\u5171\u5bf9boss\u9020\u6210\u4e86\u591a\u5c11\u4f24\u5bb3?</p> <p>\u8f93\u5165\u63cf\u8ff0:</p> <p>\u7b2c\u4e00\u884c\u8f93\u5165\u4e09\u4e2a\u6b63\u6574\u6570 \\(n,a,b\\) \uff0c\u4ee3\u8868\u56de\u5408\u7684\u6570\u91cf\uff0c\u5c0f\u6b27\u57fa\u7840\u653b\u51fb\u529b\uff0c\u5c0f\u6b27\u7684\u57fa\u7840\u8fde\u51fb\u4f24\u5bb3\u3002 </p> <p>\u7b2c\u4e8c\u884c\u8f93\u5165\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(n\\) \u7684\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u4ec5\u7531 \\(o\\) \u548c \\(x\\) \u7ec4\u6210\uff0c\u5176\u4e2d \\(o\\) \u4ee3\u8868\u672c\u56de\u5408\u95ea\u907f\u6210\u529f\uff0c\\(x\\) \u4ee3\u8868\u672c\u56de\u5408\u95ea\u907f\u5931\u8d25\u3002 </p> <p>1 &lt;= n,a,b &lt;= 10^5</p> <p>\u8f93\u51fa\u63cf\u8ff0:</p> <p>\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4ee3\u8868\u5c0f\u6b27\u9020\u6210\u7684\u4f24\u5bb3\u603b\u548c\u3002</p> <p>\u66b4\u529b\u6a21\u62df\u8fc7\u7a0b</p> <pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n        int a = sc.nextInt();\n        int b = sc.nextInt();\n\n        sc.nextLine();\n        String str = sc.nextLine();\n\n        int ans = 0;\n\n        int k = 0;\n\n        for(int i = 0; i &lt; n; i ++) {\n            ans += a + k * b;\n            k ++;\n            if(str.charAt(i) == 'x') {\n                k = 0;\n            }\n        }\n\n        System.out.println(ans);\n    }\n}\n</code></pre>"},{"location":"blog/oppo%E6%8F%90%E5%89%8D%E6%89%B9%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%9820230715/#113","title":"113. \u56fd\u9645\u8c61\u68cb","text":"<p>\u9898\u76ee\u63cf\u8ff0</p> <p>\u5c0f\u6b27\u83b7\u5f97\u4e86\u56fd\u9645\u8c61\u68cb\u4e2d\u201c\u8c61\"\u548c\u201d\u9a6c\u201d\u7684\u80fd\u529b\uff0c\u5979\u5728\u4e00\u4e2a\u65e0\u7a77\u5927\u7684\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u6548\u4eff\u56fd\u9645\u8c61\u68cb\u4e2d \u7684\u201d\u8c61\"\u548c\"\u9a6c\"\u8df3\u4e00\u6b65\u3002 </p> <p>\u5982\u4e0b\u56fe\uff0c\u5c0f\u7ea2\u521d\u59cb\u5750\u6807\u4e3a \\((x, y)\\) \u65f6\uff0c\u53ea\u8df3\u4e00\u6b65\u65f6\u53ef\u4ee5\u8df3\u5230\u4ee5\u4e0b </p> <p>1.\\((x+k,y+k)\\)\uff0c\\(k\\) \u662f\u4efb\u610f\u6574\u6570\u3002 </p> <p>2.\\((x+k,y-k)\\)\uff0c\\(k\\) \u662f\u4efb\u610f\u6574\u6570\u3002 </p> <p>3.\\((x+a,y+b)\\).\u5176\u4e2d \\(|a|+|b|=3\\) \u4e14 \\(1&lt;=a,b&lt;=2\\). \u5c0f\u6b27\u60f3\u77e5\u9053\uff0c\u81ea\u5df1\u521d\u59cb\u5750\u6807\u4e3a\\(x1,y1\\)\uff0c\u4ed6\u8df3\u5230\\(x2,y2\\)\u6700\u5c11\u9700\u8981\u8df3\u591a\u5c11\u6b65\uff1f\u5171\u6709\\(t\\)\u6b21\u8be2\u95ee</p> <p>\u8f93\u5165\u63cf\u8ff0:</p> <p>\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t(1 &lt;= t &lt;= 100)\u8868\u793a\u8be2\u95ee\u7ec4\u6570 \u63a5\u4e0b\u6765t\u884c\uff0c</p> <p>\u6bcf\u884c\u56db\u4e2a\u6574\u6570x1,y1,x2,y2 </p> <p>-10^9 &lt;= x1,y1,x2,y2 &lt;= 10^9</p> <p>\u8f93\u51fa\u63cf\u8ff0:</p> <p>\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u6700\u5c0f\u7684\u6b65\u6570\u3002</p> <p>\u8fd9\u9898\u770b\u8d77\u6765\u50cf\u662f\u56fe\u8bba\uff0c\u4f46\u662f\u5176\u5b9e\u4ed6\u662f\u4e00\u9053\u6570\u5b66\u8bc1\u660e\u9898 - -\uff0c\u9996\u5148\u8981\u6ce8\u610f\u5230\u9898\u76ee\u524d\u63d0\u662f\u5728\u4e00\u4e2a\u65e0\u7a77\u5927\u7684\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e2d\uff0c\u8c61\u662f\u53ef\u4ee5\u8d70\u5230\u5bf9\u89d2\u7ebf\u548c\u53cd\u5bf9\u89d2\u7ebf\u7684\u4efb\u4f55\u4f4d\u7f6e\uff0c\u9a6c\u5c31\u548c\u4e2d\u56fd\u8c61\u68cb\u4e2d\u7684\u9a6c\u662f\u4e00\u6837\u7684\u8d70\u7684\u65e5\u5b57\u683c\u3002</p> <p>\u53ef\u4ee5\u53d1\u73b0\u7528\u8c61\u7684\u65b9\u5f0f\u79fb\u52a8\u662f\u4e0d\u4f1a\u6539\u53d8 \\((x, y)\\) \u7684\u5750\u6807\u548c (\\(x + y\\)) \u7684\u5947\u5076\u6027\u7684\uff0c\u6240\u4ee5\u5982\u679c\u4e24\u4e2a\u5750\u6807\u548c\u7684\u5947\u5076\u6027\u662f\u76f8\u540c\u7684\uff0c\u90a3\u4e48\u8bf4\u660e\u4e24\u4e2a\u5750\u6807\u70b9\u53ef\u4ee5\u901a\u8fc7\u8c61\u7684\u79fb\u52a8\u8fbe\u5230\uff0c\u6211\u4eec\u5206\u522b\u6765\u770b\u5947\u5076\u6027\u76f8\u540c\u65f6\u7684\u4e24\u79cd\u60c5\u51b5:</p> <ul> <li> <p>\u5982\u679c \\((x1, y1)\\) \u548c \\((x2, y2)\\) \u6240\u5904\u5730\u7684\u5bf9\u89d2\u7ebf\u91cd\u5408\uff0c\u5373\u5728\u4e00\u6761\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u90a3\u4e48\u7528\u8c61\u79fb\u52a8\u4e00\u6b21\u5c31\u53ef\u4ee5\u4e86</p> </li> <li> <p>\u5982\u679c \\((x1, y1)\\) \u548c \\((x2, y2)\\) \u6240\u5904\u5730\u7684\u5bf9\u89d2\u7ebf\u4e0d\u91cd\u5408\uff0c\u90a3\u4e48\u79fb\u52a8\u4e00\u6b21\u4f7f\u5f97\u4e24\u5750\u6807\u70b9\u5904\u4e8e\u4e00\u6761\u5bf9\u89d2\u7ebf\u6216\u53cd\u5bf9\u89d2\u7ebf\u4e0a\uff0c\u7136\u540e\u518d\u79fb\u52a8\u4e00\u6b21\u5230\u8fbe</p> </li> </ul> <p>\u90a3\u4e48\u5982\u679c\u4e24\u4e2a\u5750\u6807\u70b9\u7684\u548c\u5947\u5076\u6027\u4e0d\u540c\u5462\uff1f</p> <p>\u4f7f\u7528\u9a6c\u8d70\u65e5\u6539\u53d8\u5947\u5076\u6027\u3002\u8d70\u65e5\u5b57\u4f1a\u4f7f\u5f97\u5750\u6807\u548c\u52a0\u4e0a\u4e00\u4e2a\u5947\u6570\u6216\u8005\u51cf\u53bb\u4e00\u4e2a\u5947\u6570\uff0c\u90a3\u4e48\u5f53\u524d\u548c\u7684\u5947\u5076\u6027\u5c31\u4f1a\u6539\u53d8\uff0c\u4e00\u65e6\u5947\u5076\u6027\u76f8\u540c\u53c8\u53ef\u4ee5\u5957\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u3002</p> <p>\u5176\u5b9e\u8fd8\u53ef\u4ee5\u7528\u5217\u65b9\u7a0b\u7684\u601d\u60f3\u6765\u8bc1\u660e\u201c\u5982\u679c\u4e24\u4e2a\u5750\u6807\u548c\u5947\u5076\u6027\u76f8\u540c\uff0c\u4e00\u5b9a\u53ef\u4ee5\u5728\u4e24\u6b65\u4e4b\u5185\u8d70\u5230\u201d</p> <p>\u5047\u8bbe \\((x1, y1)\\), \\((x2, y2)\\) \u6ee1\u8db3 \\((x1 + y1) \\mod 2 == (x2 + y2) \\mod 2\\)</p> <p>\u90a3\u4e48\u4e0d\u59a8\u5047\u8bbe\u9700\u8981\u8d70\u4e24\u6b65\uff0c\u7b2c\u4e00\u6b65\u6b65\u957f \\((k1, k1)\\) \u7b2c\u4e8c\u6b65\u6b65\u957f \\((k2, -k2)\\)\uff0c\u90a3\u4e48\u6709</p> \\[ \\begin{equation}   \\begin{aligned}     k1 + k2 = x1 + y1 \\\\     k1 - k2 = x2 + y2 \\\\     =&gt;2k1 = x1 + y1 + x2 + y2 \\\\     =&gt;k1 = \\frac{x1 + y1 + x2 + y2}{2}   \\end{aligned} \\end{equation} \\] <p>\u5982\u679c \\(x1 + y1 + x2 + y2\\) \u4e3a\u5076\u6570\u90a3\u4e48 \\(k1\\) \u5c31\u80fd\u5f97\u5230\u6574\u6570\u89e3\uff0c\u5426\u5219\u5f97\u4e0d\u5230</p> <pre><code>import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    private static int dx[] = {1, 1, 2, 2, -1, -1, -2, -2};\n    private static int dy[] = {2, -2, -1, 1, 2, -2, 1, -1};\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n        int n = Integer.parseInt(br.readLine());\n\n\n        for(int i = 0; i &lt; n; i ++) {\n            String num = br.readLine();\n            String[] nums = num.split(\" \");\n            int x1 = Integer.parseInt(nums[0]);\n            int y1 = Integer.parseInt(nums[1]);\n            int x2 = Integer.parseInt(nums[2]);\n            int y2 = Integer.parseInt(nums[3]);\n            int ans = 3;\n\n\n            if(issame(x1 + y1, x2 + y2)) {\n                if(isonestep(x1, y1, x2, y2)) {\n                    ans = Math.min(ans, 1);\n                } else {\n                    ans = Math.min(ans, 2);\n                }\n            } else {\n                for(int j = 0; j &lt; 8; j ++) {\n                    if(isonestep(x1, y1, x2, y2)) {\n                        ans = Math.min(ans, 1);\n                    } else if(isonestep(x1 + dx[j], y1 + dy[j], x2, y2)) {\n                        ans = Math.min(ans, 2);\n                    }\n                }\n            }\n\n            System.out.println(ans);\n        }\n\n\n    }\n\n    public static boolean isonestep(int x1, int y1, int x2, int y2) {\n        // \u662f\u5426\u5728\u5bf9\u89d2\u7ebf \u6216\u8005 \u53cd\u5bf9\u89d2\u7ebf\n        if((x1 + y1 == x2 + y2) || (x1 - y1 == x2 - y2)) {\n            return true;\n        } \n\n        for(int i = 0; i &lt; 8; i ++) {\n            if((x1 + dx[i] == x2) &amp;&amp; (y1 + dy[i] == y2)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static boolean issame(int a, int b) {\n        return Math.abs(a) % 2 == Math.abs(b) % 2;\n    }\n}\n</code></pre>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/","title":"\u6b66\u5fe0\u7965\u6bcf\u65e5\u4e00\u989811\u6708","text":"<p>\u8003\u7814\u6570\u5b66\u4e4b\u95f2\u7684\u86cb\u75bc\u60f3\u88c5\u903c\u4e4b\u6b66\u5fe0\u7965\u6bcf\u65e5\u4e00\u9898</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#111","title":"11.1","text":"<p>\u5df2\u77e5\\(f(x + 1)\\)\u7684\u5b9a\u4e49\u57df\u4e3a \\([0, a],(a &gt; 0),\\) \u5219\\(f(x)\\)\u7684\u5b9a\u4e49\u57df\u4e3a\\((\\qquad)\\)</p> <p>\u7b54\uff1a\\([1,a+1]\\)</p> <p>\u89e3\uff1a\u53ef\u77e5 \\(1 \\le x + 1\\le a + 1\\) \u5219\u53ef\u77e5\u8f93\u5165\\(f()\\)\u7684\u81ea\u53d8\u91cf\u7684\u8303\u56f4\u4e3a\\([1,a + 1]\\), \u6240\u4ee5\\(f(x)\\)\u7684\u5b9a\u4e49\u57df\u4e3a\\([1,a+1]\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#112","title":"11.2","text":"<p>\u5df2\u77e5\\(f(x) = e^{x^2}, f(\\phi(x))=1-x\\)\u4e14\\(\\phi(x)\\ge 0\\),\u6c42 \\(\\phi(x)\\)\u5e76\u5199\u51fa\u5b83\u7684\u5b9a\u4e49\u57df</p> <p>\u7b54\uff1a\\(\\phi(x) =\\sqrt{ln(1-x)},x\\in(-\\infty,0]\\)</p> <p>\u89e3\uff1a\u7531\u9898\u610f\u5f97\uff1a\\(f(\\phi(x)) = e^{\\phi(x)^2} = 1 - x\\)</p> <p>=&gt; \\(\\phi(x) =\\sqrt{ln(1 - x)}\\)\u5e76\u4e14\\(x\\)\u7684\u5b9a\u4e49\u57df\u4e3a\\(x\\in(-\\infty, 0]\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#113","title":"11.3","text":"<p>\u8bbe  \\(g(x)=\\left\\{      \\begin{aligned}     2-x, \\quad x\\le0\\\\     x+2, \\quad x&gt;0\\\\     \\end{aligned}     \\right.\\) \\(,\\quad f(x)=\\left\\{     \\begin{aligned}     x^2, \\quad x&lt;0\\\\     -x, \\quad x\\ge0\\\\      \\end{aligned}     \\right.\\) \u5219\\(\\quad g[f(x)] = ()\\)</p> <p>\u89e3\uff1a\u5bf9\u4e8e\\(f(x)\\),\u5f53\\(x&lt;0\\)\u65f6,\\(f(x) = x^2 &gt;0\\),\u800c\u5f53\\(x\\ge0\\)\u65f6, \\(f(x) = -x\\le0\\)</p> <p>\u4ee4\\(f(x) = t\\),\u5219\u5f53\\(t&gt;0\\)\u65f6,\\(g(t) = t + 2 = x^2 + 2\\), \u5f53\\(t\\le0\\)\u65f6, \\(g(t) = 2 - t = 2 + x\\)</p> <p>\u6240\u4ee5 \\(g[f(x)]=\\left\\{     \\begin{aligned}     x^2+2,\\quad x&lt;0\\\\     2+x,\\quad x\\le 0\\\\      \\end{aligned}     \\right.\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#114","title":"11.4","text":"<p>\u8bbe\u51fd\u6570  \\(\\quad f(x)=\\left\\{     \\begin{aligned}     1-2x^2, \\quad x&lt;-1\\\\     x^3, \\quad -1\\le x \\le 2\\\\     12x-16, \\quad x&gt;2\\\\     \\end{aligned}     \\right.  \\quad f(x)\\)\u7684\u53cd\u51fd\u6570\\(g(x)\\)\u7684\u8868\u8fbe\u5f0f</p> <p>\u89e3\uff1a\\(x&lt;-1\\)\u65f6,\\(f(x) &lt; -1, \\\\ \\quad -1\\le x \\le 2\\)\u65f6,\\(-1 \\le f(x) \\le 8 \\\\ \\quad x &gt; 2\\), \\(f(x) &gt; 8\\)</p> <p>\\(\\quad g(x) = \\left\\{     \\begin{aligned}     -\\sqrt{\\frac{1-x}{2}},\\quad x &lt; -1\\\\     \\sqrt[3]{x},\\quad -1\\le x \\le8 \\\\     \\frac{x+16}{12}, \\qquad x&gt;8     \\end{aligned}     \\right.\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#115","title":"11.5","text":"<p>\u8bc1\u660e\uff1a\u5b9a\u4e49\u5728\u533a\u95f4\\([-a, a]\\) \u4e0a\u7684\u4efb\u4f55\u4e00\u4e2a\u51fd\u6570\\(f(x)\\),\u90fd\u53ef\u4ee5\u8868\u793a\u6210\u4e00\u4e2a\u5947\u51fd\u6570\u548c\u4e00\u4e2a\u5076\u51fd\u6570\u4e4b\u548c</p> <p>\u8bc1\uff1a\u53ef\u77e5\\(f(x) = \\cfrac{f(x) + f(-x)}{2}+\\cfrac{f(x)-f(-x)}{2}\\) \u524d\u8005\u4e3a\u5076\u51fd\u6570\uff0c\u540e\u8005\u4e3a\u5947\u51fd\u6570</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#116","title":"11.6","text":"<p>\u8bbe\\(f(x) = xe^{\\sin x}\\tan (x)\\),\u5219\\(f(x)\\)\u662f\\((\\quad)\\)</p> <p>A.\u5076\u51fd\u6570    B.\u65e0\u754c\u51fd\u6570  C.\u5468\u671f\u51fd\u6570  D.\u5355\u8c03\u51fd\u6570   </p> <p>\u7b54\u6848\uff1aB</p> <p>A.\\(f(-x) = -xe^{-\\sin x}\\tan (-x), -f(x) = -xe^{\\sin x}\\tan (x)\\)\u3002\u6240\u4ee5\u53ef\u4ee5\u770b\u51fa\\(f(x)\\)\u4e3a\u975e\u5947\u975e\u5076\u51fd\u6570</p> <p>B.\u5f53\\(x\\)\u8d8b\u4e8e\u65e0\u7a77\u7684\u65f6\u5019,\u4e14\\(\\tan (x)\\)\u4e0d\u4e3a\\(0\\)\u7684\u65f6\u5019,\u5219\\(f(x)\\)\u4e5f\u4f1a\u8d8b\u4e8e\u65e0\u7a77</p> <p>C.\\(f(x)\\)\u65e0\u5468\u671f\u6027,\\(x\\)\u8d8a\u5927,\\(f(x)\\)\u8d8a\u5927</p> <p>D.\u56e0\u4e3a\\(\\tan (x)\\)\u4e3a\u5468\u671f\u51fd\u6570\uff0c\u6240\u4ee5\\(f(x)\\)\u4e0d\u5355\u8c03</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#117","title":"11.7","text":"<p>\u51fd\u6570</p> \\[f(x) = \\frac{|x|\\sin (x-2)}{x(x-1)(x-2)^2}\\] <p>\u5728\u4e0b\u5217\u54ea\u4e2a\u533a\u95f4\u6709\u754c(\\(\\quad\\))</p> <p>\u7b54\u6848\uff1aA</p> <p>\\(A.(-1,0)\\quad B(0,1)\\quad C(1,2)\\quad  D(2,3)\\)</p> <p>A. \\(\\lim\\limits_{x\\to-1^+}f(x)=\\cfrac{\\sin (-3)}{18}\\quad\\lim\\limits_{x\\to0^-}{f(x)}=\\cfrac{\\sin (-2)}{4}\\)</p> <p>B. \\(\\lim\\limits_{x\\to0^+}{f(x)}=\\cfrac{\\sin (-2)}{-4}\\quad \\lim\\limits_{x\\to1^-}{f(x)}=\\infty\\)</p> <p>C. \\(\\lim\\limits_{x\\to1^+}{f(x)}=\\infty\\quad \\lim\\limits_{x\\to2^-}{f(x)}=\\infty\\)</p> <p>D. \\(\\lim\\limits_{x\\to2^+}{f(x)}=\\infty\\quad \\lim\\limits_{x\\to3^-}{f(x)}=\\cfrac{\\sin (1)}{2}\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#118","title":"11.8","text":"\\[\\lim\\limits_{n\\to\\infty}[\\sqrt{1+2+...+n}-\\sqrt{1+2+...+(n-1)}]\\] <p>\u89e3\uff1a\u539f\u5f0f = </p> \\[\\lim\\limits_{n\\to\\infty}[\\frac{n}{\\sqrt{1+2+...+n}+{\\sqrt{1+2+...+(n-1)}}}]\\] \\[=\\lim\\limits_{n\\to\\infty}[\\frac{1}{\\sqrt{\\frac{1}{n^2}+\\frac{2}{n^2}+...+\\frac{n}{n^2}} +\\sqrt{\\frac{1}{n^2}+\\frac{2}{n^2}+...+\\frac{n-1}{n^2}}}]\\] \\[=\\lim\\limits_{n\\to\\infty}[\\frac{1}{\\sqrt{\\frac{n^2+n}{2n^2}}+\\sqrt{\\frac{n^2-n}{2n^2}}}]\\] \\[=\\lim\\limits_{n\\to\\infty}[\\frac{1}{\\frac{1}{\\sqrt{2}}+\\frac{1}{\\sqrt{2}}}]\\] \\[=\\frac{\\sqrt{2}}{2}\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#119","title":"11.9","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to-\\infty}\\frac{\\sqrt{4x^2+x-1}+x+1}{\\sqrt{x^2+sinx}}\\] <p>\u89e3:</p> <p>\u539f\u5f0f= </p> \\[\\lim\\limits_{x\\to-\\infty}\\frac{-\\sqrt{4-\\frac{1}{x}-\\frac{1}{x^2}}+1+\\frac{1}{x}}{-\\sqrt{1+\\frac{sinx}{x^2}}}\\] \\[=\\lim\\limits_{x\\to-\\infty}\\frac{-2+1}{-1}=1\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1110","title":"11.10","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to0}(\\frac{2+e^{\\frac{1}{x}}}{1+e^{\\frac{4}{x}}}+\\frac{sinx}{|x|})\\] \\[\\lim\\limits_{x\\to0^-}(\\frac{2+e^{\\frac{1}{x}}}{1+e^{\\frac{4}{x}}} - 1) = \\lim\\limits_{x\\to0^-}(2 - 1) = 1\\] \\[\\lim\\limits_{x\\to0^+}(\\frac{2+e^{\\frac{1}{x}}}{1+e^{\\frac{4}{x}}} + 1) = \\lim\\limits_{x\\to0^+}(\\frac{\\frac{2}{e^{\\frac{1}{x}}}+1}{\\frac{1}{e^{\\frac{1}{x}}}+e^{\\frac{3}{x}}}+1)=1\\] \\[\\lim\\limits_{x\\to0}(\\frac{2+e^{\\frac{1}{x}}}{1+e^{\\frac{4}{x}}}+\\frac{sinx}{|x|})=\\lim\\limits_{x\\to0^-}(\\frac{2+e^{\\frac{1}{x}}}{1+e^{\\frac{4}{x}}} + \\frac{sinx}{|x|})=\\lim\\limits_{x\\to0^+}(\\frac{2+e^{\\frac{1}{x}}}{1+e^{\\frac{4}{x}}} + \\frac{sinx}{|x|})=1\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1111","title":"11.11","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to+\\infty}(\\sqrt{x^2+x}-\\sqrt{x^2-x})\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to+\\infty}(\\frac{2x}{\\sqrt{x^2+x}+\\sqrt{x^2-x}})=\\lim\\limits_{x\\to\\infty}(\\frac{2}{\\sqrt{1+\\frac{1}{x}}+\\sqrt{1-\\frac{1}{x}}}) = 1\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1112","title":"11.12","text":"<p>\u6c42\u6781\u9650</p> \\[ \\lim\\limits_{x\\to0}\\frac{\\sqrt{1+\\tan x}-\\sqrt{1+\\sin x}}{x(1-\\cos x)}\\] \\[\\lim\\limits_{x\\to0}\\frac{\\tan x-\\sin x}{\\frac{1}{2}x^3(\\sqrt{1+\\tan x}+\\sqrt{1+\\sin x})}=\\lim\\limits_{x\\to0}\\frac{\\sin x-\\sin x\\cos x}{\\frac{1}{2}x^3(\\sqrt{1+\\tan x}+\\sqrt{1+\\sin x})\\cos x} \\] \\[ =\\lim\\limits_{x\\to0}\\frac{1-\\cos x}{\\frac{1}{2}x^2(\\sqrt{1+\\tan x}+\\sqrt{1+\\sin x})\\cos x}=\\lim\\limits_{x\\to0}\\frac{1}{(\\sqrt{1+\\tan x}+\\sqrt{1+\\sin x})\\cos x} = \\frac{1}{2}\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1113","title":"11.13","text":"<p>\u5df2\u77e5 \\(\\lim\\limits_{x\\to0}\\cfrac{e^{x^2}-cos2x}{ax^b}=1\\),\u6c42\\(a,b\\)\u7684\u503c</p> <p>\u89e3\uff1a</p> \\[\\lim\\limits_{x\\to0}\\frac{e^{x^2}-cos2x}{ax^b}=\\lim\\limits_{x\\to0}\\frac{e^{x^2}-1+1-cos2x}{ax^b}=\\lim\\limits_{x\\to0}\\frac{x^2+2sin^2x}{ax^b}\\] \\[=\\lim\\limits_{x\\to0}\\frac{1+\\frac{2sin^2x}{x^2}}{ax^{b-2}}=\\lim\\limits_{x\\to0}\\frac{3}{ax^{b-2}}=1\\] \\[a = 3,b=2\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1114","title":"11.14","text":"<p>\u5df2\u77e5\\(\\lim\\limits_{x\\to x_0}\\phi(x)=0\\),\u5219\u4e0b\u5217\u7ed3\u8bba\u6b63\u786e\u7684\u4e2a\u6570\u4e3a()</p> <p>(A)\\(\\lim\\limits_{x\\to x_0}\\cfrac{\\sin \\phi(x)}{\\phi(x)}=1\\)</p> <p>(B)\\(\\lim\\limits_{x\\to x_0}(1+\\phi(x))^{\\cfrac{1}{\\phi(x)}}=e\\)</p> <p>(C)\u5f53\\(x\\to x_0\\)\u65f6,\\(\\sin \\phi(x)\\sim\\phi(x)\\)</p> <p>(D)\u82e5\\(\\lim\\limits_{u\\to 0}f(u)=A\\), \u5219\\(\\lim\\limits_{x\\to x_0}f(\\phi(x))=A\\)</p> <p>\u56e0\u4e3a\u5f53\\(\\lim\\limits_{x\\to x_0}\\phi(x) = 0\\),\u800c\u5f53\\(\\phi(x)\\)\u4e3a\u5e38\u51fd\u6570\u65f6,\u5373\\(\\phi(x)\\)\u6052\u4e3a0 \u5219\u4e0b\u9762\u7684\u6bcf\u4e00\u4e2a\u9009\u9879\u90fd\u4e0d\u7b26\u5408\u3002\u56e0\u4e3a\u7b49\u4ef7\u65e0\u7a77\u5c0f\u7684\u5e94\u7528\u8981\u6c42\\(x\\to 0\\),\u800c\u4e0d\u7b49\u4e8e0</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1115","title":"11.15","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim_{x\\to 0}\\frac{\\arcsin x-\\arctan x}{\\sin x-\\tan x}\\] <p>\u539f\u5f0f = </p> \\[\\lim_{x\\to 0}\\frac{\\arcsin x-x+x-\\arctan x}{sinx-x+x-tanx}=\\lim_{x\\to 0}\\frac{\\frac{1}{6}x^3+\\frac{1}{3}x^3}{-\\frac{1}{6}x^3-\\frac{1}{3}x^3} = -1\\] <p>\u53cd\u601d\uff1a\u7b49\u4ef7\u65e0\u7a77\u5c0f\u7684\u8bb0\u5fc6</p> \\[x-\\sin x\\sim\\frac{1}{6}x^3,x-\\arcsin x \\sim -\\frac{1}{6}x^3\\] \\[x- \\tan x\\sim -\\frac{1}{3}x^3, x- \\arctan x\\sim\\frac{1}{3}x^3\\] \\[x -\\ln (1+x)\\sim \\frac{1}{2}x^2\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1116","title":"11.16","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}\\frac{ln\\frac{x}{ln(1+x)}}{x}\\] <p>\u89e3\u6cd5\u4e00(\u65e0\u8111\u6d1b)\uff1a\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}\\frac{ln(1+x)}{x}\\frac{ln(1+x)-\\frac{x}{1+x}}{ln^2(1+x)}=\\lim_{x\\to 0}=\\frac{ln(1+x)-\\frac{x}{1+x}}{xln(1+x)}\\] \\[=\\lim_{x\\to 0}\\frac{\\frac{1}{1+x}-\\frac{1}{(1+x)^2}}{ln(1+x)+\\frac{x}{1+x}}=\\lim_{x\\to 0}\\frac{x}{(1+x^2)ln(1+x)+x(1+x)}\\] \\[=\\lim_{x\\to 0}\\frac{1}{\\frac{1}{1+x}+2xln(1+x)+\\frac{x^2}{1+x}+1+2x}=\\frac{1}{2}\\] <p>\u89e3\u6cd5\u4e8c(\u7b49\u4ef7\u65e0\u7a77\u5c0f)\uff1a\u539f\u5f0f=</p> \\[\\lim_{x\\to 0}\\frac{ln(\\frac{x}{ln(1+x)}-1+1)}{x}=\\lim_{x\\to 0}\\frac{x-ln(1+x)}{x^2}\\] \\[\\lim_{x\\to 0}\\frac{\\frac{1}{2}x^2}{x^2} = \\frac{1}{2}\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1117","title":"11.17","text":"<p>\u6c42\u6781\u9650 </p> \\[\\lim_{x\\to +\\infty}\\frac{e^x}{(1+\\frac{1}{x})^{x^2}}\\] <p>\u539f\u5f0f=</p> \\[\\lim_{x\\to +\\infty}\\frac{e^x}{e^{x^2ln(1+\\frac{1}{x})}}=\\lim_{x\\to +\\infty}e^{x-x^2ln(1+\\frac{1}{x})}\\] <p>\u4ee4\\(x=\\cfrac{1}{t}\\),\u5219\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to +\\infty}e^{\\frac{1}{t}-\\frac{1}{t^2}ln(1+t)}=\\lim_{x\\to +\\infty}e^{\\frac{t-ln(1+t)}{t^2}}=\\lim_{x\\to +\\infty}e^{\\frac{\\frac{1}{2}t^2}{t^2}}=e^{\\frac{1}{2}}\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1118","title":"11.18","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim_{x\\to 0}\\frac{\\cos x - \\cos (\\sin x)}{x^4}\\] <p>\u539f\u5f0f=</p> \\[\\lim_{x\\to 0}\\frac{-\\sin (\\xi)(x-\\sin x)}{x^4}=\\lim_{x\\to 0}\\frac{\\sin x-x}{x^3}\\] \\[=\\lim_{x\\to 0}\\frac{-\\frac{1}{6}x^3}{x^3}=-\\frac{1}{6}\\] <p>\u53cd\u601d: \u62c9\u683c\u6717\u65e5\uff1a\\(f(x_1)-f(x_2)=f'(\\xi)(x_1-x_2),\\xi\\) \u5728\\(x_1\\)\u548c\\(x_2\\)\u4e4b\u95f4 \u5bf9\u4e8e\u672c\u9898\\(\\xi\\)\u5728\\(x\\)\u548c\\(sinx\\)\u4e4b\u95f4\uff0c\u800c\u5728\\(x\\to 0\\)\u65f6\uff0c\\(\\lim\\limits_{x\\to 0}\\cfrac{x}{x}=\\lim\\limits_{x\\to 0}\\cfrac{sinx}{x}=1\\)\uff0c\u6240\u4ee5\\(\\lim\\limits_{x\\to 0}\\cfrac{\\xi}{x} =1\\)\uff0c\u8bf4\u660e\\(\\xi\\)\u548c\\(x\\)\u5728\\(x\\to 0\\)\u65f6\u4e3a\u7b49\u4ef7\u65e0\u7a77\u5c0f\uff0c\u5219\u53ef\u4ee5\u8fdb\u884c\u65e0\u7a77\u5c0f\u66ff\u6362</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1119","title":"11.19","text":"<p>\u6c42\u6781\u9650 </p> \\[\\lim\\limits_{x\\to +\\infty}x^2[\\arctan (x+1)-\\arctan (x)]\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to +\\infty}\\frac{\\frac{1}{(1+x)^2+1}-\\frac{1}{x^2+1}}{-2\\frac{1}{x^3}}=\\lim\\limits_{x\\to +\\infty}\\frac{\\frac{-2x-1}{(x^2+2x+2)(x^2+1)}}{-2\\frac{1}{x^3}}\\] \\[\\lim\\limits_{x\\to +\\infty}\\frac{-2x^4-x^3}{-2(x^2+2x+2)(x^2+1)}=1\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1120","title":"11.20","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{n\\to \\infty}n^2[\\arctan\\frac{a}{n}-\\arctan\\frac{a}{n+1}]\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{n\\to \\infty}n^2\\frac{1}{\\xi^2+1}(\\frac{a}{n}-\\frac{a}{n+1})=\\lim\\limits_{n\\to \\infty}n^2\\frac{1}{(\\frac{a}{n})^2+1}\\frac{a}{n^2+n}\\] \\[=\\lim\\limits_{n\\to \\infty}\\frac{an^4}{(a^2+n^2)(n^2+n)}=a\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1121","title":"11.21","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to +\\infty}[\\sin\\sqrt{x+1}-\\sin\\sqrt{x}]\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to +\\infty}\\cos(\\xi)(\\sqrt{x+1}-\\sqrt{x})=\\lim\\limits_{x\\to +\\infty}\\frac{\\cos(x)}{\\sqrt{x+1}+\\sqrt{x}}\\] <p>\u6709\u754c\u51fd\u6570\u4e58\u4ee5\u65e0\u7a77\u5c0f\uff0c\u539f\u5f0f\\(=0\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1122","title":"11.22","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}[\\frac{1}{ln(1+x^2)}-\\frac{1}{ln(1+\\tan ^2x)}]\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}[-\\frac{2\\xi(x-\\tan x)}{(1+\\xi^2)\\ln ^2(1+\\xi^2)}]=\\lim\\limits_{x\\to 0}-\\frac{2x(x-\\tan x)}{(1+x^2)\\ln ^2(1+x^2)}\\] \\[=\\lim\\limits_{x\\to 0}-\\frac{2x(-\\frac{1}{3}x^3)}{x^4}=\\frac{2}{3}\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1123","title":"11.23","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}[\\frac{1}{\\ln(1+x^2)}-\\frac{1}{\\sin ^2x}]\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}[\\frac{\\sin ^2x-\\ln(1+x^2)}{\\ln(1+x^2)\\sin ^2x}]=\\lim\\limits_{x\\to 0}[\\frac{\\sin ^2x-x^2+x^2-\\ln(1+x^2)}{x^4}]\\] \\[=\\lim\\limits_{x\\to 0}(\\frac{\\sin ^2-x^2}{x^4})+\\lim\\limits_{x\\to 0}(\\frac{x^2-\\ln(1+x^2)}{x^4})=\\lim\\limits_{x\\to 0}\\frac{\\sin ^2x-x^2}{x^4}+\\frac{1}{2}\\] \\[=\\lim\\limits_{x\\to 0}\\frac{(\\sin x-x)(\\sin x + x)}{x^4}+\\frac{1}{2}=\\lim\\limits_{x\\to 0}\\frac{-\\frac{1}{6}x^3(\\sin x+x)}{x^4}+\\frac{1}{2}\\] \\[=\\lim\\limits_{x\\to 0}-\\frac{1}{6}\\frac{\\sin x+x}{x}+\\frac{1}{2}=\\lim\\limits_{x\\to 0}-\\frac{1}{6}\\times2+\\frac{1}{2}=\\frac{1}{6}\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1124","title":"11.24","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}(x+2^x)^{\\frac{2}{x}}\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}(x+2^x-1+1)^{\\frac{2}{x}}=\\lim\\limits_{x\\to 0}e^{\\frac{2(x+2^x-1)}{x}}=\\lim\\limits_{x\\to 0}e^{\\frac{2(1+2^x\\ln2)}{1}}=e^{2+2ln2}=4e^2\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1125","title":"11.25","text":"\\[\\lim\\limits_{x\\to 0}(\\frac{1-\\tan x}{1+\\tan x})^{\\frac{1}{\\sin kx}}=e,\u5219 k = ()\\] \\[\\lim\\limits_{x\\to 0}(1-\\frac{2\\tan x}{1+\\tan x})^{\\frac{1}{\\sin kx}}=\\lim\\limits_{x\\to 0}e^{-\\frac{2\\tan x}{1+\\tan x}\\frac{1}{\\sin kx}}\\] \\[\\lim\\limits_{x\\to 0}-\\frac{2\\tan x}{1+\\tan x}\\frac{1}{\\sin kx} = 1=\\lim\\limits_{x\\to 0}-\\frac{2x}{kx} =&gt; k=-2\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1126","title":"11.26","text":"\\[\\lim\\limits_{x\\to 0}(e^x+ax^2+bx)^{\\frac{1}{x^2}}=1,a=(),b=()\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}e^{\\frac{\\ln(e^x+ax^2+bx)}{x^2}}=\\lim\\limits_{x\\to 0}e^{\\frac{e^x+ax^2+bx-1}{x^2}}\\] \\[\\lim\\limits_{x\\to 0}\\frac{e^x+ax^2+bx-1}{x^2}=\\lim\\limits_{x\\to 0}=\\frac{e^x+2ax+b}{2x}=0\\] \\[=\\lim\\limits_{x\\to 0}\\frac{e^x+2a}{2}=\\frac{1}{2}+a=0=&gt;a=-\\frac{1}{2}\\] \\[\\lim\\limits_{x\\to 0}\\frac{e^x-x+b}{2x}=\\lim\\limits_{x\\to 0}\\frac{1+x-x+b}{2x}=\\lim\\limits_{x\\to 0}\\frac{1+b}{2x}=&gt;b=-1\\] \\[a=-\\frac{1}{2},b=-1\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1127","title":"11.27","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}(\\frac{\\arctan x}{x})^{\\frac{1}{1-\\cos x}}\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}e^{(\\frac{\\arctan x}{x}-1)\\frac{1}{1-\\cos x}}=&gt;\\lim\\limits_{x\\to 0}(\\frac{\\arctan x}{x}-1)\\frac{1}{1-\\cos x}\\] \\[=\\lim\\limits_{x\\to 0}\\frac{\\arctan x - x}{\\frac{1}{2}x^3}=\\lim\\limits_{x\\to 0}\\frac{-\\frac{1}{3}x^3}{\\frac{1}{2}x^3}=-\\frac{2}{3}\\] <p>\u6240\u4ee5\u539f\u5f0f=</p> \\[e^{-\\frac{2}{3}}\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1128","title":"11.28","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{n\\to \\infty}(n \\tan\\frac{1}{n})^{n^2}\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{n\\to \\infty}(n \\tan\\frac{1}{n}-1+1)^{n^2}=\\lim\\limits_{n\\to \\infty}e^{(n\\tan\\frac{1}{n}-1)n^2}\\] <p>\u5373\u6c42</p> \\[\\lim\\limits_{n\\to \\infty}(n\\tan\\frac{1}{n}-1)n^2\\] <p>\u4ee4\\(m=\\frac{1}{n}\\),\u5219\u539f\u5f0f=</p> \\[\\lim\\limits_{m\\to 0}\\frac{\\frac{\\tan m-m}{m}}{m^2}\\] \\[=\\lim\\limits_{m\\to 0}\\frac{\\tan m -m}{m^3}=\\lim\\limits_{m\\to 0}\\frac{\\frac{1}{3}m^3}{m^3}=\\frac{1}{3}\\] <p>\u5219\u539f\u5f0f=\\(e^{\\cfrac{1}{3}}\\)</p> <p>\u53cd\u601d: \u6570\u5217\u6781\u9650\u8fd0\u7528\u6d1b\u5fc5\u8fbe\u6216\u8005\u6cf0\u52d2\u516c\u5f0f\u7684\u65f6\u5019\u9700\u8981\u5148\u7528\u6d77\u6d85\u5b9a\u7406\uff0c\u5c06\u6570\u5217\u6781\u9650\u8f6c\u5316\u4e3a\u51fd\u6570\u6781\u9650\u3002\u8fd8\u6709\u8fd9\u9898\u6211\u53c8\u5fd8\u8bb0\u4e86\u5c06\u6c42\u51fa\u6765\u7684\u6307\u6570\u6781\u9650\u5e26\u56de\u4e86\uff0c\u6211\u4ed6\u5988\u771f\u50bb\u903c\uff0c\u60e9\u7f5a\u81ea\u5df1\u8dd15km</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1129","title":"11.29","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{n\\to \\infty}\\tan ^n(\\frac{\\pi}{4}+\\frac{1}{n})\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{n\\to \\infty}e^{nln(\\tan (\\frac{\\pi}{4}+\\frac{1}{n}))}=\\lim\\limits_{n\\to\\infty}e^{n(\\tan (\\frac{\\pi}{4}+\\frac{1}{n})-1)}\\] <p>\u4ee4\\(t=\\frac{1}{n}\\),\u5219\u6709</p> \\[\\lim\\limits_{t\\to 0}e^{\\frac{\\tan (\\frac{\\pi}{4}+t)-1}{t}}=\\lim\\limits_{t\\to 0}e^{\\frac{\\sec^2 (\\frac{\\pi}{4}+t)}{1}}=\\lim\\limits_{t\\to 0}e^{\\sec^2{(\\frac{\\pi}{4})}}=e^2\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9811%E6%9C%88/#1130","title":"11.30","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}(\\frac{\\ln(1+x)}{x})^{(\\frac{1}{e^x-1})}\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}e^{\\frac{\\ln(1+x)-x}{x(e^x-1)}}=\\lim\\limits_{x\\to 0}e^{\\frac{\\ln(1+x)-x}{x^2}}=\\lim\\limits_{x\\to 0}e^{\\frac{\\frac{1}{1+x}-1}{2x}}\\] \\[=\\lim\\limits_{x\\to 0}e^{\\frac{-x}{2x+2x^2}}=e^{-\\frac{1}{2}}\\] <p>\u53cd\u601d: \\(ln(1+x)-x~=-\\frac{1}{2}x^2\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/","title":"\u6b66\u5fe0\u7965\u6bcf\u65e5\u4e00\u989812\u6708","text":"<p>\u8003\u7814\u6570\u5b66\u4e4b\u95f2\u7684\u86cb\u75bc\u60f3\u88c5\u903c\u4e4b\u6b66\u5fe0\u7965\u6bcf\u65e5\u4e00\u9898</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#121","title":"12.1","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}(\\frac{(1+x)^{\\frac{1}{x}}}{e})^{\\frac{1}{x}}\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}(\\frac{(1+x)^{\\frac{1}{x}}}{e}-1+1)^{\\frac{1}{x}}=\\lim\\limits_{x\\to 0}e^{\\frac{(1+x)^{\\frac{1}{x}}-e}{e}\\frac{1}{x}}\\] <p>\u5373\u6c42</p> \\[\\lim\\limits_{x\\to 0}\\frac{(1+x)^{\\frac{1}{x}}-e}{ex}=\\lim\\limits_{x\\to 0}\\frac{e^{\\frac{ln(1+x)}{x}}-e}{ex}=\\lim\\limits_{x\\to 0}\\frac{e^{\\xi}(\\frac{ln(1+x)}{x}-1)}{ex}\\] \\[=\\lim\\limits_{x\\to 0}\\frac{ln(1+x)-x}{x^2}=\\lim\\limits_{x\\to 0}\\frac{-\\frac{1}{2}x^2}{x^2}=-\\frac{1}{2}\\] <p>\u6240\u4ee5\u539f\u5f0f=\\(e^{-\\cfrac{1}{2}}\\)</p> <p>\u53cd\u601d\uff1a\u7ecf\u5178\u7684\u9519\u8bef\uff0c\u6807\u51c6\u7684\u96f6\u5206\uff0c\u4e3a\u5565\u4e0d\u5e26\u56de\u554a\uff0c\u54ce\u5466\u6211\u662f\u771f\u7684\u50bb\u903c\uff0c\u60e9\u7f5a\u4eca\u5929\u8dd1\u6b65\uff0c3km\u8d77\u6b65</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#122","title":"12.2","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}(\\cos 2x+2x\\sin x)^{\\frac{1}{x^4}}\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}(\\cos 2x+2x\\sin x - 1 + 1)^{\\frac{1}{x^4}}=\\lim\\limits_{x\\to 0}e^{\\frac{\\cos 2x+2x\\sin x-1}{x^4}}\\] <p>\u5373\u6c42</p> \\[\\lim\\limits_{x\\to 0}\\frac{\\cos 2x+2x\\sin x-1}{x^4}=\\lim\\limits_{x\\to 0}\\frac{-\\sin 2x+2\\sin x+2x\\cos x}{4x^3}\\] \\[\\lim\\limits_{x\\to 0}\\frac{-4\\cos 2x+2\\cos x+2\\cos x-2x\\sin x}{12x^2}=\\lim\\limits_{x\\to 0}\\frac{8\\sin2x - 4\\sin x-2\\sin x-2x\\cos x}{24x}\\] \\[=\\lim\\limits_{x\\to 0}\\frac{8\\times2-4-2-2}{24}=\\frac{1}{3}\\] <p>\u6240\u4ee5\u539f\u5f0f=\\(e^{\\cfrac{1}{3}}\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#123","title":"12.3","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to \\frac{\\pi}{4}}(\\tan x)^{\\frac{1}{\\cos x-\\sin x}}\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to \\frac{\\pi}{4}}e^{\\frac{\\tan x-1}{\\cos x-\\sin x}}\\] <p>\u5373\u6c42</p> \\[\\lim\\limits_{x\\to \\frac{\\pi}{4}}\\frac{\\tan x - 1}{\\cos x-\\sin x}=\\lim\\limits_{x\\to \\frac{\\pi}{4}}\\frac{\\sec^2 x}{-\\sin x-\\cos x}=\\lim\\limits_{x\\to \\frac{\\pi}{4}}-\\frac{1}{\\sin x\\cos^2 x+\\cos^3 x}=-\\sqrt{2}\\] <p>\u6240\u4ee5\u539f\u5f0f=\\(e^{-\\sqrt{2}}\\)</p> <p>\u53cd\u601d:\u592a\u6d6e\u8e81\uff0c\u7b26\u53f7\u90fd\u7ed9\u5fd8\u4e86</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#124","title":"12.4","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}(\\frac{e^x+e^{2x}+...+e^{nx}}{n})^{\\frac{1}{x}}\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}e^{(\\frac{e^x+e^{2x}+...+e^{nx}-n}{nx})}\\] <p>\u5373\u6c42</p> \\[\\lim\\limits_{x\\to 0}{\\frac{e^x+e^{2x}+...+e^{nx}-n}{nx}}=\\lim\\limits_{x\\to 0}\\frac{e^x-1}{nx}+\\frac{e^{2x}-1}{nx}+...+\\frac{e^{nx}-1}{nx}\\] \\[=\\lim\\limits_{x\\to 0}\\frac{1}{n}+\\frac{2}{n}+..+\\frac{n}{n}=\\frac{\\frac{(1+n)n}{2}}{n}=\\frac{1+n}{2}\\] <p>\u539f\u5f0f=\\(e^{\\cfrac{1+n}{2}}\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#125","title":"12.5","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to \\infty}(\\cfrac{x^n}{(x+1)(x+2)...(x+n)})^x\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to \\infty}e^{\\cfrac{x(x^n-(x+1)(x+2)...(x+n))}{(x+1)(x+2)...(x+n)}}\\] <p>\u5373\u6c42</p> \\[\\lim\\limits_{x\\to \\infty}{\\cfrac{-\\cfrac{(1+n)n}{2}x^n+...}{x^n+...}}=-\\cfrac{n^2+n}{2}\\] <p>\u5219\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to \\infty}e^{-\\cfrac{n^2+n}{2}}=e^{-\\cfrac{n^2+n}{2}}\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#126","title":"12.6","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to +\\infty}(\\sin \\frac{1}{x}+\\cos \\frac{1}{x})^x\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to +\\infty}e^{(\\sin \\frac{1}{x}+\\cos \\frac{1}{x}-1)x}\\] <p>\u5373\u6c42</p> \\[\\lim\\limits_{x\\to +\\infty}(\\sin \\frac{1}{x}+\\cos \\frac{1}{x}-1)x=\\lim\\limits_{x\\to +\\infty}(\\frac{\\sin \\frac{1}{x}}{\\frac{1}{x}}+\\frac{\\cos \\frac{1}{x}-1}{\\frac{1}{x}})\\] \\[=\\lim\\limits_{x\\to +\\infty}(1+\\frac{-\\frac{1}{2x^2}}{\\frac{1}{x}})=1\\] <p>\u6240\u4ee5\u539f\u5f0f\\(=e\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#127","title":"12.7","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{n\\to \\infty}n[e(1+\\frac{1}{n})^{-n}-1]\\] <p>\u4ee4\\(t = \\frac{1}{n}\\)\u539f\u5f0f=</p> \\[\\lim\\limits_{t\\to 0}\\frac{e(1+t)^{-\\frac{1}{t}}-1}{t}=\\lim\\limits_{t\\to 0}\\frac{e^{(1-\\frac{\\ln(1+t)}{t})}-1}{t}\\] \\[=\\lim\\limits_{t\\to 0}\\frac{1-\\frac{\\ln(1+t)}{t}}{t}=\\lim\\limits_{t\\to 0}\\frac{t-\\ln(1+t)}{t^2}=\\frac{1}{2}\\] <p>\u7b49\u4ef7\u65e0\u7a77\u5c0f:\\(x-\\ln(1+x) \\sim\\frac{1}{2}x^2\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#128","title":"12.8","text":"<p>\u8bbe\\(a&gt;0,a\\neq1\\),\u4e14\\(\\lim\\limits_{x\\to +\\infty}x^p(a^{\\frac{1}{x}}-a^{\\frac{1}{1+x}})=\\ln a\\), \u5219 \\(p = ()\\)</p> \\[\\lim\\limits_{x\\to +\\infty}x^pa^{\\xi}\\ln a(\\frac{1}{x}-\\frac{1}{1+x})=\\lim\\limits_{x\\to +\\infty}x^p\\ln a\\frac{1+x-x}{x(1+x)}\\] \\[\\lim\\limits_{x\\to +\\infty}\\ln a\\frac{x^p}{x+x^2}\\] <p>\\(p=2\\)\u65f6\u8be5\u6781\u9650\u624d\u4e3a\\(\\ln a\\),\u53ef\u5f97\u7b54\u6848\\(p = 2\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#129","title":"12.9","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}\\frac{(1-\\sqrt{\\cos x})(1-\\sqrt[3]{\\cos x})...(1-\\sqrt[n]{\\cos x})}{(1-\\cos x)^{n-1}}\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}\\frac{\\frac{\\frac{1}{2}}{2}x^2\\cdot\\frac{\\frac{1}{3}}{2}x^2\\cdot...\\frac{\\frac{1}{n}}{2}x^2}{(\\frac{1}{2}x^2)^{n-1}}=\\lim\\limits_{x\\to 0}\\frac{(\\frac{1}{2})^{n-1}\\frac{1}{n!}x^{2(n-1)}}{(\\frac{1}{2})^{n-1}x^{2(n-1)}}=\\frac{1}{n!}\\] <p>\u53cd\u601d:\u7b49\u4ef7\u65e0\u7a77\u5c0f\\(1-\\sqrt[\\alpha]{\\cos x}\\sim\\frac{\\alpha}{2}x^2\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1210","title":"12.10","text":"<p>\u6c42\u6781\u9650</p> \\[\\lim\\limits_{x\\to 0}\\cfrac{\\ln (\\sin ^2x+e^x)-x}{\\ln (x^2+e^{2x})-2x}\\] <p>\u539f\u5f0f=</p> \\[\\lim\\limits_{x\\to 0}\\frac{\\ln(\\sin ^2x+e^x)-\\ln e^x}{\\ln (x^2+e^{2x})-\\ln e^{2x}}=\\lim\\limits_{x\\to 0}\\frac{\\frac{1}{\\xi_1}\\sin ^2x}{\\frac{1}{\\xi_2}x^2}=1\\] <p>\u53cd\u601d\uff1a\u52a0\u51cf\u8fd0\u7b97\u614e\u7528\u7b49\u4ef7\u65e0\u7a77\u5c0f\u4ee3\u6362\u3002\u6b64\u9898\u9664\u7b49\u4ef7\u65e0\u7a77\u5c0f\u4ee3\u6362\u4e4b\u5916\u7b2c\u4e00\u53cd\u5e94\u662f\u60f3\u5230\u51d1\u62c9\u683c\u6717\u65e5\u5b9a\u7406\uff0c\u786e\u5b9e\u53ef\u4ee5\u7b97\u51fa\u3002\u800c\u6b66\u5fe0\u7965\u51d1\u5b8c\u5bf9\u6570\u4e4b\u540e\u8fd0\u7528\u5bf9\u6570\u8fd0\u7b97\u6cd5\u5219\u5c06\u4e24\u9879\u53d8\u4e3a\u4e00\u9879\uff0c\u4ece\u800c\u4f7f\u7528\u7b49\u4ef7\u65e0\u7a77\u5c0f\uff0c\u662f\u4e00\u79cd\u66f4\u6734\u7d20\u7684\u601d\u8def\u3002</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1211","title":"12.11","text":"<p>\u5df2\u77e5\u6781\u9650\\(\\lim\\limits_{x\\to 0}\\cfrac{x-\\arctan x}{x^k}=c\\) ,\u5176\u4e2d\\(k,c\\)\u4e3a\u5e38\u6570\uff0c\u4e14\\(c\\not ={0}, k=(3),c=(1/3)\\)</p> <p>\u53cd\u601d\uff1a\u7b49\u4ef7\u65e0\u7a77\u5c0f \\(x-\\arctan x \\sim \\frac{1}{3}x^3\\\\\\quad \\tan x - x \\sim \\frac{1}{3}x^3\\) </p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1212","title":"12.12","text":"<p>\u82e5\\(\\lim\\limits_{x\\to 0}(\\cfrac{\\sin x^3}{x^4}-\\cfrac{f(x)}{x^3})=2\\)\uff0c\u5219\u5f53\\(x\\to0\\)\u65f6\uff0c\\(f(x)\\)\u662f\\(x\\)\u7684 \\((C)\\)</p> <p>A.\u7b49\u4ef7\u65e0\u7a77\u5c0f</p> <p>B.\u540c\u9636\u4f46\u975e\u7b49\u4ef7\u65e0\u7a77\u5c0f</p> <p>C.\u9ad8\u9636\u65e0\u7a77\u5c0f</p> <p>D.\u4f4e\u9636\u65e0\u7a77\u5c0f</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1213","title":"12.13","text":"<p>\u5f53\\(x\\to 0\\)\u65f6\uff0c\\(\\alpha(x)=kx^2\\)\u4e0e\\(\\beta(x)=\\sqrt{1+x\\arcsin x}-\\sqrt{\\cos x}\\)\u662f\u7b49\u4ef7\u65e0\u7a77\u5c0f\uff0c\u5219\\(k=(\\frac{3}{4})\\)</p> <p>\u89e3\uff1a\u7531\u9898\u610f\u5f97\\(\\lim\\limits_{x\\to 0}\\cfrac{\\alpha(x)}{\\beta(x)}=\\lim\\limits_{x\\to 0}\\cfrac{kx^2}{\\sqrt{1+x\\arcsin x}-\\sqrt{\\cos x}}=1\\)</p> <p>\\(\\lim\\limits_{x\\to 0}\\cfrac{kx^2}{\\sqrt{1+x\\arcsin x}-\\sqrt{\\cos x}}=\\lim\\limits_{x\\to 0}\\cfrac{kx^2}{\\cfrac{1}{2\\sqrt{\\xi}}(1+x\\arcsin x-\\cos x)}=\\lim\\limits_{x\\to 0}\\cfrac{2kx^2}{1+x\\arcsin x- \\cos x}\\)</p> <p>\\(=\\lim\\limits_{x\\to 0}\\cfrac{4kx}{\\arcsin x+\\cfrac{x}{\\sqrt{1-x^2}}+\\sin x}=\\lim\\limits_{x\\to 0}\\cfrac{4k}{1+1+1}=\\cfrac{4k}{3}=1\\)\uff0c\u6240\u4ee5\\(k=\\cfrac{3}{4}\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1214","title":"12.14","text":"<p>\u5f53\\(x\\to 0^+\\)\u65f6\uff0c\u4e0e\\(\\sqrt{x}\\)\u7b49\u4ef7\u5f97\u65e0\u7a77\u5c0f\u91cf\u662f\\((B)\\)</p> <p>A.\\(1-e^{\\sqrt{x}}\\)</p> <p>B.\\(\\ln {\\frac{1+x}{1-\\sqrt{x}}}\\)</p> <p>C.\\(\\sqrt{1+\\sqrt{x}}-1\\)</p> <p>D.\\(1-\\cos \\sqrt{x}\\)</p> <p>\\(\\ln \\frac{1+x}{1-\\sqrt{x}}=\\ln \\frac{1-\\sqrt{x}+x+\\sqrt{x}}{1-\\sqrt{x}}=\\ln (1+\\frac{x+\\sqrt{x}}{1-\\sqrt{x}})\\) </p> <p>\\(\\lim\\limits_{x\\to 0^+}\\ln (1+\\frac{x+\\sqrt{x}}{1-\\sqrt{x}})=\\lim\\limits_{x\\to 0^+}\\frac{x+\\sqrt{x}}{1-\\sqrt{x}}=&gt;\\lim\\limits_{x\\to 0^+}\\frac{x+\\sqrt{x}}{\\sqrt{x}-x}=1\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1215","title":"12.15","text":"<p>\u8bbe\\(\\alpha_1=x(\\cos \\sqrt{x}-1),\\alpha_2=\\sqrt{x}\\ln (1+\\sqrt[3]{x}),\\alpha_3=\\sqrt[3]{x+1}-1\\),\u5f53\\(x\\to 0^+\\)\u65f6</p> <p>\u4ee5\u4e0a\u4e09\u4e2a\u65e0\u7a77\u5c0f\u91cf\u4ece\u4f4e\u9636\u5230\u9ad8\u9636\u7684\u6392\u5e8f\u662f \\((\\alpha_2,\\alpha_3,\\alpha_1)\\)</p> \\[\\alpha_1\\sim -\\frac{1}{2}x^2,\\alpha_2\\sim x^{\\frac{5}{6}},\\alpha_3\\sim \\frac{1}{3}x\\]"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1216","title":"12.16","text":"<p>\u51fd\u6570\\(f(x)=\\cfrac{(e^{\\cfrac{1}{x}}+e)\\tan x}{x(e^{\\cfrac{1}{x}}-e)}\\)\u5728\\([-\\pi,\\pi]\\)\u4e0a\u7684\u7b2c\u4e00\u7c7b\u95f4\u65ad\u70b9\u662f\\(x=(0)\\)</p> <p>\u7b2c\u4e00\u7c7b\u95f4\u65ad\u70b9\uff1a\u53ef\u53bb\u95f4\u65ad\u70b9&amp;\u8df3\u8dc3\u95f4\u65ad\u70b9</p> <p>\\(x=0\\)\u4e3a\u8df3\u8dc3\u95f4\u65ad\u70b9\uff0c\u56e0\u4e3a\\(\\lim\\limits_{x\\to 0^+}f(x)=1,\\lim\\limits_{x\\to 0^-}f(x)=-1,\\lim\\limits_{x\\to 0^+}f(x)\\not ={\\lim\\limits_{x\\to 0^-}f(x)}\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1217","title":"12.17","text":"<p>\u8bbe\u51fd\u6570\\(f(x)=\\cfrac{\\ln |x|}{|x-1|} \\sin x\\),\u5219 \\(f(x)\\)\u6709( )</p> <p>A.1\u4e2a\u53ef\u53bb\u95f4\u65ad\u70b9\uff0c1\u4e2a\u8df3\u8dc3\u95f4\u65ad\u70b9</p> <p>B.1\u4e2a\u53ef\u53bb\u95f4\u65ad\u70b9\uff0c1\u4e2a\u65e0\u7a77\u95f4\u65ad\u70b9</p> <p>C.2\u4e2a\u8df3\u8fdc\u95f4\u65ad\u70b9</p> <p>D.2\u4e2a\u65e0\u7a77\u95f4\u65ad\u70b9</p> <p>\\(\\lim\\limits_{x\\to 1^+}\\frac{\\ln |x|}{|x-1|}\\sin x=\\lim\\limits_{x\\to 1^+}\\frac{\\ln |x|}{x-1}\\sin 1=\\lim\\limits_{x\\to 1^+}\\frac{\\sin (1)\\ln x}{x-1}=\\sin 1\\\\ \\lim\\limits_{x\\to 1^-}\\frac{\\sin (1)\\ln x}{1-x}=-\\sin 1\\)</p> <p>\\(\\lim\\limits_{x\\to 1^+}f(x)\\not ={\\lim\\limits_{x\\to 1^-}f(x)}\\),\u6240\u4ee5\\(x=1\\)\u8df3\u8dc3\u4e3a\u95f4\u65ad\u70b9</p> <p>\\(\\lim\\limits_{x\\to 0^+}\\frac{x\\ln x}{1-x}=\\lim\\limits_{x\\to 0^+}x\\ln x=\\lim\\limits_{x\\to 0^+}\\frac{\\ln x}{\\frac{1}{x}}=\\lim\\limits_{x\\to 0^+}\\frac{\\frac{1}{x}}{-\\frac{1}{x^2}}=0\\)</p> <p>\\(\\lim\\limits_{x\\to 0^-}\\frac{x\\ln (-x)}{1-x}=\\lim\\limits_{x\\to 0^-}x\\ln (-x)=\\lim\\limits_{x\\to 0^-}\\frac{\\ln (-x)}{\\frac{1}{x}}=\\lim\\limits_{x\\to 0^-}\\frac{-\\frac{1}{x}}{-\\frac{1}{x^2}}=0\\)</p> <p>\u5219\\(x=0\\)\u4e3a\u53ef\u53bb\u95f4\u65ad\u70b9</p> <p>\u53cd\u601d\uff1a\u5148\u786e\u5b9a\u5b9a\u4e49\u57df\uff0c\u627e\u5230\u672a\u5b9a\u4e49\u7684\u70b9\uff0c\u8bd5\u63a2\u662f\u5426\u662f\u95f4\u65ad\u70b9\u3002\u4e3b\u8981\u89c2\u5bdf\u9009\u51fa\u7684\u70b9\u5de6\u53f3\u6781\u9650\u662f\u5426\u5b58\u5728\u3001\u5b58\u5728\u7684\u8bdd\u662f\u5426\u76f8\u7b49</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1218","title":"12.18","text":"<p>\u51fd\u6570\\(f(x)=\\cfrac{x^2-x}{x^2-1}\\sqrt{1+\\frac{1}{x^2}}\\)\u7684\u65e0\u7a77\u95f4\u65ad\u70b9\u7684\u4e2a\u6570\u4e3a\uff081\uff09</p> <p>\u53ef\u7591\u70b9\uff1a1\uff0c-1\uff0c0</p> <p>\\(f(x)=\\frac{x^2-x}{x^2-1}\\sqrt{1+\\frac{1}{x^2}}=\\frac{x}{x+1}\\sqrt{1+\\frac{1}{x^2}}\\)</p> <p>\\(\\lim\\limits_{x\\to 1^+}f(x)=\\lim\\limits_{x\\to 1^-}f(x)=\\frac{1}{2}\\sqrt{2}\\)\uff0c\u5219\\(x=1\\)\u4e3a\u53ef\u53bb\u95f4\u65ad\u70b9</p> <p>\\(\\lim\\limits_{x\\to -1}f(x)=\\frac{-\\sqrt{2}}{x+1}=\\infty\\),\u5219\\(x=-1\\)\u4e3a\u65e0\u7a77\u95f4\u65ad\u70b9</p> <p>\\(\\lim\\limits_{x\\to 0}f(x)=\\lim\\limits_{x\\to 0}x\\sqrt{1+\\frac{1}{x^2}}=&gt;\\lim\\limits_{x\\to 0^+}\\sqrt{x^2+1}=1\uff0c\\lim\\limits_{x\\to 0^-}-\\sqrt{x^2}\\sqrt{1+\\frac{1}{x^2}}=-1\\)</p> <p>\\(\\lim\\limits_{x\\to 0^+}f(x)\\not ={\\lim\\limits_{x\\to 0^-}f(x)}\\)\uff0c\u6240\u4ee5\\(x=0\\)\u4e3a\u8df3\u8dc3\u95f4\u65ad\u70b9</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1219","title":"12.19","text":"<p>\u51fd\u6570\\(f(x)=\\cfrac{|x|^x-1}{x(x+1)\\ln |x|}\\)\u7684\u53ef\u53bb\u95f4\u65ad\u70b9\u7684\u4e2a\u6570\u4e3a(2)</p> <p>\u53ef\u7591\u70b9\uff1a0\uff0c-1\uff0c1</p> <p>\\(\\lim\\limits_{x\\to 0^+}f(x)=\\lim\\limits_{x\\to 0^+}\\frac{x^x-1}{x(x+1)\\ln x}=\\lim\\limits_{x\\to 0^+}\\frac{e^{x\\ln x}-1}{x\\ln x}=1,\\)\u540c\u7406\u53ef\u5f97\\(\\lim\\limits_{x\\to 0^-}f(x)=1\\)\u6240\u4ee5\\(x=0\\)\u4e3a\\(f(x)\\)\u7684\u53ef\u53bb\u95f4\u65ad\u70b9</p> <p>\\(\\lim\\limits_{x\\to -1}f(x)=-\\lim\\limits_{x\\to -1}\\frac{(-x)^x-1}{(x+1)\\ln (-x)}=\\lim\\limits_{x\\to -1}\\frac{e^{x\\ln (-x)}-1}{(x+1)\\ln (-x)}=\\lim\\limits_{x\\to -1}\\frac{x\\ln(-x)}{(x+1)\\ln(-x)}=\\infty\\)\u6240\u4ee5\\(x=-1\\)\u4e3a\\(f(x)\\)\u7684\u65e0\u7a77\u95f4\u65ad\u70b9</p> <p>\\(\\lim\\limits_{x\\to 1}f(x)=\\lim\\limits_{x\\to 1}\\frac{x^x-1}{x(x+1)\\ln x}=\\lim\\limits_{x\\to 1}\\frac{e^{x\\ln x}-1}{2x\\ln x}=\\frac{1}{2}\\)\u6240\u4ee5\\(x=1\\)\u4e3a\\(f(x)\\)\u7684\u53ef\u53bb\u95f4\u65ad\u70b9</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1220","title":"12.20","text":"<p>\u8bbe\u51fd\u6570\\(f(x)=\\lim\\limits_{n\\to \\infty}\\cfrac{1+x}{1+x^{2n}}\\),\u8ba8\u8bba\u51fd\u6570\u7684\u95f4\u65ad\u70b9\u5176\u7ed3\u8bba\u4e3a\uff08\uff09</p> <p>A.\u4e0d\u5b58\u5728\u95f4\u65ad\u70b9 </p> <p>B.\u5b58\u5728\u95f4\u65ad\u70b9\\(x=1\\)</p> <p>C.\u5b58\u5728\u95f4\u65ad\u70b9\\(x=0\\)</p> <p>D.\u5b58\u5728\u95f4\u65ad\u70b9\\(x=-1\\)</p> <p>\u7531\u9898\u610f\u77e5\uff1a \\(\\quad f(x)=\\left\\{     \\begin{aligned}     0,\\quad x\\le-1\\\\     1+x,\\quad -1&lt;x&lt;1     \\\\1, \\quad  x = 1     \\\\0, \\quad x&gt;1     \\end{aligned}     \\right.  \\quad\\)</p> <p>\u5219\u53ef\u77e5\\(x=1\\)\u4e3a\u51fd\u6570\\(f(x)\\)\u7684\u8df3\u8dc3\u95f4\u65ad\u70b9</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1226","title":"12.26","text":"<p>\\(\\quad f(x)=\\left\\{     \\begin{aligned}     \\ln{\\sqrt{x}},\\quad x\\ge1\\\\     2x-1,\\quad x&lt;1     \\end{aligned}     \\right.  \\quad y=f(f(x)),\\frac{dy}{dx}|_{x=e}=()\\)</p> <p>\\(\\frac{dy}{dx}|_{x=e}=y'|_{x=e}=f'(f(x))\\cdot f'(x)|_{x=e}=f'(f(e))\\cdot f'(e)=f'(\\frac{1}{2})\\cdot f'(e)\\)</p> <p>\\(= 2\\cdot\\frac{1}{\\sqrt{e}}\\cdot \\frac{1}{2\\sqrt{e}}=\\frac{1}{e}\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1227","title":"12.27","text":"<p>\u8bbe\\(y=y(x)\\)\u662f\u7531\u65b9\u7a0b \\(xy+e^y=x+1\\) \u786e\u5b9a\u7684\u9690\u51fd\u6570,\u5219\\(\\cfrac{d^2y}{dx^2}|_{x=0}=\\)</p> <p>\u7b49\u5f0f\u4e24\u8fb9\u5bf9x\u6c42\u5bfc\u53ef\u5f97\\(y+x\\cfrac{dy}{dx}+e^y\\cfrac{dy}{dx}=1\\),\u5373\\(\\cfrac{dy}{dx}=\\cfrac{1-y}{x+e^y}\\)</p> <p>\\(\\cfrac{d^2y}{dx^2} =\\cfrac{-\\cfrac{dy}{dx}(x+e^y)-(1+e^y\\cfrac{dy}{dx})(1-y)}{(x+e^y)^2}\\),\u5c06\\(x=0\\)\u5e26\u5165\u524d\u9762\u7684\u5f0f\u5b50\u53ef\u77e5,\\(x=0\\)\u65f6\\(y=0\\)</p> <p>\u5219\u53ef\u5f97\\(\\cfrac{d^2y}{dx^2}|_{x=0}=-3\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1228","title":"12.28","text":"<p>\u8bbe\u51fd\u6570\\(y = y(x)\\)\u7531\u53c2\u6570\u65b9\u7a0b \\(\\left\\{     \\begin{aligned}     x=t-\\ln{(1+t)}\\\\     y=t^3+t^2\\quad\\quad\\quad\\\\     \\end{aligned}     \\right.\\) \u6240\u786e\u5b9a\uff0c\u5219\\(\\frac{d^2y}{dx^2}=\\)</p> <p>\\(\\cfrac{dx}{dt}=1-\\cfrac{1}{1+t}=\\cfrac{t}{1+t},\\cfrac{dy}{dt}=3t^2+2t\\)</p> <p>\\(\\cfrac{dy}{dx}=\\cfrac{(3t^2+2t)(1+t)}{t}=(3t+2)(1+t)\\)</p> <p>\\(\\cfrac{d^2y}{dx^2}=\\cfrac{\\cfrac{dy}{dx}/dt}{\\cfrac{dx}{dt}}=\\cfrac{(1+t)(3(1+t)+(3t+2))}{t}=\\cfrac{(1+t)(6t+5)}{t}\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1229","title":"12.29","text":"<p>\u8bbe\\(y=x^22^x\\),\u6c42\\(y^{(n)}\\)</p> <p>\u89e3\uff1a\u4ee4\\(u=x^2,v=2^x,u'=2x,u''=2,u'''=0,v^{(n)}=(\\ln 2)^{n}2^x\\)</p> <p>\\(y^{(n)}=(x^22^x)^{(n)}=(uv)^{(n)}=C_{n}^0x^2(\\ln 2)^n2^x+C_n^12x(\\ln 2)^{n-1}2^x+C_n^22(\\ln 2)^{n-2}2^x\\)</p> <p>\\(=x^2(\\ln 2)^n2^x+n(\\ln 2)^{n-1}x2^{x+1}+\\frac{n(n-1)}{2}(\\ln 2)^{n-2}2^{x+1}\\)</p> <p>\u53cd\u601d\uff1a\\((uv)^{(n)}=\\sum\\limits_{k=0}^{n}C_n^ku^{(k)}v^{(n-k)},(u+v)^{(n)}=u^{(n)}+v^{(n)}\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1230","title":"12.30","text":"<p>\u8bbe\\(y = \\cfrac{1}{x^2-1}\\)\uff0c\u6c42\\(y^{(n)}\\)</p> <p>\\(y=\\cfrac{1}{x^2 -1}=\\cfrac{1}{(x+1)(x-1)}=\\cfrac{1}{2}\\cdot(\\cfrac{1}{x-1}-\\cfrac{1}{x+1})\\)</p> <p>\u800c\\((\\cfrac{1}{x-1})'=((x-1)^{-1})'=(-1)(x-1)^{-2},(\\cfrac{1}{x-1})''=(-1)(-2)(x-1)^{-3}\\)</p> <p>\u6240\u4ee5\\((\\cfrac{1}{x-1})^{(n)}=(-1)^nn!(x-1)^{-(n+1)}=\\cfrac{(-1)^nn!}{(x-1)^{n+1}}\\)</p> <p>\u5219\\(y^{(n)}=\\cfrac{1}{2}(\\cfrac{(-1)^nn!}{(x-1)^{n+1}}-\\cfrac{(-1)^nn!}{(x+1)^{n+1}})\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#1231","title":"12.31","text":"<p>\u5df2\u77e5\u51fd\u6570\\(f(x)\\)\u5177\u6709\u4efb\u610f\u9636\u5bfc\u6570\uff0c\u4e14\\(f'(x)=[f(x)]^2\\),\u5219\u5f53\\(n\\)\u4e3a\u5927\u4e8e\\(2\\)\u7684\u6b63\u6574\u6570\u65f6,\\(f(x)\\)\u7684\\(n\\)\u9636\u5bfc\u6570\\(f^{(n)}(x)\\)\u662f\\(()\\)</p> <p>\u7b54\uff1a</p> <p>\u7531\u9898\u610f\u5f97\uff0c\u53ef\u77e5\\(f''(x)=2f(x)[f(x)]^2=2[f(x)]^3,f^{(3)}(x)=2\\cdot3[f(x)]^4\\)</p> <p>\u627e\u89c4\u5f8b\u53ef\u77e5\\(f^{(n)}(x)=n![f(x)]^{(n+1)}\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#11","title":"1.1","text":"<p>\u8bbe\\(f(x)\\)\u5728\\((-\\infty,+\\infty)\\)\u5185\u53ef\u5bfc\uff0c\u4e14\u5bf9\u4efb\u610f\u7684\\(x_1,x_2,\\)\u5f53\\(x_1&gt;x_2\\)\u65f6,\u90fd\u6709\\(f(x_1)&gt;f(x_2)\\)\uff0c\u5219 \\((A)\\)</p> <p>A.\u5bf9\u4efb\u610f\u7684\\(x,f'(x)&gt;0\\)</p> <p>B.\u5bf9\u4efb\u610f\u7684\\(x,f'(x)\\le 0\\)</p> <p>C.\u51fd\u6570\\(f(-x)\\)\u5355\u8c03\u589e\u52a0</p> <p>D.\u51fd\u6570\\(-f(-x)\\)\u5355\u8c03\u589e\u52a0</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#13","title":"1.3","text":"<p>\u8bbe\\(\\lim\\limits_{x\\to a}\\cfrac{f(x)-f(a)}{(x-a)^n}=-1\\)\uff0c\u5176\\(n\\)\u4e3a\u5927\u4e8e\\(1\\)\u7684\u6574\u6570\uff0c\u5219\u5728\\(x=a\\)\u5904\\(()\\)</p> <p>A.\\(f(x)\\)\u7684\u5bfc\u6570\u5b58\u5728\uff0c\u4e14\\(f'(a)\\neq0\\)</p> <p>B.\\(f(x)\\)\u53d6\u5f97\u6781\u5927\u503c</p> <p>C.\\(f(x)\\)\u53d6\u5f97\u6781\u5c0f\u503c</p> <p>D.\\(f(x)\\)\u662f\u5426\u53d6\u5f97\u6781\u503c\u4e0en\u7684\u53d6\u503c\u6709\u5173</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#14","title":"1.4","text":"<p>\u8bbe\\(f(x)\\)\u7684\u5bfc\u6570\u5728\\(x=a\\)\u5904\u8fde\u7eed\uff0c\u53c8\\(\\lim\\limits_{x\\to a}\\frac{f'(x)}{x-a}=-1\\),\u5219\\(()\\)</p> <p>A.\\(x=a\\) \u662f \\(f(x)\\) \u7684\u6781\u5c0f\u503c\u70b9</p> <p>B.\\(x=a\\) \u662f \\(f(x)\\) \u7684\u6781\u5927\u503c\u70b9</p> <p>C.\\((a,f(a))\\)\u662f\u66f2\u7ebf\\(y=f(x)\\)\u7684\u62d0\u70b9</p> <p>D.\\(x=a\\)\u4e0d\u662f\\(f(x)\\)\u7684\u6781\u503c\u70b9\uff0c\\((a,f(a))\\)\u4e5f\u4e0d\u662f\u66f2\u7ebf\\(y=f(x)\\)\u7684\u62d0\u70b9</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#15","title":"1.5","text":"<p>\u66f2\u7ebf\\(y=(x-5)x^{\\frac{2}{3}}\\)\u7684\u62d0\u70b9\u5750\u6807\u4e3a\\(()\\)</p> <p>\\(y'=x^{\\frac{2}{3}}+(x-5)\\cdot\\frac{2}{3}x^{-\\frac{1}{3}}=x^{\\frac{2}{3}}+\\frac{2}{3}x^{\\frac{2}{3}}-\\frac{10}{3}x^{-\\frac{1}{3}}=\\frac{5}{3}x^{\\frac{2}{3}}-\\frac{10}{3}x^{-\\frac{1}{3}}\\)</p> <p>\\(y''=\\frac{10}{9}x^{-\\frac{1}{3}}+\\frac{10}{9}x^{-\\frac{4}{3}}=\\frac{10}{9}x^{-\\frac{4}{3}}(x+1)\\)</p> <p>\u4e8e\u662f\u53ef\u77e5\\(x=-1,0\\)\u5747\u4e3a\u62d0\u70b9\u7684\u53ef\u7591\u70b9\uff0c\u5219\\(x&gt;0\\)\u65f6\uff0c\\(f''(x)&gt;0\\),\\(x&lt;0\\)\u65f6\\(f''(x)&gt;0\\),\u5219\\(x=0\\)\u65f6\u4e0d\u4e3a\u62d0\u70b9\u3002\\(x&gt;-1\\)\u65f6\uff0c\\(f''(x)&gt;0\\),\\(x&lt;-1\\)\u65f6,\\(f''(x)&lt;0\\),\u6240\u4ee5\\((-1,f(-1))\\)\u4e3a\u62d0\u70b9</p> <p>\u53cd\u601d\uff1a\u62d0\u70b9\u53ef\u80fd\u5b58\u5728\u7684\u70b9\uff1a1.\u4e8c\u9636\u5bfc\u6570\u4e3a0\u7684\u70b9. 2.\u4e8c\u9636\u5bfc\u6570\u4e0d\u5b58\u5728\u7684\u70b9</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#118","title":"1.18","text":"<p>\u8bbe\\(p,q\\)\u662f\u5927\u4e8e\\(1\\)\u7684\u5e38\u6570\uff0c\u5e76\u4e14 \\(\\frac{1}{p}+\\frac{1}{q}=1\\) ,\u8bc1\u660e\uff1a\u5bf9\u4e8e\u4efb\u610f\u7684 \\(x&gt;0\\) ,\u6709 \\(\\frac{1}{p}x^p+\\frac{1}{q}\\ge x\\)</p> <p>\u8bc1\u660e\uff1a</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#119","title":"1.19","text":"<p>\u8bbe\u51fd\u6570\\(f(x)\\)\u5728\\([0,3]\\)\u4e0a\u8fde\u7eed\uff0c\u5728\\((0,3)\\)\u5185\u53ef\u5bfc\uff0c\u4e14\\(f(0)+f(1)+f(2)=3,f(3)=1\\)\u8bd5\u8bc1\u660e\u5fc5\u5b58\u5728\\(\\xi\\in(0,3)\\),\u4f7f\\(f'(\\xi)=0\\)</p> <p>\u8bc1\u660e\uff1a \u56e0\u4e3a\\(f(x)\\)\u5728\\([0,3]\\)\u4e0a\u8fde\u7eed\uff0c\u5219\u5728\\([0,2]\\)\u4e0a\uff0c\\(\\exists m,M\\)\uff0c\u5206\u522b\u4e3a\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c,\u4efb\u610f\u7684\\(x\\in[0,2]\\)\u90fd\u6709\\(m \\le f(x) \\le M\\),\u5373\\(m\\le f(1) \\le M,m\\le f(2) \\le M, m\\le f(3)\\le M\\)\u3002\u4e8e\u662f\u6709\\(m\\le \\cfrac{f(0)+f(1)+f(2)}{3} \\le M =&gt; m\\le1\\le M\\),\u7531\u4ecb\u503c\u5b9a\u7406\u53ef\u77e5\\(\\exists \\xi_1\\in[0,2]\\),\u4f7f\u5f97\\(f(\\xi_1)=1,f(3)=1\\),\u7531\u7f57\u5c14\u5b9a\u7406\u53ef\u5f97\\(\\exists \\xi\\in(\\xi_1,3)\\),\u4f7f\u5f97\\(f'(\\xi)=0\\).\u5373\u8bc1\u660e\u4e86\\(\\exists \\xi \\in(0,3)\\),\u4f7f\u5f97\\(f'(\\xi) = 0\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#120","title":"1.20","text":"<p>\u8bbe\\(f(x)\\)\u5728\u533a\u95f4\\([a,b]\\)\u4e0a\u5177\u6709\u4e8c\u9636\u5bfc\u6570\uff0c\u4e14\\(f(a)=f(b)=0,f'(a)f'(b)&gt;0\\),\u8bc1\u660e\u5b58\u5728\\(\\xi\\in(a,b)\\)\u548c\\(\\eta\\in(a,b)\\)\u4f7f\\(f(\\xi) = 0\\)\u53ca\\(f''(\\eta)=0\\)</p> <p>\u8bc1\u660e\uff1a\u56e0\u4e3a\\(f(x)\\)\u4e8c\u9636\u53ef\u5bfc\uff0c\u5219\\(f(x)\\)\u5728\\([a,b]\\)\u4e0a\u8fde\u7eed\uff0c\u56e0\u4e3a\\(f'(a)f'(b) &gt;0\\),\u6240\u4ee5\\(f'(a)\\)\u4e0e\\(f'(b)\\)\u540c\u53f7\uff0c\u5047\u8bbe\\(f'(a)&gt;0\\)\u4e14\\(f'(b)&gt;0\\),\u5219\u7531\u6781\u9650\u7684\u4fdd\u53f7\u6027\u53ef\u77e5\uff0c\u5728\\(a\\)\u7684\u53f3\u9886\u57df\u6709\\(f(x)&gt;f(a)=0\\),\u5728\\(b\\)\u7684\u5de6\u9886\u57df\u6709\\(f(x)&lt;f(b)=0\\),\u4e8e\u662f\u4fbf\u53ef\u627e\u51fa\u4e24\u70b9\\(x_1,x_2\\),\u4f7f\u5f97\\(f(x_1)f(x_2)&lt;0\\),\u53c8\u7531\u96f6\u70b9\u5b9a\u7406\u53ef\u77e5\\(\\exists \\xi\\in (x_1,x_2)\\)\u4f7f\u5f97\\(f(\\xi) = 0\\),\u800c\u5f53\\(f'(a)&lt;0\\)\u4e14\\(f'(b)&lt;0\\)\u65f6\u540c\u7406\u53ef\u5f97\\(\\exists \\xi \\in (a,b)\\)\u4f7f\u5f97\\(f(\\xi) =0\\)\u3002</p> <p>\u56e0\u4e3a\\(f(a)=f(b)=0\\),\u5219\u7531\u7f57\u5c14\u5b9a\u7406\u53ef\u77e5\uff0c\\(\\exists \\beta\\in(a,b)\\),\u4f7f\u5f97\\(f'(\\beta)=0\\),\u5219\u7531\u62c9\u683c\u6717\u65e5\u5b9a\u7406\u53ef\u77e5,\\(\\exists \\xi_1\\in(a,\\beta),\\xi_2\\in(\\beta,b)\\),\u4f7f\u5f97\\(f''(\\xi_1)=\\cfrac{f'(\\beta)-f'(a)}{\\beta - a},f''(\\xi_2)=\\cfrac{f'(\\beta)-f'(b)}{\\beta - b}\\),\u4e14\\(f''(\\xi_1)f''(\\xi_2)&lt;0\\),\u7531\u96f6\u70b9\u5b9a\u7406\u77e5\uff0c\\(\\exists \\eta\\in(\\xi_1,\\xi_2)\\)\uff0c\u4f7f\u5f97\\(f''(\\eta)=0,\\exists \\eta\\in(a,b)\\),\u4f7f\u5f97\\(f''(\\eta)=0\\)</p>"},{"location":"blog/%E6%AD%A6%E5%BF%A0%E7%A5%A5%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%9812%E6%9C%88/#128_1","title":"1.28","text":"<p>\u8bbe\\(f(x)\\)\u5728\\([a,b]\\)\u4e0a\u8fde\u7eed\uff0c\u5728\\((a,b)\\)\u5185\u53ef\u5bfc\uff0c\u4e14\\(f(a)=f(b)=0\\),\u8bd5\u8bc1\u660e\uff1a</p> <p>(1)\\(\\exists \\xi \\in (a,b)\\), \u4f7f\\(f'(\\xi)+f(\\xi)=0\\) </p> <p>(2)\\(\\exists \\eta \\in (a,b)\\), \u4f7f\\(f'(\\eta)-f(\\eta)=0\\)</p> <p>(3)\\(\\exists \\alpha \\in(a,b)\\), \u4f7f\\(f'(\\alpha)+\\lambda f(\\alpha)=0\\)</p> <p>\u8bc1\u660e\uff1a</p> <p>\uff081\uff09\u4e0d\u59a8\u4ee4\\(G(x)=e^xf(x)\\),\u53ef\u77e5\\(G(x)\\)\u5728\\([a,b]\\)\u4e0a\u8fde\u7eed\uff0c\u5728\\((a,b)\\)\u5185\u53ef\u5bfc\uff0c\u53c8\\(f(a)=f(b)=0\\)\uff0c\u5219\\(G(a)=G(b)=0\\),\u7531\u7f57\u5c14\u5b9a\u7406\u53ef\u77e5\uff0c\\(\\exists \\xi\\in(a,b)\\),\u4f7f\u5f97\\(G'(\\xi)=e^{\\xi}f(\\xi)+f'(\\xi)e^{\\xi}=0=&gt;f(\\xi)+f'(\\xi)=0\\)</p> <p>\uff082\uff09 \u4e0d\u59a8\u4ee4\\(G(x)=e^{-x}f(x)\\),\u7531\u7f57\u5c14\u5b9a\u7406\u53ef\u77e5\\(\\exists \\eta \\in (a,b)\\)\uff0c\u4f7f\u5f97\\(G'(\\eta)=-e^{-\\eta}f(\\eta)+e^{-\\eta}f'(\\eta)=0=&gt;f'(\\eta)-f(\\eta)=0\\)</p> <p>\uff083\uff09\u4e0d\u59a8\u4ee4\\(G(x)=e^{\\lambda x}f(x)\\),\u7531\u7f57\u5c14\u5b9a\u7406\u53ef\u77e5\\(\\exists \\alpha \\in (a,b)\\),\u4f7f\u5f97\\(G'(\\alpha)=\\lambda e^{\\lambda x}f(x)+f'(x)e^{\\lambda x}=0=&gt;f'(x)+\\lambda f(x)=0\\)</p> <p>\u53cd\u601d:\u6784\u9020\u51fd\u6570 \\(e^{kx}f(x)\\) \u7b80\u76f4\u5c31\u662f\u795e\u5668\uff01\u589e\u52a0\u51fd\u6570\u590d\u6742\u5ea6\u4e4b\u540e\u53c8\u80fd\u4ee5\u4e0d\u7b49\u4e8e\u96f6\u7684\u6027\u8d28\u76f4\u63a5\u53bb\u9664\u3002</p>"},{"location":"blog/%E7%89%9B%E5%AE%A2%E5%B0%8F%E7%99%BD%E6%9C%88%E8%B5%9B111/","title":"\u725b\u5ba2\u5c0f\u767d\u6708\u8d5b111","text":"<p>\u5c1d\u8bd5\u4e00\u4e0bJava\u81ea\u5df1\u5199\u8f93\u5165\u8f93\u51fa\u6253\u6bd4\u8d5b\u662f\u600e\u6837\u7684\u3002\u540e\u4e24\u9898\u592a\u4e0d\u5f53\u4eba\u4e86\uff0c\u4e0d\u8fc7\u7b2c\u4e00\u573a\u5199\u51fa4\u9898\u611f\u89c9\u8fd8\u662f\u633a\u6b23\u6170\u6ef4</p>"},{"location":"blog/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/","title":"\u80cc\u5305\u95ee\u9898","text":"<p>\u4f60\u7684\u80cc\u5305\uff0c\u8ba9\u6211\u8d70\u7684\u597d\u7f13\u6162~</p> <p>\u80cc\u5305\u95ee\u9898\u7684\u63a8\u5bfc\u548c\u4ee3\u7801\uff0c\u5305\u542b\uff1a01\u80cc\u5305\uff0c\u5b8c\u5168\u80cc\u5305\uff0c\u591a\u91cd\u80cc\u5305\uff0c\u5206\u7ec4\u80cc\u5305</p>"},{"location":"blog/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#_1","title":"\u80cc\u5305\u95ee\u9898","text":"<p>\u80cc\u5305\u95ee\u9898\u662f\u52a8\u6001\u89c4\u5212\u95ee\u9898\u4e2d\u9009\u6216\u8005\u4e0d\u9009\u7684\u5178\u578b\u4ee3\u8868, \u4ece0x3f\u535a\u4e3b\u89c6\u9891\u4e2d\uff0c\u53ef\u4ee5\u5b66\u4e60\u5230\u7528\u8bb0\u5fc6\u5316\u641c\u7d22\u7684\u65b9\u5f0f\u601d\u8003dp\u95ee\u9898\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u5199\u9012\u63a8\u7684\u65f6\u5019\uff0c\u6bd4\u8f83\u5bb9\u6613\u5730\u60f3\u5230\u72b6\u6001\u6570\u7ec4\u7684\u5b9a\u4e49\u3002 \u672c\u6587\u5c06\u4f9d\u7167 \u8bb0\u5fc6\u5316\u641c\u7d22 -&gt; dp\u6570\u7ec4 -&gt; dp\u6570\u7ec4\u4f18\u5316 \u7684\u65b9\u5f0f\u4e00\u6b65\u6b65\u8bb2\u89e3\u80cc\u5305\u95ee\u9898\u3002</p>"},{"location":"blog/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#1-01","title":"1. 01\u80cc\u5305\u95ee\u9898","text":"<p>\u95ee\u9898\u63cf\u8ff0\uff1a\u6709 \\(N\\) \u4ef6\u7269\u54c1\u548c\u4e00\u4e2a\u5bb9\u91cf\u662f \\(V\\) \u7684\u80cc\u5305\u3002\u6bcf\u4ef6\u7269\u54c1\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21\u3002\u7b2c \\(i\\) \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u662f \\(v_i\\)\uff0c\u4ef7\u503c\u662f \\(w_i\\)\u3002\u6c42\u89e3\u5c06\u54ea\u4e9b\u7269\u54c1\u88c5\u5165\u80cc\u5305\uff0c\u53ef\u4f7f\u8fd9\u4e9b\u7269\u54c1\u7684\u603b\u4f53\u79ef\u4e0d\u8d85\u8fc7\u80cc\u5305\u5bb9\u91cf\uff0c\u4e14\u603b\u4ef7\u503c\u6700\u5927\u3002</p> <p>\u9996\u5148\u6211\u4eec\u60f3\u600e\u4e48\u6837\u5199\u51fa\u4e00\u4e2a\u66b4\u529b\u641c\u7d22\uff0c\u53ef\u4ee5\u8986\u76d6\u5168\u90e8\u7684\u60c5\u51b5\u7136\u540e\u8bb0\u5f55\u6700\u5927\u4ef7\u503c\u5462\uff1f\u4e8e\u662f\u5f00\u59cb\u6784\u9020\u641c\u7d22\u51fd\u6570\uff0c\u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u7b2c \\(i\\) \u4ef6\u7269\u54c1\uff0c\u6211\u4eec\u8981\u4e48\u9009\u62e9\u5b83\u8981\u4e48\u4e0d\u9009\u62e9\u5b83\uff0c\u9009\u53d6\u8fd9\u4e8c\u8005\u7684\u6700\u5927\u503c\uff0c\u6839\u636e\u8fd9\u4e24\u79cd\u60c5\u51b5\u5f97\u5230\u641c\u7d22\u7684\u65b9\u5411\uff0c\u53ef\u4ee5\u5f97\u5230\u641c\u7d22\u51fd\u6570\uff1a</p> \\[ dfs(i, j) =  \\begin{cases} dfs(i-1,j) &amp; \\text{if } j &lt; v[i] \\\\ \\\\ \\max (dfs(i-1,j), dfs(i-1,j-v[i])+w[i]) &amp; \\text{if } j \\ge[i] \\end{cases} \\] <p>\\(i\\) \u4ee3\u8868\u7b2c \\(i\\) \u4e2a\u7269\u54c1\uff0c\\(j\\) \u4ee3\u8868\u5f53\u524d\u80cc\u5305\u7684\u4f53\u79ef\uff0c\\(dfs(i,j)\\) \u4ee3\u8868\u4ece\u524d \\(i\\) \u4e2a\u7269\u54c1\u4e2d\u9009\uff0c\u9009\u51fa\u4f53\u79ef\u4e3a \\(j\\) \u7684\u7269\u54c1\u7684\u6700\u5927\u4ef7\u503c\u3002</p> <p>\u53ef\u4ee5\u77e5\u9053\u641c\u7d22\u51fd\u6570\u7684\u4ee3\u7801\uff1a <pre><code>public int dfs(int i, int j) {\n    if(i &lt; 0) {\n        return 0;\n    }\n    int ans = dfs(i - 1, j);\n    if(j &gt;= v[i]) {\n        ans = Math.max(ans, dfs(i - 1, j - v[i]) + w[i]);\n    }\n    return ans;\n}\n</code></pre></p>"},{"location":"blog/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#2","title":"2. \u5b8c\u5168\u80cc\u5305\u95ee\u9898","text":""},{"location":"blog/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#3","title":"3. \u591a\u91cd\u80cc\u5305\u95ee\u9898","text":""},{"location":"blog/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/#4","title":"4. \u5206\u7ec4\u80cc\u5305\u95ee\u9898","text":""},{"location":"%E6%8A%80%E6%9C%AF/","title":"\u5b66\u6280\u672f","text":"<ul> <li> <p>JavaWeb</p> <ul> <li>JavaWeb</li> </ul> </li> </ul>"},{"location":"%E6%8A%80%E6%9C%AF/JavaSE/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6/%E7%AC%AC1%E7%AB%A0_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/","title":"\u7f16\u7a0b\u57fa\u7840","text":"<p>\u7535\u8111\u4e0a\u8fd0\u884c\u8fd9\u5404\u5f0f\u5404\u6837\u7684\u7a0b\u5e8f\uff0c\u770b\u8d77\u6765\u79cd\u7c7b\u7e41\u591a\u3001\u767e\u82b1\u9f50\u653e\u3002\u5f88\u591a\u7a0b\u5e8f\u5728\u8ba1\u7b97\u673a\u4e0a\u9762\u4e00\u8d77\u8fd0\u884c\u7684\u65f6\u5019\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8981\u4e3a\u5176\u5206\u914d\u4e00\u5b9a\u7684\u8ba1\u7b97\u8d44\u6e90\uff0c\u7cfb\u7edf\u4f1a\u6839\u636e\u4f18\u5148\u7ea7\u4e3a\u7a0b\u5e8f\u5206\u914d\u7ed9\u5b83\u72ec\u4eab\u8d44\u6e90\u7684\u65f6\u95f4\uff0c\u800c\u7a0b\u5e8f\u5374\u8ba4\u4e3a\u81ea\u5df1\u4e00\u76f4\u5360\u6709\u7740\u6240\u6709\u7684\u8ba1\u7b97\u8d44\u6e90\uff0c\u64cd\u4f5c\u7cfb\u7edf\u7ed9\u5b83\u5236\u9020\u4e86\u8fd9\u79cd\u5047\u8c61\u3002</p> <p>\u7a0b\u5e8f\u6700\u540e\u90fd\u4f1a\u88ab\u8ba1\u7b97\u673a\u8bc6\u522b\u4e3a\u4e00\u6761\u6761\u7684\u6307\u4ee4\uff0c\u6309\u7167\u4e00\u5b9a\u7684\u65b9\u5f0f\u8fd0\u884c\uff0c\u6240\u6709\u7a0b\u5e8f\u8fd0\u884c\u7684\u6d41\u7a0b\u5927\u81f4\u5982\u4e0b\uff1a</p> <ul> <li>\u628a\u9700\u8981\u7684\u8d44\u6e90\u4ece\u786c\u76d8\u4e2d\u8bfb\u53d6\u51fa\u6765</li> <li>\u628a\u8d44\u6e90\u5b58\u50a8\u5230\u5185\u5b58\u4e2d\u8fdb\u884c\u5904\u7406</li> <li>\u628a\u8d44\u6e90\u8f93\u51fa\u5230\u5bf9\u5e94\u7684\u8bbe\u5907</li> </ul> <p>\u4f8b\u5982\u97f3\u4e50\u64ad\u653e\u8f6f\u4ef6\uff0c\u4f1a\u628a\u5bf9\u5e94\u683c\u5f0f\u7684\u6587\u4ef6\u8bfb\u5165\u5230\u5185\u5b58\u4e2d\uff0c\u6700\u540e\u518d\u8f93\u51fa\u5230\u58f0\u5361\u4e0a\u3002\u5728\u8f6f\u4ef6\u4e0a\u9605\u8bfb\u4e00\u7bc7\u6587\u7ae0\u65f6\uff0c\u8f6f\u4ef6\u5148\u4ece\u786c\u76d8\u4e2d\u8bfb\u53d6\u5bf9\u5e94\u683c\u5f0f\u7684\u6587\u4ef6\u5230\u5185\u5b58\u4e2d\uff0c\u6700\u540e\u8f93\u51fa\u5230\u663e\u793a\u5668\u4e0a\u3002</p> <p>\u90a3\u4e48\u5185\u5b58\u4e2d\u662f\u5982\u4f55\u5b58\u50a8\u6570\u636e\u7684\u5462\uff1f\u7b54\u6848\u662f\u53d8\u91cf\uff01\u6211\u4f7f\u7528\u4e86\u53d8\u91cf\uff01</p>"},{"location":"%E6%8A%80%E6%9C%AF/JavaSE/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6/%E7%AC%AC1%E7%AB%A0_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/#11","title":"1.1 \u6570\u636e\u7c7b\u578b\u548c\u53d8\u91cf","text":"<p>Java\u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u5728\u5b9a\u4e49\u53d8\u91cf\u4e4b\u524d\u9700\u8981\u58f0\u660e\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u77e5\u9053\u5f53\u524d\u9700\u8981\u5b58\u50a8\u4ec0\u4e48\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u77e5\u9053Java\u4e2d\u6709\u54ea\u4e9b\u6570\u636e\u7c7b\u578b\u3002</p> <p>Java\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u6309\u7167\u5927\u7c7b\u5206\u4e3a\uff1a\u6574\u6570\u578b\u3001\u6d6e\u70b9\u6570\u578b\u3001\u5b57\u7b26\u578b\u3001\u5b57\u7b26\u4e32\u578b\u3001\u5e03\u5c14\u578b</p> <p>\u6bcf\u79cd\u7c7b\u578b\u90fd\u6709\u81ea\u5df1\u58f0\u660e\u53d8\u91cf\u7684\u5173\u952e\u5b57\uff0c\u6574\u6570\u578b\uff1aint  long\uff0c\u6d6e\u70b9\u6570\u578b\uff1afloat  double\uff0c\u5b57\u7b26\u578b\uff1acharacter\uff0c\u5b57\u7b26\u4e32\u578b\uff1aString\u3001\u5e03\u5c14\u578b\uff1aboolean</p> <p>\u5176\u4e2d\u6574\u6570\u578b\u3001\u6d6e\u70b9\u6570\u578b\u3001\u5b57\u7b26\u578b\u3001\u5e03\u5c14\u578b\u90fd\u662f\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u800c\u5b57\u7b26\u4e32\u662f\u5f15\u7528\u6570\u636e\u7c7b\u578b\uff0c\u533a\u522b\u57fa\u672c\u6570\u636e\u7c7b\u578b\u548c\u5f15\u7528\u6570\u636e\u7c7b\u578b\u7279\u5f81\u5c31\u662f\u770b\u8be5\u6570\u636e\u7c7b\u578b\u662f\u4e0d\u662f\u4e00\u4e2a\u5bf9\u8c61\u3002</p> <p>\u5728Java\u4e2d\u6574\u6570\u7c7b\u578b\u7684\u5b57\u9762\u91cf(\u5e38\u91cf)\u9ed8\u8ba4\u662f int \u6570\u636e\u7c7b\u578b\uff0c\u5982\u679c\u60f3\u8981\u628a\u5b57\u9762\u91cf\u8868\u793a\u4e3a long \u7c7b\u578b\u53d8\u91cf\uff0c\u53ef\u4ee5\u5728\u5b57\u9762\u91cf\u7684\u672b\u5c3e\u52a0\u4e0a\u4e00\u4e2a</p>"},{"location":"%E6%8A%80%E6%9C%AF/JavaSE/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6/%E7%AC%AC1%E7%AB%A0_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/#12","title":"1.2 \u8d4b\u503c","text":"<p>\u8d4b\u503c\u662f\u4e00\u4e2a\u5f88\u57fa\u672c\u5f88\u7b80\u5355\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u4e0b\u9762\u7ed9</p>"},{"location":"%E6%8A%80%E6%9C%AF/JavaSE/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6/%E7%AC%AC1%E7%AB%A0_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/#13","title":"1.3 \u57fa\u672c\u8fd0\u7b97","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaSE/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6/%E7%AC%AC1%E7%AB%A0_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/#14","title":"1.4 \u6761\u4ef6\u6267\u884c","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaSE/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6/%E7%AC%AC1%E7%AB%A0_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/#15","title":"1.5 \u5faa\u73af","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaSE/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6/%E7%AC%AC1%E7%AB%A0_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/#16","title":"1.6 \u51fd\u6570\u7684\u7528\u6cd5","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaSE/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6/%E7%AC%AC1%E7%AB%A0_%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/#17","title":"1.7 \u51fd\u6570\u8c03\u7528\u7684\u57fa\u672c\u539f\u7406","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/","title":"JavaWeb","text":"<ul> <li> <p>JavaWeb</p> <ul> <li>B/S\u67b6\u6784\u4ecb\u7ecd</li> <li>MySQL</li> <li>JavaScript</li> </ul> </li> </ul>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/BS%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/","title":"B/S\u67b6\u6784\u4ecb\u7ecd","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/BS%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#1","title":"1.\u7cfb\u7edf\u67b6\u6784\u4ecb\u7ecd","text":"<p>B/S\u67b6\u6784\u548cC/S\u67b6\u6784\u662f\u4e24\u79cd\u5e38\u89c1\u7684\u8f6f\u4ef6\u7cfb\u7edf\u67b6\u6784\uff0c\u76f8\u4fe1\u4f5c\u4e3a\u5728\u7f51\u7edc\u6e38\u620f\u4e2d\u8eab\u7ecf\u767e\u6218\u4f60\uff0c\u4e5f\u542c\u8bf4\u8fc7\u7f51\u9875\u6e38\u620f\uff08\u59824399\uff09\uff0c\u8fd9\u6837\u7684\u6e38\u620f\u4e0d\u9700\u8981\u4e0b\u8f7d\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u7f51\u9875\u4e0a\u73a9\uff0c\u800c\u50cf\u7a7f\u8d8a\u706b\u7ebf\u8fd9\u79cd\u7f51\u7edc\u6e38\u620f\u5374\u8981\u4e0b\u8f7d\u4e4b\u540e\u624d\u80fd\u73a9\uff0c\u751a\u81f3\u6e38\u620f\u672c\u8eab\u8fd8\u5f88\u5927\u3002\u8fd9\u4e24\u79cd\u73a9\u6e38\u620f\u7684\u65b9\u5f0f\uff0c\u6b63\u597d\u5bf9\u5e94\u4e86\u4e24\u79cd\u4e0d\u540c\u7684\u7cfb\u7edf\u67b6\u6784\uff1aBrowser/Server\u67b6\u6784\u3001Client/Server\u67b6\u6784\uff0c\u6ca1\u60f3\u5230\u5427\uff0c\u513f\u65f6\u7684\u4f60\u5c31\u4ee5\u53ca\u9886\u7565\u8fc7\u4e0d\u540c\u67b6\u6784\u5f00\u53d1\u7684\u8f6f\u4ef6\u7cfb\u7edf\u3002</p>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/BS%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#11-cs","title":"1.1 C/S\u67b6\u6784","text":"<p>Client/Server \u67b6\u6784\uff0c\u89c1\u540d\u77e5\u610f\uff0c\u8fd9\u79cd\u67b6\u6784\u4e2d\u4e24\u4e2a\u91cd\u8981\u89d2\u8272\u662f\uff1aClient(\u5ba2\u6237\u7aef)\u3001Server(\u670d\u52a1\u5668)\u3002\u8fd9\u91cc\u7684\u5ba2\u6237\u7aef\u5176\u5b9e\u5c31\u5bf9\u5e94\u90a3\u4e9b\u9700\u8981\u4e0b\u8f7d\u7684\u6e38\u620f\uff0c\u8fd9\u4e9b\u6e38\u620f\u5f80\u5f80\u6bd4\u8f83\u5927\u578b\uff0c\u6e38\u620f\u4e2d\u7684\u4eba\u7269\u89d2\u8272\u5236\u4f5c\u6bd4\u8f83\u7cbe\u7f8e\uff0c\u5982\u679c\u628a\u8fd9\u4e9b\u6e38\u620f\u505a\u6210\u9875\u6e38\uff0c\u670d\u52a1\u5668\u9700\u8981\u8d1f\u8d23\u5b58\u50a8\u6240\u6709\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\u670d\u52a1\u5668\u8981\u628a\u4eba\u7269\u6a21\u578b\u54cd\u5e94\u7ed9\u6d4f\u89c8\u5668\uff0c\u7136\u540e\u6d4f\u89c8\u5668\u518d\u628a\u4eba\u7269\u7ed9\u6e32\u67d3\u51fa\u6765\uff0c\u7531\u4e8e\u8981\u4f20\u9012\u7684\u4e1c\u897f\u975e\u5e38\u5927\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u5f88\u6162\uff0c\u6e38\u620f\u7684\u4f53\u9a8c\u5c31\u4f1a\u53d8\u5dee\u3002\u6240\u4ee5\u9700\u8981\u7528\u6237\u5728\u73a9\u6e38\u620f\u524d\uff0c\u4e8b\u5148\u5728\u672c\u5730\u4e0b\u8f7d\u4e00\u4e2a\u5ba2\u6237\u7aef\uff0c\u5728\u8fd9\u4e2a\u5ba2\u6237\u7aef\u4e2d\u53ef\u80fd\u4f1a\u5b58\u50a8\u89d2\u8272\u7684\u6a21\u578b\uff0c\u89d2\u8272\u7684\u52a8\u4f5c\u7b49\u7b49\uff0c\u8fd9\u6837\u5c31\u5e2e\u670d\u52a1\u5668\u5206\u62c5\u4e86\u538b\u529b\uff0c\u53ef\u4ee5\u7ed9\u5230\u7528\u6237\u66f4\u597d\u7684\u6e38\u620f\u4f53\u9a8c\u3002</p> <p>\u7ed3\u5408\u4e0a\u8ff0\u53ef\u4ee5\u77e5\u9053 </p> <p>C/S \u67b6\u6784\u7279\u70b9\uff1a</p> <ul> <li>\u9700\u8981\u7528\u6237\u53bb\u5b89\u88c5\u7279\u5b9a\u7684\u5ba2\u6237\u7aef\u8f6f\u4ef6</li> <li>\u5ba2\u6237\u7aef\u672c\u8eab\u5e26\u6709\u6570\u636e\uff0c\u4e0d\u9700\u8981\u5168\u90e8\u7684\u6570\u636e\u90fd\u4ece\u670d\u52a1\u5668\u7aef\u4f20\u8fc7\u6765</li> </ul> <p>C/S \u67b6\u6784\u4f18\u70b9\uff1a</p> <ul> <li>\u901f\u5ea6\u5feb\uff0c\u8f6f\u4ef6\u4e2d\u7684\u5927\u90e8\u5206\u6570\u636e\u5b58\u50a8\u518d\u5ba2\u6237\u7aef\u4e2d\uff0c\u53ea\u6709\u5f88\u5c0f\u4e00\u90e8\u5206\u6570\u636e\u9700\u8981\u4ece\u670d\u52a1\u5668\u7aef\u4f20\u8fc7\u6765</li> <li>\u670d\u52a1\u5668\u538b\u529b\u5c0f</li> </ul> <p>B/S \u67b6\u6784\u7f3a\u70b9\uff1a</p> <ul> <li>\u5347\u7ea7\u7ef4\u62a4\u6210\u672c\u9ad8</li> </ul>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/BS%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#12-bs","title":"1.2 B/S \u67b6\u6784","text":"<p>Browser/Server\u67b6\u6784\u5176\u5b9e\u53ef\u4ee5\u8bf4\u662f\u4e00\u4e2a\u7279\u6b8a\u7684 C/S\u67b6\u6784\uff0c\u53ea\u4e0d\u8fc7Client\u53d8\u6210\u4e86\u6d4f\u89c8\u5668\u3002\u5bf9\u5e94\u4e0a\u9762\u8bf4\u7684\u9875\u6e38\uff0c\u53ef\u4ee5\u5f88\u5feb\u77e5\u9053 B/S \u67b6\u6784\u548c C/S \u67b6\u6784\u7684\u533a\u522b\u548c\u7279\u70b9</p> <p>B/S\u67b6\u6784\u4f18\u70b9\uff1a</p> <ul> <li>\u65e0\u9700\u7528\u6237\u5b89\u88c5\u7279\u5b9a\u7684\u5ba2\u6237\u7aef\u8f6f\u4ef6</li> <li>\u5347\u7ea7\u7ef4\u62a4\u65b9\u4fbf\uff0c\u6210\u672c\u6bd4\u8f83\u4f4e</li> </ul> <p>B/S\u67b6\u6784\u7f3a\u70b9\uff1a</p> <ul> <li>\u901f\u5ea6\u6162</li> <li>\u670d\u52a1\u5668\u538b\u529b\u5927</li> <li>\u6240\u6709\u7684\u6570\u636e\u90fd\u5728\u670d\u52a1\u5668\u4e0a\uff0c\u4e0d\u5b89\u5168</li> </ul>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/BS%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#2bs","title":"2.B/S \u67b6\u6784\u7cfb\u7edf\u7684\u901a\u4fe1\u65b9\u5f0f","text":"<p>\u5728\u6d4f\u89c8\u5668\u4e0a\u952e\u5165\u8981\u8bbf\u95ee\u7684\u7f51\u5740\u57df\u540d\uff0c\u70b9\u51fb\u8bbf\u95ee\u5c31\u80fd\u591f\u5f97\u5230\u6211\u4eec\u60f3\u8981\u7684\u9875\u9762\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u57df\u540d\u89e3\u6790\u5668\u4f1a\u5c06\u57df\u540d\u89e3\u6790\u51fa\u6765\u4e00\u4e2a\u5177\u4f53\u7684IP\u5730\u5740\u548c\u7aef\u53e3\u53f7\uff08IP\u5730\u5740\u662f\u4e3b\u673a\u5728\u7f51\u7edc\u79cd\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u7aef\u53e3\u53f7\u662f\u8fdb\u7a0b\u5728\u4e3b\u673a\u79cd\u7684\u552f\u4e00\u6807\u8bc6\uff09\uff0c\u968f\u540e\u670d\u52a1\u5668\u6536\u5230\u6765\u81ea\u6d4f\u89c8\u5668\u7684\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u5bf9\u5e94\u7684\u8fdb\u7a0b\u628a\u6d4f\u89c8\u5668\u8bf7\u6c42\u7684\u524d\u7aef\u4ee3\u7801\u54cd\u5e94\u5e76\u8f93\u51fa\u5230\u6d4f\u89c8\u5668\u4e0a\u3002\u63a5\u7740\u6d4f\u89c8\u5668\u8fdb\u884c\u6e32\u67d3\uff0c\u6267\u884chtml\u3001css\u3001JavaScript\u4ee3\u7801\uff0c\u5c55\u793a\u6548\u679c\u3002\u6574\u4e2a\u901a\u4fe1\u8fc7\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u6ce8\u610f\uff1aWeb\u670d\u52a1\u5668\u6307\u7684\u4e0d\u662f\u6574\u4e2a\u670d\u52a1\u5668\u4e3b\u673a\uff0c\u800c\u662f\u8fd0\u884c\u5728\u670d\u52a1\u5668\u4e3b\u673a\u4e0a\u7684Web\u670d\u52a1\u5668\u8f6f\u4ef6\uff0c\u5bf9\u5e94\u7740\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u4e00\u4e2a\u7aef\u53e3\u53f7\u3002</p> <p>\u8bf7\u6c42\uff1a\u4ecebrowser\u7aef\u53d1\u9001\u6570\u636e\u5230server\u7aef\u7684\u8fc7\u7a0b\u79f0\u4e3a\u8bf7\u6c42\uff0crequest</p> <p>\u54cd\u5e94\uff1a\u4eceserver\u7aef\u53d1\u9001\u6570\u636e\u5230browser\u7aef\u7684\u8fc7\u7a0b\u79f0\u4e3a\u54cd\u5e94\uff0cresponse</p>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/BS%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D/#3bs","title":"3.B/S \u67b6\u6784\u7cfb\u7edf\u7684\u89d2\u8272\u548c\u534f\u8bae","text":"<p>B/S\u67b6\u6784\u7cfb\u7edf\u7684\u89d2\u8272\uff1a\u6d4f\u89c8\u5668\uff0c\u670d\u52a1\u5668\uff0c\u6570\u636e\u5e93</p> <p>\u6d4f\u89c8\u5668\u901a\u8fc7\u5411\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\u83b7\u53d6\u60f3\u8981\u8bbf\u95ee\u7684\u9875\u9762\uff0c\u5bf9\u4e8e\u9759\u6001\u8d44\u6e90\u670d\u52a1\u5668\u53ef\u4ee5\u76f4\u63a5\u54cd\u5e94\u8f93\u51fa\u5bf9\u5e94\u7684\u524d\u7aef\u4ee3\u7801\uff0c\u800c\u5bf9\u4e8e\u52a8\u6001\u9875\u9762\uff0c\u4f8b\u5982\u5728\u5b66\u751f\u4fe1\u606f\u7ba1\u7406\u7cfb\u7edf\u4e2d\u67e5\u8be2\u5168\u90e8\u5b66\u751f\u7684\u6210\u7ee9\u65f6\uff0c\u670d\u52a1\u5668\u9700\u8981\u4ece\u6570\u636e\u5e93\u4e2d\u67e5\u8be2\u5230\u5bf9\u5e94\u7684\u7ed3\u679c\uff0c\u5728\u54cd\u5e94\u7ed9\u524d\u7aef\u3002\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u524d\u7aef\u4e0e\u670d\u52a1\u5668\u4ea4\u4e92\u9700\u8981\u9075\u5b88HTTP\u534f\u8bae\uff0c\u670d\u52a1\u5668\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u9700\u8981\u9075\u5b88JDBC\u89c4\u8303\u3002\u6570\u636e\u4f20\u9012\u7684\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\u3002</p> <p></p> <p>\u5728\u6d4f\u89c8\u5668\u4e0a\u901a\u8fc7\u7a0b\u5e8f\u7684\u8def\u5f84\u6765\u6807\u8bc6\u670d\u52a1\u5668\u4e2d\u7684\u7a0b\u5e8f\uff0c\u4e00\u4e2a\u8def\u5f84\u4ee3\u8868\u4e00\u4e2a\u8d44\u6e90\uff0c\u8fd9\u4e2a\u8d44\u6e90\u53ef\u80fd\u662f\u9759\u6001\u8d44\u6e90\uff0c\u4e5f\u53ef\u80fd\u662f\u52a8\u6001\u8d44\u6e90\uff0c\u540e\u53f0\u8981\u8fd0\u884c\u54ea\u4e2aJava\u7a0b\u5e8f\uff0c\u53d6\u51b3\u4e8e\u524d\u7aef\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u8bf7\u6c42\u8def\u5f84\uff0c\u4e00\u4e2a\u8def\u5f84\u5bf9\u5e94\u4e00\u4e2aServlet\u7a0b\u5e8f\u3002</p>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/JavaScript/","title":"JavaScript","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/JavaScript/#1javascript","title":"1.\u4ec0\u4e48\u662fJavaScript","text":"<p>JavaScript \u662f\u4e00\u4e2a\u8de8\u5e73\u53f0\u3001\u9762\u5411\u5bf9\u8c61\u7684\u811a\u672c\u8bed\u8a00\uff0c\u7528\u6765\u63a7\u5236\u7f51\u9875\u3002</p> <p>W3C\u6807\u51c6: \u7f51\u9875\u4e3b\u8981\u7531\u4e09\u90e8\u5206\u7ec4\u6210</p> <ul> <li>\u7ed3\u6784: HTML</li> <li>\u8868\u73b0: CSS</li> <li>\u884c\u4e3a: JavaScript</li> </ul>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/JavaScript/#2javascript","title":"2.JavaScript\u5f15\u5165\u65b9\u5f0f","text":"<ul> <li> <p>\u5185\u90e8\u811a\u672c: \u5c06JS\u4ee3\u7801\u5b9a\u4e49\u5728HTML\u9875\u9762\u4e2d \u5728HTML\u6587\u4ef6\u4e2d\uff0cJavaScript\u8bed\u53e5\u8981\u5199\u5728  \u6807\u7b7e\u4e2d\u3002\u4f8b\u5982:</p> <p><pre><code>&lt;script&gt;\n    alert(\"HelloWorld\");\n&lt;/script&gt;\n</code></pre> \u4e00\u822c - \u5916\u90e8\u811a\u672c: \u5c06JS\u4ee3\u7801\u5b9a\u4e49\u5728\u5916\u90e8JS\u6587\u4ef6\u4e2d\uff0c\u7136\u540e\u5f15\u5165\u5230HTML\u9875\u9762\u4e2d</p> </li> </ul>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/JavaScript/#3javascript","title":"3.JavaScript\u57fa\u7840\u8bed\u6cd5","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/JavaScript/#4javascript","title":"4.JavaScript\u5e38\u7528\u5bf9\u8c61","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/JavaScript/#5bom","title":"5.BOM","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/JavaScript/#6dom","title":"6.DOM","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/JavaScript/#7","title":"7.\u4e8b\u4ef6\u76d1\u542c","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/JavaScript/#8","title":"8.\u6b63\u5219\u8868\u8fbe\u5f0f","text":""},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/MySQL/","title":"MySQL","text":"<p>JavaWeb\u662f\u7528Java\u6280\u672f\u6808\u8fdb\u884cWeb\u5e94\u7528\u5f00\u53d1\uff0cWeb\u5e94\u7528\u4e2d\u4f1a\u5305\u542b\u7528\u6237\u548c\u5e73\u53f0\u7684\u5404\u79cd\u6570\u636e\uff0c\u8981\u5b58\u50a8\u8fd9\u4e9b\u6570\u636e\u5c31\u8981\u7528\u5230\u6570\u636e\u5e93\uff0c\u6570\u636e\u5e93\u9700\u8981\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u6765\u7ba1\u7406\uff0cMySQL\u662f\u4e00\u4e2a\u70ed\u95e8\u7684\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u3002</p>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/MySQL/#sql","title":"SQL","text":"<p>\u6211\u4eec\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u63a5\u89e6\u5230\u6bd4\u8f83\u591a\u7684\u5e94\u8be5\u662fSQL\u8bed\u53e5\uff0c\u5c24\u5176\u662f\u67e5\u8be2\u8bed\u53e5\u3002SQL\uff08Structured Query Language \u7b80\u79f0 SQL\uff09\uff0c\u7ed3\u6784\u5316\u67e5\u8be2\u8bed\u8a00\uff0c\u4e00\u95e8\u64cd\u4f5c\u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u7f16\u7a0b\u8bed\u8a00\u3002</p> <p>SQL\u901a\u7528\u8bed\u6cd5\uff1aSQL\u8bed\u53e5\u53ef\u4ee5\u5355\u884c\u6216\u591a\u884c\u4e66\u5199\uff0c\u4ee5\u5206\u53f7\u7ed3\u5c3e\u3002MySQL\u6570\u636e\u5e93\u7684SQL\u8bed\u53e5\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u5173\u952e\u5b57\u5efa\u8bae\u5927\u5199\u3002</p> <p>\u6ce8\u91ca\uff1a</p> <pre><code>-- \u5355\u884c\u6ce8\u91ca  \n# \u5355\u884c\u6ce8\u91ca\n\n/* \u591a\u884c\u6ce8\u91ca\n   \u591a\u884c\u6ce8\u91ca */\n</code></pre> <p>SQL\u8bed\u53e5\u5206\u4e3a\u56db\u7c7b\uff1aDDL\u3001DML\u3001DQL\u3001DCL</p> <p></p> <ul> <li>DDL\uff1a\u6570\u636e\u5b9a\u4e49\u8bed\u8a00\uff0c\u7528\u6765\u5b9a\u4e49\u6570\u636e\u5e93\u5bf9\u8c61\uff1a\u6570\u636e\u5e93\u3001\u8868\u7b49</li> <li>DML\uff1a\u6570\u636e\u64cd\u4f5c\u8bed\u8a00\uff0c\u7528\u6765\u5bf9\u6570\u636e\u5e93\u4e2d\u8868\u7684\u6570\u636e\u8fdb\u884c\u589e\u5220\u6539</li> <li>DQL\uff1a\u6570\u636e\u67e5\u8be2\u8bed\u8a00\uff0c\u7528\u6765\u67e5\u8be2\u6570\u636e\u5e93\u4e2d\u8868\u7684\u8bb0\u5f55</li> <li>DCL\uff1a\u6570\u636e\u63a7\u5236\u8bed\u8a00\uff0c\u7528\u6765\u5b9a\u4e49\u6570\u636e\u5e93\u7684\u8bbf\u95ee\u6743\u9650\u548c\u5b89\u5168\u7ea7\u522b\uff0c\u548c\u521b\u5efa\u7528\u6237</li> </ul>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/MySQL/#ddl","title":"DDL","text":"<p>\u64cd\u4f5c\u6570\u636e\u5e93\uff1a</p> <ul> <li>\u67e5\u8be2</li> </ul> <pre><code>show database;\n</code></pre> <ul> <li>\u521b\u5efa</li> </ul> <pre><code>create database \u6570\u636e\u5e93\u540d\u79f0;\n\n-- \u521b\u5efa\u65f6\u52a0\u5165\u5224\u65ad\ncreate database if not exists \u6570\u636e\u5e93\u540d\u79f0;\n</code></pre> <ul> <li>\u5220\u9664</li> </ul> <pre><code>drop database \u6570\u636e\u5e93\u540d\u79f0;\n\n-- \u5220\u9664\u662f\u52a0\u5165\u5224\u65ad\ndrop database if exists \u6570\u636e\u5e93\u540d\u79f0;\n</code></pre> <ul> <li>\u4f7f\u7528\u6570\u636e\u5e93</li> </ul> <pre><code>-- \u67e5\u770b\u5f53\u524d\u4f7f\u7528\u7684\u6570\u636e\u5e93\nselect database();\n\n-- \u4f7f\u7528\u6570\u636e\u5e93\nuse \u6570\u636e\u5e93\u540d\u79f0;\n</code></pre> <p>\u64cd\u4f5c\u8868\uff1a</p> <ul> <li>\u67e5\u8be2\u8868\uff1a</li> </ul> <pre><code>-- \u67e5\u8be2\u5f53\u524d\u6570\u636e\u5e93\u4e0b\u6240\u6709\u8868\nshow tables;\n\n-- \u67e5\u8be2\u8868\u7ed3\u6784\ndesc \u8868\u540d;\n</code></pre> <ul> <li>\u521b\u5efa\u8868</li> </ul> <pre><code>create table \u8868\u540d (\n  \u5b57\u6bb51\u540d\u79f0 \u5b57\u6bb51\u7c7b\u578b\uff0c\n    \u5b57\u6bb52\u540d\u79f0 \u5b57\u6bb52\u7c7b\u578b\uff0c\n    ...      ...,\n    \u5b57\u6bb5n\u540d\u79f0 \u5b57\u6bb5n\u7c7b\u578b\n);\n</code></pre> <p>MySQL\u7684\u6570\u636e\u7c7b\u578b\uff1a</p> <ul> <li> <p>\u6570\u503c\u7c7b\u578b\uff1a     </p> </li> <li> <p>\u5b57\u7b26\u4e32\u7c7b\u578b\uff1a</p> <p></p> </li> <li> <p>\u65e5\u671f\u548c\u65f6\u95f4\u7c7b\u578b\uff1a</p> <p></p> </li> <li> <p>\u5220\u9664\u8868</p> </li> </ul> <pre><code>drop table \u8868\u540d;\n\n-- \u52a0\u4e0a\u5224\u65ad\ndrop table if exists \u8868\u540d;\n</code></pre> <ul> <li>\u4fee\u6539\u8868</li> </ul> <pre><code>-- \u4fee\u6539\u8868\u540d\nalter table \u8868\u540d rename to \u65b0\u8868\u540d;\n\n-- \u6dfb\u52a0\u4e00\u5217\nalter table \u8868\u540d add \u5217\u540d \u6570\u636e\u7c7b\u578b;\n\n-- \u4fee\u6539\u6570\u636e\u7c7b\u578b\nalter table \u8868\u540d modify \u5217\u540d \u65b0\u6570\u636e\u7c7b\u578b;\n\n-- \u4fee\u6539\u5217\u540d\u548c\u6570\u636e\u7c7b\u578b\nalter table \u8868\u540d change \u5217\u540d \u65b0\u5217\u540d \u65b0\u6570\u636e\u7c7b\u578b;\n\n-- \u5220\u9664\u5217\nalter table \u8868\u540d drop \u5217\u540d;\n</code></pre>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/MySQL/#dml","title":"DML","text":"<ul> <li>\u6dfb\u52a0\u6570\u636e</li> </ul> <pre><code>-- \u7ed9\u6307\u5b9a\u7684\u5217\u6dfb\u52a0\u6570\u636e\ninsert into \u8868\u540d(\u52171, \u52172, ...) values (\u503c1, \u503c2, ...);\n\n-- \u7ed9\u6240\u6709\u5217\u6dfb\u52a0\u6570\u636e\ninsert into \u8868\u540d values (\u503c1, \u503c2, ...);\n\n-- \u6279\u91cf\u6dfb\u52a0\u6570\u636e\ninsert into \u8868\u540d(\u52171, \u52172, ...) values (\u503c1, \u503c2, ...), (\u503c1, \u503c2, ...),\n(\u503c1, \u503c2, ...),(\u503c1, \u503c2, ...),(\u503c1, \u503c2, ...) ...;\n\ninsert into \u8868\u540d values (\u503c1, \u503c2, ...), (\u503c1, \u503c2, ...),\n(\u503c1, \u503c2, ...),(\u503c1, \u503c2, ...),(\u503c1, \u503c2, ...) ...;\n</code></pre> <ul> <li>\u4fee\u6539\u6570\u636e</li> </ul> <pre><code>update \u8868\u540d set \u52171 = \u503c1, \u52172 = \u503c2, ... [where \u6761\u4ef6];\n-- \u6ce8\u610f: \u4fee\u6539\u8bed\u53e5\u4e2d\u5982\u679c\u4e0d\u52a0\u6761\u4ef6\uff0c\u5219\u8868\u4e2d\u6240\u6709\u8bb0\u5f55\u90fd\u4f1a\u88ab\u4fee\u6539\n</code></pre> <ul> <li>\u5220\u9664\u6570\u636e</li> </ul> <pre><code>delete from \u8868\u540d [where \u6761\u4ef6]\n-- \u6ce8\u610f: \u5982\u679c\u5220\u9664\u8bed\u53e5\u4e2d\u4e0d\u52a0\u6761\u4ef6\uff0c\u5219\u8868\u4e2d\u6240\u6709\u8bb0\u5f55\u90fd\u4f1a\u88ab\u5220\u9664\n</code></pre>"},{"location":"%E6%8A%80%E6%9C%AF/JavaWeb/MySQL/#dql","title":"DQL","text":"<ul> <li>\u57fa\u7840\u67e5\u8be2</li> </ul> <pre><code>select * from \u8868\u540d; -- \u67e5\u8be2\u6240\u6709\u6570\u636e\nselect \u5b57\u6bb5\u5217\u8868 from \u8868\u540d; -- \u67e5\u8be2\u591a\u4e2a\u5b57\u6bb5\n\nselect distinct \u5b57\u6bb5\u5217\u8868 from \u8868\u540d; -- \u53bb\u9664\u91cd\u590d\u8bb0\u5f55\n\nselect \u5b57\u6bb51 as z1, \u5b57\u6bb52 z2 from \u8868\u540d; -- as\u8d77\u522b\u540d\uff0c\u4e5f\u53ef\u4ee5\u7701\u7565\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/","title":"\u7b97\u6cd5","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/#table-of-contents","title":"Table of Contents","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/#_2","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/#_3","title":"\u4ee3\u7801\u968f\u60f3\u5f55","text":"<ul> <li>\u6570\u7ec4</li> </ul>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/LeetCodeHot100/1-20/","title":"Hot100 1-20","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/","title":"\u4ee3\u7801\u968f\u60f3\u5f55","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/#table-of-contents","title":"Table of Contents","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"\u4e8c\u53c9\u6811","text":"<p>Java\u4e2d\u5b9a\u4e49\u4e8c\u53c9\u6811\u7ed3\u70b9\u7684\u65b9\u5f0f\uff1a</p> <pre><code>public class TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n\n    public TreeNode(){}\n\n    public TreeNode(int val) {\n        this.val = val;\n    }\n\n    public TreeNode(int val, TreeNode left, TreeNode right) {\n        this.val = val;\n        this.left = left;\n        this.right = right;\n    }\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#_2","title":"\u4e8c\u53c9\u6811\u7684\u9012\u5f52\u904d\u5386","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#144","title":"144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386","text":"<p>\u9012\u5f52\u7248\u672c\uff1a</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    List&lt;Integer&gt; answer;\n    public List&lt;Integer&gt; preorderTraversal(TreeNode root) {\n        answer = new ArrayList&lt;&gt;();\n        dfs(root);\n        return answer;\n    }\n\n    public void dfs(TreeNode root) {\n        if(root == null) {\n            return;\n        }\n        answer.add(root.val);\n        dfs(root.left);\n        dfs(root.right);\n    }\n}\n</code></pre> <p>\u975e\u9012\u5f52\u7248\u672c\uff1a</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public List&lt;Integer&gt; preorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n\n        Stack&lt;TreeNode&gt; stk = new Stack&lt;&gt;();\n\n        TreeNode cur = root;\n\n        while(cur != null || !stk.isEmpty()) {\n            if(cur != null) {\n                ans.add(cur.val);\n                stk.push(cur);\n                cur = cur.left;\n            } else {\n                cur = stk.pop().right;\n            }\n        }\n\n        return ans;\n    }\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#145","title":"145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386","text":"<p>\u9012\u5f52\u7248\u672c\uff1a</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public List&lt;Integer&gt; postorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();        \n        dfs(root, ans);\n        return ans;\n    }\n\n    private void dfs(TreeNode root, List&lt;Integer&gt; ans) {\n        if(root == null) {\n            return;\n        }\n        dfs(root.left, ans);\n        dfs(root.right, ans);\n        ans.add(root.val);\n    }\n}\n</code></pre> <p>\u975e\u9012\u5f52\u7248\u672c\uff1a</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public List&lt;Integer&gt; postorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n\n        TreeNode cur = root, pre = null;\n        Stack&lt;TreeNode&gt; stk = new Stack&lt;&gt;();\n\n        while(cur != null || !stk.isEmpty()) {\n            if(cur != null) {\n                stk.push(cur);\n                cur = cur.left;\n            } else {\n                cur = stk.peek();\n                if(cur.right == null || cur.right == pre) {\n                    ans.add(cur.val);\n                    cur = null;\n                    pre = stk.pop(); // \u8bb0\u5f55\u524d\u4e00\u4e2a\u904d\u5386\u8fc7\u7684\u7ed3\u70b9\n                } else {\n                    cur = cur.right;\n                }\n            }\n        }        \n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#94","title":"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386","text":"<p>\u9012\u5f52\u7248\u672c\uff1a</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public List&lt;Integer&gt; inorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n        dfs(root, ans);\n        return ans;\n    }\n\n    private void dfs(TreeNode root, List&lt;Integer&gt; ans) {\n        if(root == null) {\n            return;\n        }\n\n        dfs(root.left, ans);\n        ans.add(root.val);\n        dfs(root.right, ans);\n    }\n} \n</code></pre> <p>\u975e\u9012\u5f52\u7248\u672c\uff1a</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public List&lt;Integer&gt; inorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();    \n        Stack&lt;TreeNode&gt; stk = new Stack&lt;&gt;();\n        TreeNode cur = root;\n\n        while(cur != null || !stk.isEmpty()) {\n            if(cur != null) {\n                stk.push(cur);\n                cur = cur.left;\n            } else {\n                cur = stk.pop();\n                ans.add(cur.val);\n                cur = cur.right;\n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#102","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":"<p>\u5728\u961f\u5217\u4e2d\u7528for\u5faa\u73af\u904d\u5386\u6240\u6709\u672c\u5c42\u7684\u5bf9\u8c61</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n\n        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();\n\n        if(root == null) return ans;\n        q.add(root);    \n\n        while(!q.isEmpty()) {\n            List&lt;Integer&gt; temp = new ArrayList&lt;&gt;();\n            int k = q.size();\n            for(int i = 0; i &lt; k; i ++) {\n                TreeNode t = q.poll();\n                temp.add(t.val);\n                if(t.left != null) q.add(t.left);\n                if(t.right != null) q.add(t.right);\n            }\n            ans.add(temp);\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#107-ii","title":"107. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 II","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) {\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();\n\n        if(root == null) {\n            return ans;\n        }\n\n        q.add(root);\n\n        while(!q.isEmpty()) {\n            List&lt;Integer&gt; temp = new ArrayList&lt;&gt;();\n            int cnt = q.size();\n\n            for(int i = 0; i &lt; cnt; i ++) {\n                TreeNode t = q.poll();\n                temp.add(t.val);\n                if(t.left != null) q.add(t.left);\n                if(t.right != null) q.add(t.right);\n            }\n\n            ans.add(temp);\n        }\n\n        Collections.reverse(ans);\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#199","title":"199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public List&lt;Integer&gt; rightSideView(TreeNode root) {\n        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n\n        if(root == null) {\n            return ans;\n        }        \n\n        q.add(root);\n\n        while(!q.isEmpty()) {\n            int cnt = q.size();\n\n            for(int i = 0; i &lt; cnt; i ++) {\n                TreeNode t = q.poll();\n                if(i == cnt - 1) {\n                    ans.add(t.val);\n                }\n                if(t.left != null) q.add(t.left);\n                if(t.right != null) q.add(t.right);\n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#637","title":"637. \u4e8c\u53c9\u6811\u7684\u5c42\u5e73\u5747\u503c","text":"<p>\u5c42\u6b21\u904d\u5386\uff0c\u6ce8\u610f\u6bcf\u6b21\u53ea\u5c06\u672c\u5c42\u7684\u7ed3\u70b9\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u6765\u3002</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public List&lt;Double&gt; averageOfLevels(TreeNode root) {\n        List&lt;Double&gt; ans = new ArrayList&lt;&gt;();\n\n        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();\n        q.add(root);\n\n        while(!q.isEmpty()) {\n            int k = q.size();\n            double sum = 0;\n            for(int i = 0; i &lt; k; i ++) {\n                TreeNode t = q.poll();\n                sum += t.val;\n                if(t.left != null) q.add(t.left);\n                if(t.right != null) q.add(t.right);\n            }\n            ans.add(sum / k);\n        }   \n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#429-n","title":"429. N \u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":"<p>\u5bf9\u4e8e\u7a7a\u6811\u8981\u63d0\u524d\u5224\u65ad</p> <pre><code>/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List&lt;Node&gt; children;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, List&lt;Node&gt; _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\nimport java.util.*;\n\nclass Solution {\n    public List&lt;List&lt;Integer&gt;&gt; levelOrder(Node root) {\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n        Queue&lt;Node&gt; q = new LinkedList&lt;&gt;();\n\n        if(root == null) {\n            return ans;\n        }\n\n        q.add(root);\n\n        while(!q.isEmpty()) {\n            int cnt = q.size();\n            List&lt;Integer&gt; temp = new ArrayList&lt;&gt;();\n\n            for(int i = 0; i &lt; cnt; i ++) {\n                Node t = q.poll();\n                temp.add(t.val);\n                for(Node node : t.children) {\n                    if(node != null) {\n                        q.add(node);\n                    }\n                }\n            }\n\n            ans.add(temp);\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#515","title":"515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public List&lt;Integer&gt; largestValues(TreeNode root) {\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();\n\n        if(root == null) {\n            return ans;\n        }\n\n        q.add(root);\n\n        while(!q.isEmpty()) {\n            int maxNode = Integer.MIN_VALUE;\n            int cnt = q.size();\n\n            for(int i = 0; i &lt; cnt; i ++) {\n                TreeNode t = q.poll();\n                maxNode = Math.max(maxNode, t.val);\n                if(t.left != null) q.add(t.left);\n                if(t.right != null) q.add(t.right);\n            }\n\n            ans.add(maxNode);\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#116","title":"116. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488","text":"<p>\u5c42\u5e8f\u904d\u5386</p> <pre><code>/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\nimport java.util.*;\n\nclass Solution {\n    public Node connect(Node root) {\n        Queue&lt;Node&gt; q = new LinkedList&lt;&gt;();\n\n        if(root == null) {\n            return root;\n        }\n\n        q.add(root);\n\n        while(!q.isEmpty()) {\n            int cnt = q.size();\n            Node preNode = null;\n\n            for(int i = 0; i &lt; cnt; i ++) {\n                Node curNode = q.poll();\n\n                curNode.next = preNode;\n                preNode = curNode;\n\n                if(curNode.right != null) q.add(curNode.right);\n                if(curNode.left != null) q.add(curNode.left);\n            }\n        }\n\n        return root;\n    }\n}\n</code></pre> <p>\u9012\u5f52\uff1a</p> <p>\u7ed3\u70b9\u8fde\u63a5\u5206\u4e3a\u4e24\u79cd\u60c5\u51b5\uff1a</p> <ul> <li>\u4e24\u4e2a\u7ed3\u70b9\u540c\u5c5e\u4e8e\u4e00\u4e2a\u6839\u8282\u70b9</li> <li>\u4e24\u4e2a\u7ed3\u70b9\u5c5e\u4e8e\u4e0d\u540c\u6839\u8282\u70b9</li> </ul> <pre><code>/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\nimport java.util.*;\n\nclass Solution {\n\n    public Node connect(Node root) {\n        dfs(root);\n        return root;\n    }\n\n    public void dfs(Node root) {\n        if(root == null) {\n            return;\n        }\n\n        if(root.left != null) {\n            root.left.next = root.right;\n            if(root.next != null) {\n                root.right.next = root.next.left;\n            }\n        }\n        dfs(root.left);\n        dfs(root.right);\n    }\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#117-ii","title":"117. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 II","text":"<p>\u9012\u5f52\u7248\u672c\uff1a</p> <ul> <li>\u5bf9\u4e8e\u5de6\u5b50\u8282\u70b9</li> <li>\u5982\u679c\u53f3\u5b50\u8282\u70b9\u5b58\u5728\uff0c\u90a3\u4e48\u5de6\u5b50\u8282\u70b9\u7684 next \u5c31\u662f\u53f3\u5b50\u8282\u70b9</li> <li>\u5982\u679c\u53f3\u5b50\u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u8981\u5bfb\u627e\u5f53\u524d\u8282\u70b9\u7684 next \u662f\u5426\u6709\u5b69\u5b50\uff0c\u53ef\u4ee5\u7ed9\u5de6\u5b50\u8282\u70b9\u4f5c\u4e3anext</li> <li>\u5bf9\u4e8e\u53f3\u5b50\u8282\u70b9</li> <li>\u548c\u5de6\u5b50\u8282\u70b9\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e00\u6837\u3002\u5bfb\u627e\u5f53\u524d\u8282\u70b9\u7684 next \u662f\u5426\u6709\u5b69\u5b50\uff0c\u53ef\u4ee5\u7ed9\u53f3\u5b50\u8282\u70b9\u4f5c\u4e3anext</li> </ul> <p>\u53ef\u4ee5\u53d1\u73b0\uff0c\u5de6\u5b50\u6811\u5728\u5efa\u7acbnext\u7684\u65f6\u5019\u8981\u7528\u5230\u53f3\u5b50\u6811\u7684\u7ed3\u6784\uff0c\u6240\u4ee5\u5728\u5efa\u7acbnext\u7684\u65f6\u5019\u4f18\u5148\u5efa\u7acb\u53f3\u5b50\u6811</p> <pre><code>/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node left;\n    public Node right;\n    public Node next;\n\n    public Node() {}\n\n    public Node(int _val) {\n        val = _val;\n    }\n\n    public Node(int _val, Node _left, Node _right, Node _next) {\n        val = _val;\n        left = _left;\n        right = _right;\n        next = _next;\n    }\n};\n*/\n\nclass Solution {\n\n    public Node connect(Node root) {\n        dfs(root);\n        return root;\n    }\n\n    public void dfs(Node root) {\n        if(root == null) {\n            return;\n        }\n\n        if(root.left != null) {\n            if(root.right != null) {\n                root.left.next = root.right;\n            } else {\n                setNext(root.left, root.next);\n            }\n        }\n\n        if(root.right != null) {\n            setNext(root.right, root.next);\n        }\n\n\n        dfs(root.right);\n        dfs(root.left);\n    }\n\n    public boolean checkLeaf(Node node) {\n        if(node == null) return false;\n        if(node.left == null &amp;&amp; node.right == null) {\n            return true;\n        }\n        return false;\n    }\n\n\n    public void setNext(Node curNode, Node nextNode) {\n        while(checkLeaf(nextNode)) {\n            nextNode = nextNode.next;\n        }\n\n        if(nextNode != null) {\n            if(nextNode.left != null) {\n                curNode.next = nextNode.left;\n            } else if(nextNode.right != null) {\n                curNode.next = nextNode.right;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#104","title":"104.\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6","text":"<pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        return dfs(root);\n    }\n\n    public int dfs(TreeNode root) {\n        if(root == null) {\n            return 0;\n        }\n\n        return 1 + Math.max(dfs(root.left), dfs(root.right));\n    }\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#111","title":"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6","text":"<p>\u4e0e\u6700\u5927\u6df1\u5ea6\u4e0d\u540c\uff0c\u6c42\u6700\u5c0f\u6df1\u5ea6\u7684\u65f6\u5019\uff0c\u8981\u5224\u65ad\u5f53\u524d\u7ed3\u70b9\u662f\u5426\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u5982\u679c\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9\u4f46\u7f3a\u5c11\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811\uff0c\u4e0d\u80fd\u89c6\u8be5\u7ed3\u70b9\u4e3a\u7ec8\u70b9\u3002</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minDepth(TreeNode root) {\n\n        return dfs(root);\n    }\n\n    public int dfs(TreeNode root) {\n        if(root == null) {\n            return 0;\n        }\n\n        if(root.left == null &amp;&amp; root.right != null) {\n            return 1 + dfs(root.right);\n        }\n\n        if(root.left != null &amp;&amp; root.right == null) {\n            return 1 + dfs(root.left);\n        }\n\n        return 1 + Math.min(dfs(root.left), dfs(root.right));\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#226","title":"226. \u7ffb\u8f6c\u4e8c\u53c9\u6811","text":"<p>\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u8fc7\u7a0b\u4e2d\u4ea4\u6362\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811 <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        dfs(root);\n        return root;\n    }\n\n    public void dfs(TreeNode root) {\n        if(root == null) {\n            return;\n        }\n\n        TreeNode leftNode = root.left;\n        root.left = root.right;\n        root.right = leftNode;\n        dfs(root.left);\n        dfs(root.right);\n    }\n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#101","title":"101.\u5bf9\u79f0\u4e8c\u53c9\u6811","text":"<p>\u540c\u6b65\u6bd4\u8f83\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811</p> <ul> <li>\u62ff\u5de6\u5b50\u6811\u7684\u53f3\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u6bd4\u8f83</li> <li>\u90a3\u5de6\u5b50\u6811\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u7684\u53f3\u5b50\u6811\u6bd4\u8f83</li> </ul> <p>\u5982\u679c\u6709\u4e00\u4e2a\u8282\u70b9\u4e0d\u540c\u5219\u4e0d\u662f\u5bf9\u79f0\u4e8c\u53c9\u6811</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        return cmp(root.left, root.right);\n    }\n\n    public boolean cmp(TreeNode root1, TreeNode root2) {\n        if(root1 == null &amp;&amp; root2 == null) {\n            return true;\n        }\n\n        if((root1 == null &amp;&amp; root2 != null) || (root1 != null &amp;&amp; root2 == null) || (root1.val != root2.val)) {\n            return false;\n        }\n\n        return cmp(root1.left, root2.right) &amp;&amp; cmp(root1.right, root2.left);\n    }\n\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#222","title":"222.\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6: \\(O (\\log^2 (n))\\)</p> <p>\u5bf9\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\u6765\u8bf4\uff0c\u5982\u679c\u6cbf\u7740\u4e8c\u53c9\u6811\u7684\u5de6\u5b50\u6811\u4e00\u76f4\u5f80\u5de6\u8d70\u7684\u6df1\u5ea6\u548c\u6cbf\u7740\u4e8c\u53c9\u6811\u7684\u53f3\u5b50\u6811\u4e00\u76f4\u5f80\u53f3\u8d70\u7684\u6df1\u5ea6\u4e00\u6837\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u76ee\u524d\u6240\u5728\u6839\u8282\u70b9\u7684\u6811\u662f\u4e00\u68f5\u6ee1\u4e8c\u53c9\u6811\uff0c\u800c\u6ee1\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u6570\u91cf\u4e0e\u6811\u7684\u6df1\u5ea6 \\(h\\) \u6ee1\u8db3\u516c\u5f0f \u8282\u70b9\u4e2a\u6570=\\(2^h - 1\\),\u6839\u636e\u8fd9\u4e2a\u7279\u6027\u53ef\u4ee5\u4f18\u5316\u66b4\u529b\u904d\u5386\u6c42\u89e3\u8282\u70b9\u4e2a\u6570\u7684\u7b97\u6cd5</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int countNodes(TreeNode root) {\n        if(root == null) {\n            return 0;\n        }\n\n        TreeNode leftNode = root;\n        TreeNode rightNode = root;\n\n        int leftDepth = 0;\n        int rightDepth = 0;\n\n        while(leftNode != null) {\n            leftNode = leftNode.left;\n            leftDepth ++;\n        }\n\n        while(rightNode != null) {\n            rightNode = rightNode.right;\n            rightDepth ++;\n        }\n\n        if(leftDepth == rightDepth) {\n            return (1 &lt;&lt; leftDepth) - 1;\n        }\n\n        return countNodes(root.left) + countNodes(root.right) + 1;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#110","title":"110.\u5e73\u8861\u4e8c\u53c9\u6811","text":"<p>\u4f9d\u6b21\u68c0\u67e5\u6bcf\u4e00\u4e2a\u7ed3\u70b9\u662f\u5426\u5e73\u8861</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        if(root == null) {\n            return true;\n        }\n\n        if(Math.abs(maxDepth(root.left) - maxDepth(root.right)) &gt; 1) {\n            return false;\n        }\n\n        return isBalanced(root.left) &amp;&amp; isBalanced(root.right);\n    }\n\n    public int maxDepth(TreeNode root) {\n        if(root == null) {\n            return 0;\n        }\n\n        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#404","title":"404. \u5de6\u53f6\u5b50\u4e4b\u548c","text":"<p>\u904d\u5386\u6574\u68f5\u6811\uff0c\u82e5\u5f53\u524d\u6839\u8282\u70b9\u6709\u5de6\u53f6\u5b50\uff0c\u5219\u628a\u5de6\u53f6\u5b50\u7684\u503c\u52a0\u4e0a</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int sumOfLeftLeaves(TreeNode root) {\n        if(root == null) {\n            return 0;\n        }\n\n        int add = 0;\n\n        if(root.left != null &amp;&amp; root.left.left == null &amp;&amp; root.left.right == null) {\n            add += root.left.val;    \n        }\n\n        return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right) + add;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#513","title":"513. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c","text":"<p>\u5c42\u6b21\u904d\u5386\uff0c\u6bcf\u6b21\u7b54\u6848\u53d6\u5c42\u6b21\u904d\u5386\u4e2d\u6700\u5de6\u8fb9\u7684\u6570\uff0c\u6700\u540e\u4e00\u5c42\u7684\u6700\u5de6\u8fb9\u7684\u6570\u5c31\u662f\u6700\u540e\u7684\u7b54\u6848</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public int findBottomLeftValue(TreeNode root) {\n        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();\n\n        q.add(root);\n\n        int ans = -1;\n\n        while(!q.isEmpty()) {\n            int k = q.size();\n            for(int i = 0; i &lt; k; i ++) {\n                TreeNode t = q.poll();\n                if(i == 0) {\n                    ans = t.val;\n                }\n                if(t.left != null) q.add(t.left);\n                if(t.right != null) q.add(t.right);\n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#112","title":"112. \u8def\u5f84\u603b\u548c","text":"<p>\u4e00\u5b9a\u8981\u5bf9\u53f6\u5b50\u7ed3\u70b9\u8fd9\u4e2a\u6761\u4ef6\u8fdb\u884c\u5224\u5b9a</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean hasPathSum(TreeNode root, int targetSum) {\n        if(root == null) {\n            return false;\n        }\n\n        return dfs(root, targetSum);\n    }\n\n    public boolean dfs(TreeNode root, int targetSum) {\n        if(root.left == null &amp;&amp; root.right == null) {\n            return targetSum == root.val;\n        }\n\n        boolean lflag = false, rflag = false;\n\n        if(root.left != null) {\n            lflag = dfs(root.left, targetSum - root.val);\n        } \n\n        if(root.right != null) {\n            rflag = dfs(root.right, targetSum - root.val);\n        }\n\n        return lflag || rflag;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#106","title":"106. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811","text":"<p>\u540e\u5e8f\u904d\u5386\u7684\u6700\u540e\u4e00\u4e2a\u6570\u4e00\u5b9a\u662f\u6839\u8282\u70b9\uff0c\u627e\u5230\u8be5\u6570\u5728\u4e2d\u5e8f\u904d\u5386\u91cc\u9762\u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u5c31\u80fd\u627e\u5230\u8be5\u7ed3\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u53c8\u662f\u76f8\u540c\u7684\u95ee\u9898\u3002</p> <p>\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u6839\u8282\u70b9\uff0c\u6211\u4eec\u7684\u76ee\u6807\u5c31\u662f\u627e\u5230\u8be5\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5206\u522b\u5bf9\u5e94\u7684\u4e2d\u5e8f\u904d\u5386\u548c\u540e\u5e8f\u904d\u5386\u7684\u533a\u95f4\u8303\u56f4\u662f\u4ec0\u4e48\uff1f</p> <p>\u8bbe\u4e2d\u5e8f\u904d\u5386\u7684\u533a\u95f4\u4e3a \\([inl, inr]\\)\uff0c\u540e\u5e8f\u904d\u5386\u7684\u533a\u95f4\u662f \\([postl, postr]\\) \u90a3\u4e48\u5f53\u524d\u6839\u8282\u70b9\u7684\u503c value = post[postr - 1]\uff0c\u5047\u8bbe value \u5728\u4e2d\u5e8f\u904d\u5386\u6570\u7ec4\u7684\u4e0b\u6807\u4e3a index\uff0c\u90a3\u4e48\u5f53\u524d\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u6709 leftsize = index - inl \u4e2a\u8282\u70b9\uff0c\u6240\u4ee5</p> <ul> <li> <p>\u5f53\u524d\u6839\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e2d\u5e8f\u904d\u5386\u7684\u533a\u95f4\u4e3a \\([inl, index - 1]\\), \u5de6\u5b50\u6811\u7684\u540e\u5e8f\u904d\u5386\u533a\u95f4\u4e3a \\([postl, postl + leftsize - 1]\\)</p> </li> <li> <p>\u5f53\u524d\u6839\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u7684\u533a\u95f4\u4e3a \\([index + 1, inr]\\), \u53f3\u5b50\u6811\u7684\u540e\u5e8f\u904d\u5386\u533a\u95f4\u4e3a \\([postl + leftsize, postr - 1]\\)</p> </li> </ul> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    private Map&lt;Integer,Integer&gt; map;\n    private int[] postorder;\n    private int[] inorder;\n    //private int n;\n\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        this.inorder = inorder;\n        this.postorder = postorder;\n        this.map = new HashMap&lt;&gt;();\n\n        int n = inorder.length;\n\n        for(int i = 0; i &lt; n; i ++) {\n            map.put(inorder[i], i);\n        }\n\n        return dfs(0, n - 1, 0, n - 1); \n    }\n\n    public TreeNode dfs(int inl, int inr, int postl ,int postr) {\n        if(postr &lt; postl || inr &lt; inl) {\n            return null;\n        }\n\n        int value = postorder[postr];\n        TreeNode root = new TreeNode(value);\n\n        //System.out.println(root.val + \" \" + inl + \" \" + inr + \" \" + postl + \" \" + postr);\n\n        int index = map.get(value);\n        int leftsize = map.get(value) - inl;\n\n        root.left = dfs(inl, index - 1, postl, postl + leftsize - 1);\n        root.right = dfs(index + 1, inr, postl + leftsize, postr - 1);\n\n        return root;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#105","title":"105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811","text":"<p>\u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u6309\u7167\u5f53\u524d\u7684\u6839\u8282\u70b9\u62c6\u5206\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u5e94\u8be5\u600e\u4e48\u505a\u5c31\u53ef\u4ee5\u4e86</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    Map&lt;Integer,Integer&gt; map;\n    private int[] preorder;\n    private int[] inorder;\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        this.map = new HashMap&lt;&gt;();\n        this.preorder = preorder;\n        this.inorder = inorder;\n\n        int n = inorder.length;\n\n        for(int i = 0; i &lt; n; i ++) {\n            map.put(inorder[i], i);\n        }\n\n        return dfs(0, n - 1, 0, n - 1);\n    }\n\n    public TreeNode dfs(int prel, int prer, int inl, int inr) {\n        if(prel &gt; prer || inl &gt; inr) {\n            return null;\n        }\n\n        int value = preorder[prel];\n        TreeNode root = new TreeNode(value);\n\n        int index = map.get(value);\n        int leftsize = index - inl;\n\n        root.left = dfs(prel + 1, prel + leftsize, inl, inl + leftsize - 1);\n        root.right = dfs(prel + leftsize + 1, prer, inl + leftsize + 1, inr);\n\n        return root;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#654","title":"654. \u6700\u5927\u4e8c\u53c9\u6811","text":"<p>\u627e\u5230\u503c\u6700\u5927\u7684\u6570\u548c\u8be5\u6570\u7684\u4e0b\u6807\uff0c\u628a\u8fd9\u4e2a\u6570\u5c01\u88c5\u6210\u8282\u70b9\uff0c\u6570\u7ec4\u4e2d\u5728\u8fd9\u4e2a\u7d22\u5f15\u5de6\u8fb9\u7684\u6570\u4f5c\u4e3a\u5de6\u5b50\u6811\uff0c\u5728\u8fd9\u4e2a\u7d22\u5f15\u53f3\u8fb9\u7684\u6570\u4f5c\u4e3a\u53f3\u5b50\u6811\u3002\u5bf9\u4e8e\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u53c8\u662f\u76f8\u540c\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u9012\u5f52\u6765\u89e3\u51b3</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n\n        if(nums == null || nums.length == 0) {\n            return null;\n        }\n        int maxNum, maxIndex;\n        maxNum = maxIndex = -1;\n\n        for(int i = 0; i &lt; nums.length; i ++) {\n            if(nums[i] &gt; maxNum) {\n                maxNum = nums[i];\n                maxIndex = i;\n            }\n        }\n\n        TreeNode root = new TreeNode(maxNum);\n\n        int[] leftnums = Arrays.copyOfRange(nums, 0, maxIndex);\n        int[] rightnums = Arrays.copyOfRange(nums, maxIndex + 1, nums.length);\n\n        root.left = constructMaximumBinaryTree(leftnums);\n        root.right = constructMaximumBinaryTree(rightnums);\n\n        return root;\n    }\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#617","title":"617. \u5408\u5e76\u4e8c\u53c9\u6811","text":"<p>\u5408\u5e76\u8fc7\u7a0b\u4e2d\u6709\u4e0b\u9762\u51e0\u79cd\u60c5\u51b5\uff1a</p> <ul> <li> <p>root1 \u548c root2 \u90fd\u4e0d\u4e3a\u7a7a\uff0c\u628a root1 \u548c root2 \u7684\u503c\u76f8\u52a0\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u8282\u70b9</p> </li> <li> <p>root1 \u4e3a\u7a7a \u4e14 root2 \u4e3a\u7a7a\uff0c\u90a3\u4e48\u5408\u5e76\u751f\u6210\u7684\u6811\u4e5f\u662f\u7a7a</p> </li> <li> <p>root1 \u4e3a\u7a7a \u4e14 root2 \u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u5408\u5e76\u751f\u6210\u7684\u6811\u5c31\u662f root1</p> </li> <li> <p>root1 \u4e0d\u4e3a\u7a7a \u4e14 root2 \u4e3a\u7a7a\uff0c\u90a3\u4e48\u5408\u5e76\u751f\u6210\u7684\u6811\u5c31\u662f root2</p> </li> </ul> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        if(root1 == null) return root2;\n        if(root2 == null) return root1;\n\n        TreeNode root = new TreeNode(root1.val + root2.val);\n\n        root.left = mergeTrees(root1.left, root2.left);\n        root.right = mergeTrees(root1.right, root2.right);\n\n        return root;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#700","title":"700. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22","text":"<p>\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u5de6\u5b50\u6811\u4e2d\u7684\u503c\u90fd\u5c0f\u4e8e\u6839\u8282\u70b9\uff0c\u53f3\u5b50\u6811\u7684\u503c\u90fd\u5927\u4e8e\u6839\u8282\u70b9\uff0c\u6839\u636e\u8be5\u7279\u70b9\u8fdb\u884c\u5224\u65ad\u641c\u7d22</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode searchBST(TreeNode root, int val) {\n        if(root == null) {\n            return null;\n        }\n\n        if(root.val == val) {\n            return root;\n        }\n\n        if(root.val &gt; val) {\n            return searchBST(root.left, val);\n        }\n\n        return searchBST(root.right, val);\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#98","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u540e\u7eed\u904d\u5386\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8ba1\u7b97\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u968f\u540e\u6bd4\u8f83\u5f53\u524d\u6839\u8282\u70b9\u503c\u548c\u5de6\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c\u4e0e\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5c0f\u503c\u7684\u5173\u7cfb\uff0c\u82e5\u4e0d\u6ee1\u8db3\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u5b9a\u4e49\u5219\u8fd4\u56de\u4e00\u4e2a \\([-\\inf, \\inf]\\) \u7684\u533a\u95f4\uff0c\u5426\u5219\u5408\u5e76\u66f4\u65b0\u5f53\u524d\u7684\u533a\u95f4</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        return dfs(root, Long.MAX_VALUE, Long.MIN_VALUE)[0] != Long.MIN_VALUE;\n    }\n\n    public long[] dfs(TreeNode root, long left, long right) {\n        if(root == null) {\n            return new long[]{Long.MAX_VALUE, Long.MIN_VALUE};\n        }\n\n        long[] leftInter = dfs(root.left, left, right);\n        long[] rightInter = dfs(root.right, left, right);\n\n        long x = root.val;\n\n        if(x &lt;= leftInter[1] || x &gt;= rightInter[0]) {\n            return new long[]{Long.MIN_VALUE, Long.MAX_VALUE};\n        }\n\n        return new long[]{Math.min(x, leftInter[0]), Math.max(x, rightInter[1])};\n    }\n\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#530","title":"530. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee","text":"<p>\u4e2d\u5e8f\u904d\u5386\u6c42\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u5dee\u503c\uff0c\u627e\u51fa\u6700\u5c0f\u7684\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u7684\u5dee\u503c</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    private int pre = Integer.MIN_VALUE / 2;\n    public int getMinimumDifference(TreeNode root) {\n        return dfs(root);\n    }   \n\n    public int dfs(TreeNode root) {\n        int ans = Integer.MAX_VALUE / 2;\n\n        if(root.left != null) {\n            ans = Math.min(ans, dfs(root.left));    \n        }\n\n        ans = Math.min(ans, root.val - pre);\n        pre = root.val;\n\n        if(root.right != null) {\n            ans = Math.min(ans, dfs(root.right));\n        }\n\n        return ans;\n    }\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#501","title":"501. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570","text":"<p>\u4f7f\u7528stream\u6d41\u628aList\u96c6\u5408\u8f6c\u5316\u4e3a\u6570\u7ec4:</p> <pre><code>List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\nint[] listarr = list.stream().mapToInt(Integer::intvalue).toArray();\n</code></pre> <p>\u601d\u8def\u8fd8\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u770b\u6574\u4e2a\u4e2d\u5e8f\u904d\u5386\u51fa\u6765\u7684\u5e8f\u5217\u5c31\u662f\u4e00\u4e2a\u5355\u8c03\u4e0d\u51cf\u7684\u5e8f\u5217\uff0c\u6240\u4ee5\u7edf\u8ba1\u4e00\u4e2a\u6570\u7684\u51fa\u73b0\u9891\u7387\uff0c\u53ea\u9700\u8981\u770b\u5f53\u524d\u6570\u4e0e\u4e0a\u4e00\u4e2a\u6570\u662f\u4e0d\u662f\u76f8\u540c\u7684\u5c31\u53ef\u4ee5\u4e86\u3002</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nimport java.util.*;\n\nclass Solution {\n    private int maxFre;\n    private int preValue;\n    private int count;\n    List&lt;Integer&gt; ans;\n\n    public int[] findMode(TreeNode root) {\n        this.maxFre = Integer.MIN_VALUE;\n        this.preValue = Integer.MIN_VALUE;\n        this.count = 0;\n        this.ans = new ArrayList&lt;&gt;();\n\n        dfs(root);\n        return ans.stream().mapToInt(Integer::intValue).toArray();\n    }\n\n    public void dfs(TreeNode root) {\n        if(root == null) {\n            return;\n        }\n\n        dfs(root.left);\n\n        if(preValue == root.val) {\n            count ++;\n        } else {\n            count = 1;\n        }\n\n        if(count &gt;= maxFre) {\n            if(count &gt; maxFre) {\n                while(!ans.isEmpty()) {\n                    ans.remove(ans.size() - 1);\n                }\n                maxFre = count;\n            } \n            ans.add(root.val);\n        } \n\n        preValue = root.val;\n\n\n        dfs(root.right);\n\n    } \n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#236","title":"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<p>\u5982\u679c\u5f53\u524d\u7ed3\u70b9 root \u662f q \u6216\u8005 p \u7684\u8bdd\uff0c\u76f4\u63a5\u8fd4\u56de\u5f53\u524d\u7ed3\u70b9\uff0c\u56e0\u4e3a\u5f53 root \u662f\u4e8c\u8005\u4e4b\u4e00\u7684\u65f6\u5019\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a</p> <ul> <li> <p>\u5982\u679c\u53e6\u4e00\u4e2a\u7ed3\u70b9\u5728root\u4e0b\u9762\u7684\u8bdd\uff0c\u5f53\u524d root \u5c31\u662f\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148</p> </li> <li> <p>\u5982\u679c\u53e6\u4e00\u4e2a\u7ed3\u70b9\u4e0d\u5728root\u6240\u5728\u7684\u5b50\u6811\u7684\u8bdd\uff0c\u5f53\u524d root \u867d\u7136\u4e0d\u662f\u4e24\u4e2a\u7ed3\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u4f46\u662f\u8fd4\u56de\u540e\u53ef\u4ee5\u5728\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\u5224\u65ad\u5f53\u524d\u7ed3\u70b9\u5de6\u53f3\u5b50\u6811\u662f\u5426\u5305\u542b q \u6216\u8005 p</p> </li> </ul> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if(root == null || root == p || root == q) {\n            return root;\n        }\n\n        TreeNode left = lowestCommonAncestor(root.left, p, q);\n        TreeNode right = lowestCommonAncestor(root.right, p, q);\n\n        if(left != null &amp;&amp; right != null) {\n            return root;\n        }\n\n        if(left != null) {\n            return left;\n        }\n\n        return right;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#235","title":"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148","text":"<p>\u91c7\u7528\u5148\u5e8f\u904d\u5386\uff0c\u5373\u5148\u5904\u7406\u7ed3\u70b9</p> <ul> <li> <p>\u5982\u679c\u5f53\u524d root.val \u5904\u4e8e p.val \u548c q.val \u4e4b\u95f4\uff0c\u90a3\u4e48\u5f53\u524d root \u5c31\u662f\u6700\u8fd1\u516c\u5171\u7956\u5148</p> </li> <li> <p>\u5982\u679c\u5f53\u524d root.val \u548c p.val \u6216\u8005 q.val \u76f8\u7b49\uff0c\u90a3\u4e48\u5f53\u524d root \u5c31\u662f\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u4e0d\u4f1a\u5b58\u5728\u53e6\u4e00\u4e2a\u7ed3\u70b9\u4e0d\u548c\u5f53\u524d root \u5728\u4e00\u4e2a\u5b50\u6811\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u91c7\u7528\u7684\u662f\u5148\u5e8f\u904d\u5386\uff0c\u5982\u679c\u4e24\u4e2a\u7ed3\u70b9\u4e0d\u5728\u540c\u4e00\u4e2a\u5b50\u6811\u65e9\u5c31\u8fd4\u56de\u4e4b\u524d\u7684\u7ed3\u70b9\u4e86</p> </li> <li> <p>\u5982\u679c root.val &lt; p.val &amp;&amp; root.val &lt; q.val\uff0c\u90a3\u4e48\u7b54\u6848\u5728\u53f3\u5b50\u6811\u4e2d\uff0c\u904d\u5386\u53f3\u5b50\u6811</p> </li> <li> <p>\u5982\u679c root.val &gt; p.val &amp;&amp; root.val &gt; q.val\uff0c\u90a3\u4e48\u7b54\u6848\u5728\u5de6\u5b50\u6811\u4e2d\uff0c\u904d\u5386\u5de6\u5b50\u6811</p> </li> </ul> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if(root == null) {\n            return null;\n        }\n\n        if((root.val &gt;= p.val &amp;&amp; root.val &lt;= q.val) || (root.val &lt;= p.val &amp;&amp; root.val &gt;= q.val)) {\n            return root;\n        }\n\n        if(root.val &lt; p.val &amp;&amp; root.val &lt; q.val) {\n            return lowestCommonAncestor(root.right, p, q);\n        }\n\n        return lowestCommonAncestor(root.left, p, q);\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#701","title":"701. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u63d2\u5165\u64cd\u4f5c","text":"<p>\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u9009\u62e9\u63d2\u5de6\u8fb9\u8fd8\u662f\u63d2\u53f3\u8fb9</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode insertIntoBST(TreeNode root, int val) {\n        if(root == null) {\n            return new TreeNode(val);\n        }\n        dfs(root, val);\n        return root;\n    }\n\n    public void dfs(TreeNode root, int val) {\n        if(val &gt; root.val) {\n            if(root.right == null) {\n                root.right = new TreeNode(val);\n            } else {\n                dfs(root.right, val);\n            }\n        }\n\n        if(val &lt; root.val) {\n            if(root.left == null) {\n                root.left = new TreeNode(val);\n            } else {\n                dfs(root.left, val);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#450","title":"450. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9","text":"<p>\u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u7279\u5b9a\u503c\u7684\u8282\u70b9\uff0c\u5bf9\u4e8e\u8981\u5220\u9664\u7684\u8282\u70b9 node \u5b58\u5728\u4e0b\u9762\u4e00\u4e9b\u60c5\u51b5\uff1a</p> <ul> <li> <p>node \u6ca1\u6709\u5b69\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u76f4\u63a5\u5220\u9664\uff0c\u7ecf\u8fc7\u5220\u9664\u540e\u7684\u5b50\u6811\u5c31\u662f null</p> </li> <li> <p>node \u6709\u5de6\u5b50\u6811\u6ca1\u6709\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u5220\u9664\u5e76\u8ba9\u5de6\u5b50\u6811\u4e0a\u4f4d\uff0c\u7ecf\u5220\u9664\u540e\u7684\u5b50\u6811\u5c31\u662f node.left</p> </li> <li> <p>node \u6709\u53f3\u5b50\u6811\u6ca1\u6709\u5de6\u5b50\u6811\uff0c\u90a3\u4e48\u5220\u9664\u5e76\u8ba9\u53f3\u5b50\u6811\u4e0a\u4f4d\uff0c\u7ecf\u5220\u9664\u540e\u7684\u5b50\u6811\u5c31\u662f node.right</p> </li> <li> <p>node \u5de6\u53f3\u5b50\u6811\u90fd\u6709\uff0c\u53ef\u4ee5\u8ba9\u5de6\u5b50\u6811\u4e0a\u4f4d\uff0c\u4e5f\u53ef\u4ee5\u8ba9\u53f3\u5b50\u6811\u4e0a\u4f4d\u3002\u8ba9\u5de6\u5b50\u6811\u4e0a\u4f4d\u7684\u529e\u6cd5\u5c31\u662f\u628a\u53f3\u5b50\u6811\u63a5\u5230\uff0c\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u4e0a\u3002\u7531\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u53ef\u4ee5\u77e5\u9053\uff0cnode.left \u5b50\u6811\u4e0a\u7684\u8282\u70b9\u503c\u90fd\u662f\u5c0f\u4e8e node.right \u5b50\u6811\u4e0a\u7684\u8282\u70b9\u7684\u503c\u7684\uff0c\u6240\u4ee5\u628a node.right \u6574\u4e2a\u63a5\u5230\u5de6\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9\u4e0a\uff0c\u8fd9\u6837\u5c31\u7ef4\u62a4\u4e86\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\u3002\u7ecf\u5220\u9664\u540e\u7684\u5b50\u6811\u5c31\u662f node.left</p> </li> </ul> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if(root == null) {\n            return null;\n        }\n\n        if(root.val == key) {\n            if(root.left == null) return root.right;\n            if(root.right == null) return root.left;\n            TreeNode t = root.left;\n            while(t.right != null) t = t.right;\n            t.right = root.right;\n            return root.left;\n        } else if(root.val &lt; key) {\n            root.right = deleteNode(root.right, key);\n        } else {\n            root.left = deleteNode(root.left, key);\n        }\n\n        return root;\n    }\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#669","title":"669. \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u8fd9\u9898\u548c\u5220\u9664\u4e8c\u53c9\u6811\u4e2d\u7684\u7ed3\u70b9\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u8fc7\u8981\u6ce8\u610f\u4e0e\u5220\u9664\u4e8c\u53c9\u6811\u4e0d\u540c\uff0c\u8fd9\u9053\u9898\u53ef\u80fd\u6709\u591a\u4e2a\u8282\u70b9\u503c\u4e0d\u6ee1\u8db3\u533a\u95f4\u8303\u56f4\uff0c\u6240\u4ee5\u5982\u679c\u91c7\u7528\u76f4\u63a5\u8fd4\u56de\u5220\u9664\u4e0d\u5408\u9002\u7ed3\u70b9\u7684\u5b50\u6811\u7684\u65b9\u5f0f\u6765\u5904\u7406\uff0c\u8981\u4f7f\u7528\u540e\u5e8f\u904d\u5386\uff0c\u56e0\u4e3a\u8fd4\u56de\u7684\u5b50\u6811\u4e2d\u53ef\u80fd\u8fd8\u6709\u4e0d\u5408\u6cd5\u7684\u8282\u70b9</p> <pre><code>class Solution {\n    public TreeNode trimBST(TreeNode root, int low, int high) {\n        if(root == null) {\n            return null;\n        }\n\n        root.left = trimBST(root.left, low, high);\n        root.right = trimBST(root.right, low, high);\n\n        if(root.val &lt; low || root.val &gt; high) {\n            TreeNode t = root;\n            while(t != null) {\n                if(t.val &gt; high) {\n                    t = t.left;\n                } else if(t.val &lt; low) {\n                    t = t.right;\n                } else {\n                    break;\n                }\n            } \n            return t;\n        } \n\n        return root;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#108","title":"108. \u5c06\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u9012\u5f52\u5904\u7406\uff0c\u6bcf\u4e00\u6b65\u53ea\u9700\u8981\u627e\u5230\u4e2d\u95f4\u7684\u90a3\u4e2a\u6570\uff0c\u4e0d\u8bba\u6570\u7ec4\u957f\u5ea6\u662f\u5076\u6570\u8fd8\u662f\u5947\u6570\uff0c\u90fd\u53ef\u4ee5\u4f7f\u7528 n / 2 \u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u7136\u540e\u4e0b\u6807\u5c0f\u4e8e n / 2 \u7684\u5c31\u662f\u5de6\u5b50\u6811\u7684\u8282\u70b9\uff0c\u4e0b\u6807\u5927\u4e8e n / 2 \u7684\u5c31\u662f\u53f3\u5b50\u6811\u7684\u8282\u70b9\uff0c\u4e0b\u4e00\u6b65\u9012\u5f52\u5904\u7406\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811</p> <pre><code>class Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        if(nums == null || nums.length == 0) {\n            return null;\n        }\n        int n = nums.length;\n        int mid = n / 2;\n\n        TreeNode root = new TreeNode(nums[mid]);\n\n        int[] leftnums = Arrays.copyOfRange(nums, 0, mid);\n        int[] rightnums = Arrays.copyOfRange(nums, mid + 1, n);\n\n        root.left = sortedArrayToBST(leftnums);\n        root.right = sortedArrayToBST(rightnums);\n        return root;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E4%BA%8C%E5%8F%89%E6%A0%91/#538","title":"538. \u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811","text":"<pre><code>class Solution {\n    private int sum = 0;\n\n    public TreeNode convertBST(TreeNode root) {\n        dfs(root);\n        return root;\n    }\n\n    public void dfs(TreeNode root) {\n        if(root == null) {\n            return;\n        }\n\n        dfs(root.right);\n        sum += root.val;\n        root.val = sum;\n        dfs(root.left);\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","title":"\u52a8\u6001\u89c4\u5212","text":"<p>\u52a8\u6001\u89c4\u5212</p>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#509","title":"509. \u6590\u6ce2\u90a3\u5951\u6570","text":"<p>\u7ecf\u5178</p> <pre><code>class Solution {\n    public int fib(int n) {\n        int[] f = new int[n + 1];\n\n        for(int i = 0; i &lt;= n; i ++) {\n            if(i == 0) {\n                f[i] = 0;\n            } else if(i == 1) {\n                f[i] = 1;\n            } else {\n                f[i] = f[i - 1] + f[i - 2];\n            }\n        }\n\n        return f[n];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#70","title":"70. \u722c\u697c\u68af","text":"<p>\u5bf9\u4e8e\u4efb\u610f\u7b2c i \u5c42\u53f0\u9636\uff0c\u6211\u53ef\u4ee5\u4ece\u7b2c i - 1 \u5c42\u53f0\u9636\u722c\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u4ece\u7b2c i - 2\u5c42\u53f0\u9636\u722c\u4e0a</p> <pre><code>class Solution {\n    public int climbStairs(int n) {\n        int[] dp = new int[n + 1];\n\n        for(int i = 1; i &lt;= n; i ++) {\n            if(i == 1) {\n                dp[1] = 1;\n            } else if(i == 2){\n                dp[2] = 2;\n            } else {\n                dp[i] = dp[i - 1] + dp[i - 2];\n            }\n        }\n\n        return dp[n];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#746","title":"746. \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af","text":"<p>\u548c\u722c\u697c\u68af\u4e00\u6837\uff0c\u5f53\u524d\u7b2c i \u5c42\u697c\u68af\uff0c\u53ef\u4ee5\u4ece i - 1 \u5c42\u5230\u8fbe\uff0c\u4e5f\u53ef\u4ee5\u4ece i - 2 \u5c42\u5230\u8fbe\uff0c\u6bd4\u8f83\u8fd9\u4e24\u6761\u8def\u7684\u82b1\u8d39\uff0c\u9009\u53d6\u82b1\u8d39\u5c0f\u7684\u4e00\u6761</p> <pre><code>class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        int n = cost.length;\n        int[] dp = new int[n + 1];\n\n        dp[0] = 0;\n        dp[1] = 0;\n\n        for(int i = 2; i &lt;= n; i ++) {\n            dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);    \n        }\n\n        return dp[n];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#62","title":"62. \u4e0d\u540c\u8def\u5f84","text":"<p>\u5f53\u524d\u4f4d\u7f6e\u53ef\u4ee5\u4ece\u5de6\u8fb9\u8d70\u8fc7\u6765\uff0c\u4e5f\u53ef\u4ee5\u4ece\u4e0a\u9762\u8d70\u8fc7\u6765\uff0c\u4ece\u4e0a\u9762\u8d70\u8fc7\u6765\u7684\u8def\u5f84\u6570\u52a0\u4e0a\u4ece\u5de6\u8fb9\u8d70\u8fc7\u6765\u7684\u8def\u5f84\u6570\u5c31\u662f\u603b\u7684\u8def\u5f84\u6761\u6570</p> <pre><code>class Solution {\n    public int uniquePaths(int m, int n) {\n        int[][] dp = new int[m + 1][n + 1];\n\n        for(int i = 0; i &lt; m; i ++) {\n            for(int j = 0; j &lt; n; j ++) {\n                if(i == 0 &amp;&amp; j == 0) {\n                    dp[i + 1][j + 1] = 1;\n                } else {\n                    dp[i + 1][j + 1] = dp[i + 1][j] + dp[i][j + 1];\n                }\n            }\n        }\n\n        return dp[m][n];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#63-ii","title":"63. \u4e0d\u540c\u8def\u5f84 II","text":"<p>\u4e0e\u4e0a\u4e00\u9898\u4e0d\u540c\uff0c\u8fd9\u9898\u9700\u8981\u8003\u8651\u5f53\u524d\u4f4d\u7f6e\u662f\u5426\u6709\u8def\u969c\uff0c\u5982\u679c\u6709\u8def\u969c\u90a3\u4e48\u5f53\u524d\u4f4d\u7f6e\u7684\u53ef\u5230\u8fbe\u8def\u5f84\u8df3\u6570\u5c31\u662f0\u3002\u8fd8\u6709\u8981\u5224\u65ad\u521d\u59cb\u4f4d\u7f6e\u662f\u5426\u6446\u653e\u4e86\u8def\u969c\uff0c\u5982\u679c\u521d\u59cb\u4f4d\u7f6e\u6709\u8def\u969c\u90a3\u4e48\u7b54\u6848\u76f4\u63a5\u4e3a0</p> <pre><code>class Solution {\n    public int uniquePathsWithObstacles(int[][] obstacleGrid) {\n\n        if(obstacleGrid[0][0] == 1) {\n            return 0;\n        }\n\n        int n = obstacleGrid.length;\n        int m = obstacleGrid[0].length;\n\n        int[][] dp = new int[n + 1][m + 1];\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                if(i == 0 &amp;&amp; j == 0) {\n                    dp[i + 1][j + 1] = 1;\n                } else if(obstacleGrid[i][j] == 1) {\n                    dp[i + 1][j + 1] = 0;\n                } else {\n                    dp[i + 1][j + 1] = dp[i][j + 1] + dp[i + 1][j];\n                }\n            }\n        }\n\n        return dp[n][m];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#343","title":"343. \u6574\u6570\u62c6\u5206","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#96","title":"96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u5f53\u9009\u5b9a\u4e00\u4e2a\u6570\u4f5c\u4e3a\u6839\u8282\u70b9\u7684\u65f6\u5019\uff0c\u4ee5\u8be5\u6839\u8282\u70b9\u6784\u9020\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e0d\u540c\u79cd\u7c7b\u5171\u6709 dp[left] * dp[right] \u79cd</p> <pre><code>class Solution {\n    public int numTrees(int n) {\n        int[] dp = new int[n + 1];\n\n        for(int i = 0; i &lt;= n; i ++) {\n            if(i == 0 || i == 1) {\n                dp[i] = 1;\n            } else if(i == 2) {\n                dp[i] = 2;\n            } else {\n                for(int j = 1; j &lt;= i; j ++) {\n                    dp[i] += dp[j - 1] * dp[i - j];\n                }\n            }\n        }\n\n        return dp[n];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#416","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6","text":"<p>\\(dp[i][j]\\)\u6570\u7ec4\u5b9a\u4e49\uff1a\u4ece\u524d i \u4e2a\u6570\u9009\uff0c\u80fd\u5426\u9009\u51fa\u548c\u5927\u5c0f\u4e3a j \u7684\u96c6\u5408</p> <p>\u53ef\u5f97\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b: \\(dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i]]\\)</p> <p>\u5206\u522b\u5bf9\u5e94\u9009\u5f53\u524d\u6570\u548c\u4e0d\u9009\u5f53\u524d\u6570\u7684\u7ed3\u679c</p> <pre><code>class Solution {\n    public boolean canPartition(int[] nums) {\n        int sum = 0;\n        for(int num : nums) sum += num;\n\n        if(sum % 2 == 1) {\n            return false;\n        } \n\n        boolean[] dp = new boolean[sum / 2 + 1];\n\n        dp[0] = true;\n\n        for(int i = 0; i &lt; nums.length; i ++) {\n            for(int j = sum / 2; j &gt;= nums[i]; j --) {\n                dp[j] = dp[j] || dp[j - nums[i]];\n            }\n        }\n\n        return dp[sum / 2];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1049-ii","title":"1049. \u6700\u540e\u4e00\u5757\u77f3\u5934\u7684\u91cd\u91cf II","text":"<p>\u548c\u5206\u5272\u7b49\u548c\u5b50\u96c6\u4e00\u6837\uff0c\u628a\u77f3\u5934\u5206\u6210\u4e24\u5806\uff0c\u7136\u540e\u518d\u4e00\u8d77\u7c89\u788e\uff0c\u67e5\u770b\u5206\u6210\u4e24\u5806\u540e\u8fd9\u4e24\u5806\u7684\u7edd\u5bf9\u503c\u5dee\u7684\u6700\u5c0f\u503c</p> <pre><code>class Solution {\n    public int lastStoneWeightII(int[] stones) {\n        int sum = 0;\n        for(int stone : stones) sum += stone;\n\n        boolean[] dp = new boolean[sum + 1];\n\n        dp[0] = true;\n\n        for(int i = 0; i &lt; stones.length; i ++) {\n            for(int j = sum; j &gt;= stones[i]; j --) {\n                dp[j] = dp[j] || dp[j - stones[i]];\n            }\n        }\n\n        int ans = Integer.MAX_VALUE;\n        for(int i = 1; i &lt;= sum; i ++) {\n            if(dp[i]) {\n                ans = Math.min(ans, Math.abs(sum - 2 * i));\n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#494","title":"494. \u76ee\u6807\u548c","text":"<p>\u8bbe\u6574\u4e2a\u6570\u7ec4\u548c\u4e3a \\(S\\)\uff0c\u9009\u51fa\u6765\u52a0\u8d1f\u53f7\u7684\u6570\u7684\u548c\u4e3a \\(N\\)\uff0c\u6ca1\u6709\u52a0\u8d1f\u53f7\u7684\u6570\u548c\u4e3a \\(P\\)\uff0c\u5219\u53ef\u4ee5\u5f97\u5230 \\(N + P = S, P - N = target\\) \uff0c\u6240\u4ee5 \\(2 * P = S + target, P = (S + target) / 2\\)</p> <p>\u6b64\u65f6\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u4ece\u6570\u7ec4 nums \u4e2d\u9009\u51fa\u4e00\u4e2a\u96c6\u5408\uff0c\u96c6\u5408\u7684\u548c\u4e3a (S + target) / 2 \u7684\u9009\u6cd5\u6709\u591a\u5c11\u79cd\u3002\u6ce8\u610f\uff0c\u5982\u679c S + target \u4e0d\u662f\u5076\u6570\u7684\u8bdd\uff0c\u5219\u65e0\u89e3</p> <pre><code>class Solution {\n    public int findTargetSumWays(int[] nums, int target) {\n        int s = 0;\n        for(int num : nums) s += num;\n\n        if((target + s) % 2 != 0 || (target + s) &lt; 0) {\n            return 0;\n        }\n\n        target = (target + s) / 2;\n\n        int[] dp = new int[target + 1];\n\n        dp[0] = 1;\n\n        for(int i = 0; i &lt; nums.length; i ++) {\n            for(int j = target; j &gt;= nums[i]; j --) {\n                dp[j] += dp[j - nums[i]];\n            }\n        }\n\n        return dp[target];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#474","title":"474. \u4e00\u548c\u96f6","text":"<p><pre><code>dp[j][k] \u8868\u793a \u9009\u51fa\u6765 j \u4e2a 0 \u548c k \u4e2a 1 \u7684\u5b50\u96c6\u7684\u957f\u5ea6\u6709\u591a\u957f\n\u5219\u53ef\u4ee5\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b: dp[j][k] = max(dp[j][k], dp[j - cnt0[i]][k - cnt1[i]])\n</code></pre> <pre><code>class Solution {\n    public int findMaxForm(String[] strs, int m, int n) {\n        int len = strs.length;\n\n        int[] cnt0 = new int[len + 1];\n        int[] cnt1 = new int[len + 1];\n\n        for(int i = 0; i &lt; len; i ++) {\n            int c0 = 0;\n            int c1 = 0;\n            for(char c : strs[i].toCharArray()) {\n                if(c == '0') c0 ++;\n                else c1 ++;\n            }\n\n            cnt0[i] = c0;\n            cnt1[i] = c1;\n        }\n\n        int[][] dp = new int[m + 1][n + 1];\n\n        for(int i = 0; i &lt; len; i ++) {\n            for(int j = m; j &gt;= cnt0[i]; j --) {\n                for(int k = n; k &gt;= cnt1[i]; k --) {\n                    dp[j][k] = Math.max(dp[j][k], dp[j - cnt0[i]][k - cnt1[i]] + 1);\n                }\n            }\n        }\n\n        return dp[m][n];\n    }\n}\n</code></pre></p>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#518-ii","title":"518. \u96f6\u94b1\u5151\u6362 II","text":"<p>\u5b8c\u5168\u80cc\u5305\u95ee\u9898</p> <pre><code>class Solution {\n    public int change(int amount, int[] coins) {\n        int n = coins.length;\n\n        int[][] dp = new int[n + 1][amount + 1];\n\n        dp[0][0] = 1;\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt;= amount; j ++) {\n                for(int k = 0; k * coins[i] &lt;= j; k ++) {\n                    dp[i + 1][j] += dp[i][j - k * coins[i]];\n                }\n            }\n        }\n\n        return dp[n][amount];\n    } \n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#377-iv","title":"377. \u7ec4\u5408\u603b\u548c \u2163","text":"<p>\u76f8\u5f53\u4e8e\u722c\u697c\u68af\u7684\u8fdb\u9636\u7248\uff0c\u722c\u697c\u68af\u6bcf\u6b21\u53ea\u80fd\u9009\u62e9 1 \u6216\u8005 2\uff0c\u800c\u8be5\u9898\u662f\u6bcf\u6b21\u4ece nums \u6570\u7ec4\u4e2d\u9009\u4e00\u4e2a\u6570</p> <pre><code>class Solution {\n    public int combinationSum4(int[] nums, int target) {\n        int n = nums.length;\n\n        int[] dp = new int[target + 1];\n\n        dp[0] = 1;\n\n        for(int j = 1; j &lt;= target; j ++) {\n            for(int i = 0; i &lt; n; i ++) {\n                if(j &gt;= nums[i]) {\n                    dp[j] += dp[j - nums[i]];\n                }\n            }\n        } \n\n        return dp[target];\n    }   \n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#57","title":"57. \u722c\u697c\u68af\uff08\u7b2c\u516b\u671f\u6a21\u62df\u7b14\u8bd5\uff09","text":"<p>\u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u8fd9\u6b21\u7684 nums \u53d8\u6210\u4e86 1 ~ m</p> <pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception{\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n\n        int[] dp = new int[n + 1];\n\n        dp[0] = 1;\n        for(int j = 1; j &lt;= n; j ++) {\n            for(int i = 1; i &lt;= m; i ++) {\n                if(j &gt;= i) {\n                    dp[j] += dp[j - i]; \n                }\n            }\n        }\n\n        System.out.println(dp[n]);\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#322","title":"322. \u96f6\u94b1\u5151\u6362","text":"<p>\u6807\u51c6\u7684\u5b8c\u5168\u80cc\u5305\u95ee\u9898</p> <pre><code>class Solution {\n    public int coinChange(int[] coins, int amount) {\n        int n = coins.length;\n\n        int[] dp = new int[amount + 1];\n\n        Arrays.fill(dp, Integer.MAX_VALUE / 2);\n        dp[0] = 0;\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = coins[i]; j &lt;= amount; j ++) {\n                dp[j] = Math.min(dp[j], dp[j - coins[i]] + 1);\n            }\n        }\n\n        return dp[amount] &gt;= Integer.MAX_VALUE / 2 ? -1 : dp[amount];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#279","title":"279. \u5b8c\u5168\u5e73\u65b9\u6570","text":"<p>\u9996\u5148\u628a\u53ef\u4ee5\u53d6\u7684\u6570\u9884\u5904\u7406\u51fa\u6765\uff0c\u5199\u5728\u9759\u6001\u4ee3\u7801\u5757\u91cc\u9762\uff0c\u7136\u540e\u505a\u5b8c\u5168\u80cc\u5305\u95ee\u9898</p> <pre><code>class Solution {\n    private static List&lt;Integer&gt; squre;\n\n    static {\n        squre = new ArrayList&lt;&gt;();\n        for(int i = 1; i &lt;= 10000; i ++) {\n            if((int)Math.sqrt(i) * (int)Math.sqrt(i) == i) {\n                squre.add(i);\n            }\n        }\n    }\n\n    public int numSquares(int n) {\n        int[] dp = new int[n + 1];\n\n        Arrays.fill(dp, Integer.MAX_VALUE / 2);\n        dp[0] = 0;\n\n        for(int i = 0; i &lt; squre.size() &amp;&amp; squre.get(i) &lt;= n; i ++) {\n            for(int j = squre.get(i); j &lt;= n; j ++) {\n                dp[j] = Math.min(dp[j], dp[j - squre.get(i)] + 1);\n            }\n        }\n\n        return dp[n];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#139","title":"139. \u5355\u8bcd\u62c6\u5206","text":"<pre><code>dp[i]: \u8868\u793a\u5b57\u7b26\u4e32s\u4e2d\u622a\u6b62\u5230\u7b2ci\u4e2a\u5b57\u7b26\u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u80fd\u5426\u88abwordDict\u4e2d\u7684\u5b57\u7b26\u4e32\u62fc\u51d1\u51fa\u6765\n\u7531\u5b9a\u4e49\u77e5 dp[0] = true\n\u5f53\u524d\u4f4d\u7f6e i\uff0c\u53ef\u4ee5\u4ece\u5b83\u524d\u9762\u7684\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e j\uff0c\u52a0\u4e0a\u4e00\u4e2awordDict\u4e2d\u7684\u5b57\u7b26\u4e32\u5230\u8fbe\u5f53\u524d\u4f4d\u7f6e\uff0c\u5982\u679c j \u4f4d\u7f6e\u662f\u53ef\u8fbe\u7684\u90a3\u4e48\u5f53\u524d\u4f4d\u7f6e\u4e5f\u662f\u53ef\u8fbe\u7684\n\u6240\u4ee5\u53ef\u4ee5\u77e5\u9053\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a dp[i] |= dp[j]\n</code></pre> <pre><code>class Solution {\n    public boolean wordBreak(String s, List&lt;String&gt; wordDict) {\n        Map&lt;String, Boolean&gt; cntWord = new HashMap&lt;&gt;();\n        for(String word : wordDict) {\n            cntWord.put(word, true);\n        }\n\n        int n = s.length();\n\n        boolean[] dp = new boolean[n + 1];\n        dp[0] = true;\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt;= i; j ++) {\n                String curSub = s.substring(j, i + 1);\n                if(cntWord.get(curSub) != null &amp;&amp; cntWord.get(curSub)) {\n                    dp[i + 1] |= dp[j];\n                }        \n            }\n        }\n\n        return dp[n];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#198","title":"198. \u6253\u5bb6\u52ab\u820d","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u52a0\u7ea6\u675f\u768401\u80cc\u5305\u95ee\u9898\uff0c\u5bf9\u4e8e\u5f53\u524d\u7b2c i \u4e2a\u4f4d\u7f6e\u7684\u7269\u54c1\uff0c\u5982\u679c\u9009\u5f53\u524d\u4f4d\u7f6e\u7684\u7269\u54c1\u5219\u53ea\u80fd\u7ee7\u627f\u4e0e\u7b2c i - 2 \u4e2a\u7269\u54c1\u524d\u9009\u7684\u6700\u5927\u503c\uff0c\u5982\u679c\u4e0d\u9009\u5f53\u524d\u7269\u54c1\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\u7b2c i - 1 \u4e2a\u7269\u54c1\u524d\u9009\u7684\u6700\u5927\u503c </p> <p>\u53ef\u5f97\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b:</p> <pre><code>dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n</code></pre> <pre><code>class Solution {\n    public int rob(int[] nums) {\n        int n = nums.length;\n        int[] dp = new int[n + 2];\n\n        for(int i = 0; i &lt; n; i ++) {\n            dp[i + 2] = Math.max(dp[i + 1], dp[i] + nums[i]);\n        }\n\n        return dp[n + 1];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#213-ii","title":"213. \u6253\u5bb6\u52ab\u820d II","text":"<p>\u5206\u4e24\u4e2adp\u6570\u7ec4\uff0c\u5206\u522b\u5bf9\u5e94\u9009\u7b2c\u4e00\u4e2a\u6570\u548c\u4e0d\u9009\u7b2c\u4e00\u4e2a\u6570</p> <pre><code>class Solution {\n    public int rob(int[] nums) {\n        int n = nums.length;\n\n        int[] dp1 = new int[n + 2];\n        int[] dp2 = new int[n + 2];\n\n        //\u9009\u7b2c\u4e00\u4e2a\n        dp1[2] = nums[0];\n        for(int i = 1; i &lt; n; i ++) {\n            if(i == n - 1) {\n                dp1[i + 2] = dp1[i + 1];\n                continue;\n            }\n            dp1[i + 2] = Math.max(dp1[i + 1], dp1[i] + nums[i]); \n        }\n\n        //\u4e0d\u9009\u7b2c\u4e00\u4e2a\n        for(int i = 1; i &lt; n; i ++) {\n            dp2[i + 2] = Math.max(dp2[i + 1], dp2[i] + nums[i]);\n        }\n\n        return Math.max(dp1[n + 1], dp2[n + 1]);\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#337-iii","title":"337. \u6253\u5bb6\u52ab\u820d III","text":"<p>\u5148\u5199\u66b4\u529b\u641c\u7d22\uff0c\u7136\u540e\u518d\u52a0\u4e0a\u8bb0\u5fc6\u5316\u3002\u5728\u9012\u5f52\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u5f53\u524d\u6811\u7ed3\u70b9\uff0c\u4e00\u4e2a\u662f\u5f53\u524d\u6811\u7ed3\u70b9\u662f\u5426\u88ab\u9009\u4e2d</p> <ul> <li>\u5982\u679c\u5f53\u524d\u7ed3\u70b9\u88ab\u9009\u4e2d\u4e86\uff0c\u90a3\u4e48\u5b83\u7684\u5de6\u5b50\u8282\u70b9\u548c\u53f3\u5b50\u8282\u70b9\u5c31\u90fd\u4e0d\u80fd\u9009</li> <li>\u5982\u679c\u5f53\u524d\u7ed3\u70b9\u6ca1\u88ab\u9009\u4e2d\uff0c\u90a3\u4e48\u5b58\u5728 4 \u79cd\u7ec4\u5408</li> <li>\u9009\u5de6\u5b50\u8282\u70b9\u4e14\u9009\u53f3\u5b50\u8282\u70b9</li> <li>\u9009\u5de6\u5b50\u8282\u70b9\u4e14\u4e0d\u9009\u53f3\u5b50\u8282\u70b9</li> <li>\u4e0d\u9009\u5de6\u5b50\u8282\u70b9\u4e14\u9009\u53f3\u5b50\u8282\u70b9</li> <li>\u4e0d\u9009\u5de6\u5b50\u8282\u70b9\u4e14\u4e0d\u9009\u53f3\u5b50\u8282\u70b9</li> </ul> <p>\u8fd9\u6837\u5c31\u53ef\u4ee5\u628a\u6240\u6709\u7684\u60c5\u51b5\u641c\u7d22\u5b8c\uff0c\u4f46\u662f\u76f4\u63a5\u66b4\u529b\u4f1a\u8d85\u65f6\uff0c\u7528\u4e24\u4e2a\u8bb0\u5fc6\u5316\u54c8\u5e0c\u8868\u6765\u5206\u522b\u8bb0\u5fc6\u5f53\u524d\u6570\u9009\u4e86\u548c\u5f53\u524d\u6570\u6ca1\u9009\u7684\u641c\u7d22\u8fc7\u7684\u503c\uff0c\u907f\u514d\u91cd\u590d\u7684\u641c\u7d22\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86 O(n)</p> <pre><code>/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    Map&lt;TreeNode, Integer&gt; sel;\n    Map&lt;TreeNode, Integer&gt; nosel;\n\n    public int rob(TreeNode root) {\n        sel = new HashMap&lt;&gt;();\n        nosel = new HashMap&lt;&gt;();\n\n        System.out.println(dfs(root, true) + \" \" + dfs(root, false));\n\n        return Math.max(dfs(root, true), dfs(root, false));\n    }\n\n    public int dfs(TreeNode root, boolean isSelect) {\n        if(root == null) {\n            return 0;\n        }\n\n        if(isSelect &amp;&amp; sel.containsKey(root)) {\n            return sel.get(root);\n        }\n\n        if(!isSelect &amp;&amp; nosel.containsKey(root)) {\n            return nosel.get(root);\n        }\n\n        int res = 0;\n\n        if(isSelect) {\n            res += dfs(root.left, false) + dfs(root.right, false) + root.val;\n        } else { \n            int s1 = dfs(root.left, true) + dfs(root.right, true);\n            int s2 = dfs(root.left, false) + dfs(root.right, false);\n            int s3 = dfs(root.left, true) + dfs(root.right, false);\n            int s4 = dfs(root.left, false) + dfs(root.right, true);\n            res += Math.max(Math.max(s1, Math.max(s2, s3)), s4);\n        }\n\n        if(isSelect) {\n            sel.put(root, res);\n        } else {\n            nosel.put(root, res);\n        }\n\n        return res;\n    }\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#121","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a","text":"<p>\u7528\u5f53\u524d\u80a1\u4ef7\u51cf\u53bb\u5b83\u524d\u9762\u6700\u5c0f\u7684\u80a1\u4ef7\u5f97\u5230\u5f53\u524d\u7684\u6700\u5927\u7b54\u6848</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int ans = 0;\n        int premin = Integer.MAX_VALUE;\n\n        for(int i = 0; i &lt; prices.length; i ++) {\n\n            if(premin == Integer.MAX_VALUE) {\n                premin = prices[i];\n                continue;\n            }\n\n            ans = Math.max(prices[i] - premin, ans);\n            premin = Math.min(premin, prices[i]);\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#122-ii","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II","text":"<p>\u72b6\u6001\u673adp\uff0c\u5206\u4e3a\u4e24\u79cd\u72b6\u6001\uff1a\u6301\u6709\u80a1\u7968\u548c\u672a\u6301\u6709\u80a1\u7968</p> <pre><code>dp\u6570\u7ec4\uff1a\n    dp[i][0]: \u8003\u86510~i\u4e0b\u6807\u7684\u80a1\u4ef7\uff0c\u5f53\u524d\u672a\u6301\u6709\u80a1\u7968\u7684\u6700\u5927\u5229\u6da6\u662f\u591a\u5c11\n    dp[i][1]: \u8003\u86510~i\u4e0b\u6807\u7684\u80a1\u4ef7\uff0c\u5f53\u524d\u6301\u6709\u80a1\u7968\u7684\u6700\u5927\u5229\u6da6\u662f\u591a\u5c11\n\u8f6c\u79fb\u65b9\u7a0b\uff1a\n    \u672a\u6301\u6709\u80a1\u7968\u53ef\u4ee5\u4ece\u672a\u6301\u6709\u80a1\u7968\u7684\u72b6\u6001\u8f6c\u79fb\uff0c\u4e5f\u53ef\u4ee5\u4ece\u6301\u6709\u80a1\u7968\u7684\u72b6\u6001\u8f6c\u79fb\uff08\u5356\u6389\u5f53\u524d\u80a1\u7968\uff09\n    dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i])\n    \u6301\u6709\u80a1\u7968\u53ef\u4ee5\u4ece\u6301\u6709\u80a1\u7968\u7684\u72b6\u6001\u8f6c\u79fb\uff0c\u4e5f\u53ef\u4ee5\u4ece\u672a\u6301\u6709\u80a1\u7968\u7684\u72b6\u6001\u8f6c\u79fb\uff08\u8d2d\u4e70\u5f53\u524d\u80a1\u7968\uff09\n    dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])\n</code></pre> <p>\u53ef\u4ee5\u77e5\u9053\u5bf9\u4e8e\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u672a\u6301\u6709\u80a1\u7968\u7684\u5229\u6da6\u4e00\u5b9a\u5927\u4e8e\u6301\u6709\u80a1\u7968\u7684\u5229\u6da6\u6240\u4ee5\u6700\u7ec8\u7b54\u6848\u4e3adp[n][0]</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int n = prices.length;\n\n        int[][] dp = new int[n + 1][2];\n\n        dp[0][0] = 0;\n        dp[0][1] = Integer.MIN_VALUE;\n\n        for(int i = 0; i &lt; n; i ++) {\n            dp[i + 1][0] = Math.max(dp[i][0], dp[i][1] + prices[i]);\n            dp[i + 1][1] = Math.max(dp[i][1], dp[i][0] - prices[i]);    \n        }\n\n        return dp[n][0];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#123-iii","title":"123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III","text":"<p>\u628a\u72b6\u6001\u8868\u793a\u6570\u7ec4\u8bbe\u8ba1\u6210\u4e09\u7ef4\u7684\uff0c\u591a\u52a0\u4e00\u7ef4\u6765\u8868\u793a\u4ea4\u6613\u7684\u6b21\u6570</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int n = prices.length;\n\n        int[][][] dp = new int[n + 1][3][2];\n\n        dp[0][0][1] = dp[0][1][1] = dp[0][2][1] = Integer.MIN_VALUE;\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; 2; j ++) {\n                dp[i + 1][j + 1][0] = Math.max(dp[i][j + 1][0], dp[i][j + 1][1] + prices[i]);\n                dp[i + 1][j + 1][1] = Math.max(dp[i][j + 1][1], dp[i][j][0] - prices[i]);\n            }\n        }\n\n        return dp[n][2][0];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#188-iv","title":"188. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a IV","text":"<p>\u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u8fd9\u4e00\u9898\u66f4\u5177\u6709\u666e\u9002\u6027\uff0c\u628a\u4e24\u6b21\u4ea4\u6613\u6539\u6210\u4e86k\u6b21\u4ea4\u6613</p> <pre><code>class Solution {\n    public int maxProfit(int k, int[] prices) {\n        int n = prices.length;\n\n        int[][][] dp = new int[n + 1][k + 1][2];\n\n        for(int i = 0; i &lt;= k; i ++) {\n            dp[0][i][1] = Integer.MIN_VALUE;\n        }\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; k; j ++) {\n                dp[i + 1][j + 1][0] = Math.max(dp[i][j + 1][0], dp[i][j + 1][1] + prices[i]);\n                dp[i + 1][j + 1][1] = Math.max(dp[i][j + 1][1], dp[i][j][0] - prices[i]);\n            }\n        }\n\n        return dp[n][k][0];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#309","title":"309. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u51b7\u51bb\u671f","text":"<p>\u4e70\u5356\u80a1\u7968 + \u6253\u5bb6\u52ab\u820d\uff0c\u4ece\u672a\u6301\u6709\u80a1\u7968\u8f6c\u79fb\u5230\u5f53\u524d\u6301\u6709\u80a1\u7968\u7684\u72b6\u6001\uff0c\u53ea\u80fd\u4ece\u524d\u5929\u8f6c\u79fb\u8fc7\u6765</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int n = prices.length;\n\n        int[][] dp = new int[n + 2][2];\n\n        dp[0][1] = dp[1][1] = Integer.MIN_VALUE;\n\n        for(int i = 0; i &lt; n; i ++) {\n            dp[i + 2][0] = Math.max(dp[i + 1][0], dp[i + 1][1] + prices[i]);\n            dp[i + 2][1] = Math.max(dp[i + 1][1], dp[i][0] - prices[i]);\n        }\n\n        return dp[n + 1][0];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#714","title":"714. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39","text":"<p>\u5728\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e2d\u8003\u8651\u5356\u80a1\u7968\u65f6\u7684\u624b\u7eed\u8d39\uff08\u4e70 + \u5356 \u7b97\u4e00\u6b21\u4ea4\u6613\uff09</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices, int fee) {\n        int n = prices.length;\n\n        int[][] dp = new int[n + 1][2];\n\n        dp[0][1] = Integer.MIN_VALUE / 2;\n\n        int count = 0;\n        for(int i = 0; i &lt; n; i ++) {\n            dp[i + 1][0] = Math.max(dp[i][0], dp[i][1] + prices[i] - fee);\n            dp[i + 1][1] = Math.max(dp[i][1], dp[i][0] - prices[i]);\n        }\n\n        return dp[n][0];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#300","title":"300. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217","text":"<p>dp\u76f8\u5f53\u4e8e\u66b4\u529b\uff0c\u4e24\u91cd\u5faa\u73af\uff0c\u4ece [0, i - 1] \u5bfb\u627e\u5c0f\u4e8e nums[i] \u7684\u6570\uff0c\u5e76\u4ece\u8fd9\u4e9b\u6570\u66f4\u65b0 dp[i] \u80fd\u5426\u4f7f\u5f97 dp[i] \u66f4\u5927</p> <pre><code>class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n = nums.length;\n\n        int[] dp = new int[n + 1];\n\n        Arrays.fill(dp, 1);\n        dp[0] = 0;\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; i; j ++) {\n                if(nums[i] &gt; nums[j]) {\n                    dp[i + 1] = Math.max(dp[j + 1] + 1, dp[i + 1]);\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i &lt; n; i ++) {\n            ans = Math.max(ans, dp[i + 1]);\n        }\n\n        return ans;\n    }\n}\n</code></pre> <p>\u8d2a\u5fc3 + \u4e8c\u5206\uff1a \u6839\u636e\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u76f8\u540c\u957f\u5ea6\u7684\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u5982\u679c\u5176\u7ed3\u5c3e\u7684\u6570\u8d8a\u5c0f\uff0c\u90a3\u4e48\u5176\u6269\u5c55\u7684\u53ef\u80fd\u6027\u8d8a\u5927\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6784\u9020\u4e00\u4e2a\u6570\u7ec4g[]\uff0c \u8fd9\u4e2a\u6570\u7ec4\u4fdd\u8bc1\u4e86\u904d\u5386\u5230\u5f53\u524d\u4f4d\u7f6e\uff0c\u5728\u56fa\u5b9a\u957f\u5ea6\u65f6\uff0c\u5176\u6570\u7ec4\u7684\u7ed3\u5c3e\u6570\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e\u5176\u4ed6\u5b50\u5e8f\u5217\u6570\u7ec4</p> <pre><code>class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int n = nums.length;\n\n        int[] g = new int[n];\n        int glen = 0;\n\n        for(int i = 0; i &lt; n; i ++) {\n            int x = nums[i];\n\n            int l = 0, r = glen;\n            while(l &lt; r) {\n                int mid = (l + r) &gt;&gt; 1;\n                if(g[mid] &gt;= x) r = mid;\n                else l = mid + 1; \n            } \n\n            if(l == glen) {\n                g[glen ++] = x;\n            } else {\n                g[l] = x;\n            }\n        }\n\n        return glen;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#674","title":"674. \u6700\u957f\u8fde\u7eed\u9012\u589e\u5e8f\u5217","text":"<p>\u53cc\u6307\u9488</p> <pre><code>class Solution {\n    public int findLengthOfLCIS(int[] nums) {\n        int n = nums.length;\n\n        int ans = 0;\n\n        for(int i = 0, j = 0; i &lt; n; i ++) {\n\n            if(i + 1 &lt; n &amp;&amp; nums[i + 1] &gt; nums[i]) {\n                continue;\n            }    \n\n            ans = Math.max(ans, i - j + 1);\n            j = i + 1;\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#718","title":"718. \u6700\u957f\u91cd\u590d\u5b50\u6570\u7ec4","text":"<p>\u53ea\u5728 nums1[i] == nums2[j] \u7684\u65f6\u5019\u66f4\u65b0dp\u6570\u7ec4</p> <pre><code>class Solution {\n    public int findLength(int[] nums1, int[] nums2) {\n        int n = nums1.length;\n        int m = nums2.length;\n\n        int[][] dp = new int[n + 1][m + 1];\n\n\n        int ans = 0;\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                if(nums1[i] == nums2[j]) {\n                    dp[i + 1][j + 1] = dp[i][j] + 1;\n                    ans = Math.max(dp[i + 1][j + 1], ans);\n                } \n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1143","title":"1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":"<p>\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u6a21\u677f</p> <pre><code>class Solution {\n    public int longestCommonSubsequence(String text1, String text2) {\n        int n = text1.length();\n        int m = text2.length();\n\n        int[][] dp = new int[n + 1][m + 1];\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                dp[i + 1][j + 1] = Math.max(dp[i][j + 1], dp[i + 1][j]);\n                if(text1.charAt(i) == text2.charAt(j)) {\n                    dp[i + 1][j + 1] = Math.max(dp[i + 1][j + 1], dp[i][j] + 1);\n                }\n            }\n        }\n\n        return dp[n][m];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#1035","title":"1035. \u4e0d\u76f8\u4ea4\u7684\u7ebf","text":"<p>\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u6a21\u677f</p> <pre><code>class Solution {\n    public int maxUncrossedLines(int[] nums1, int[] nums2) {\n        int n = nums1.length;\n        int m = nums2.length;\n\n        int[][] dp = new int[n + 1][m + 1];\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                dp[i + 1][j + 1] = Math.max(dp[i][j + 1], dp[i + 1][j]);\n                if(nums1[i] == nums2[j]) {\n                    dp[i + 1][j + 1] = Math.max(dp[i][j] + 1, dp[i + 1][j + 1]);\n                }\n            }\n        }\n\n        return dp[n][m];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#53","title":"53. \u6700\u5927\u5b50\u6570\u7ec4\u548c","text":"<p>\u5982\u679c\u5f53\u524d\u503c\u5c0f\u4e8e0\u5219\u65ad\u6389\u4e4b\u524d\u7684\u548c\uff0c\u4ece\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb</p> <pre><code>class Solution {\n    public int maxSubArray(int[] nums) {\n        int n = nums.length;\n\n        int[] dp = new int[n + 1];\n\n        int ans = Integer.MIN_VALUE;\n        for(int i = 0; i &lt; n; i ++) {\n            dp[i + 1] = Math.max(0, dp[i]) + nums[i];\n            ans = Math.max(ans, dp[i + 1]);\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#392","title":"392. \u5224\u65ad\u5b50\u5e8f\u5217","text":"<p>\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217</p> <pre><code>class Solution {\n    public boolean isSubsequence(String s, String t) {\n        int n = s.length();\n        int m = t.length();\n\n        int[][] dp = new int[n + 1][m + 1];\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                dp[i + 1][j + 1] = Math.max(dp[i][j + 1], dp[i + 1][j]);\n                if(s.charAt(i) == t.charAt(j)) {\n                    dp[i + 1][j + 1] = Math.max(dp[i + 1][j + 1], dp[i][j] + 1);\n                }\n            }\n        }\n\n        return dp[n][m] == n;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#583","title":"583.\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5220\u9664\u64cd\u4f5c","text":"<p>\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u6a21\u677f</p> <pre><code>class Solution {\n    public int minDistance(String word1, String word2) {\n        int n = word1.length();\n        int m = word2.length();\n\n        int[][] dp = new int[n + 1][m + 1];\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                dp[i + 1][j + 1] = Math.max(dp[i + 1][j], dp[i][j + 1]);\n                if(word1.charAt(i) == word2.charAt(j)) {\n                    dp[i + 1][j + 1] = Math.max(dp[i + 1][j + 1], dp[i][j] + 1);\n                }\n            }\n        }\n\n        return n + m - 2 * dp[n][m];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#72","title":"72. \u7f16\u8f91\u8ddd\u79bb","text":"<p>\\(dp[i][j]\\) \u4ee3\u8868 \\(word1.substring(1,i+1)\\) \u8f6c\u6362\u5230 \\(word2.substring(1,j+1)\\) \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570</p> <p>\u90a3\u4e48\u5bf9\u5e94\u7684\u4e09\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li> <p>\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26\uff1a\\(dp[i][j] = dp[i][j - 1]+1\\)</p> </li> <li> <p>\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\uff1a\\(dp[i][j] = dp[i - 1][j]+1\\)</p> </li> <li> <p>\u66ff\u6362\u4e00\u4e2a\u5b57\u7b26\uff1a\\(dp[i][j] = dp[i - 1][j - 1]+1\\)</p> </li> </ul> <p>\u6240\u4ee5\u53ef\u4ee5\u77e5\u9053\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff1a</p> \\[dp[i][j] =  \\begin{cases} dp[i - 1][j - 1], &amp; word1[i]=word2[j] \\\\ \\\\ min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])+1, &amp; word1[i] \\neq word2[j] \\end{cases} \\] <pre><code>class Solution {\n    public int minDistance(String word1, String word2) {\n        int n = word1.length();\n        int m = word2.length();\n\n        int[][] dp = new int[n + 1][m + 1];\n\n        for(int i = 0; i &lt;= n; i ++) {\n            dp[i][0] = i;\n        }\n\n        for(int i = 0; i &lt;= m; i ++) {\n            dp[0][i] = i;\n        }\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                if(word1.charAt(i) == word2.charAt(j)) {\n                    dp[i + 1][j + 1] = dp[i][j];\n                } else {\n                    dp[i + 1][j + 1] = Math.min(dp[i + 1][j], Math.min(dp[i][j + 1], dp[i][j])) + 1;\n                }\n            }\n        }\n\n\n        return dp[n][m];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#647","title":"647. \u56de\u6587\u5b50\u4e32","text":"<p>\u5b9a\u4e49\u72b6\u6001\u6570\u7ec4 \\(dp[i][j]\\) \u8868\u793a\u4e0b\u6807 i ~ j \u5b50\u4e32\u662f\u5426\u662f\u4e00\u4e2a\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u53ef\u4ee5\u60f3\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a</p> \\[dp[i][j] =  \\begin{cases} true, &amp; i=j \\\\ \\\\ s[i]==s[j], &amp; i + 1 = j \\\\ \\\\ s[i]==s[j] \\&amp;\\&amp; dp[i + 1][j - 1], &amp; i + 1 &lt; j \\end{cases} \\] <pre><code>class Solution {\n    public int countSubstrings(String s) {\n        int n = s.length();\n\n        boolean[][] ishui = new boolean[n + 1][n + 1];\n\n        int ans = 0;\n\n        for(int i = n - 1; i &gt;= 0; i --) {\n            for(int j = i; j &lt; n; j ++) {\n                if(i == j) {\n                    ishui[i][j] = true;\n                } else if(j == i + 1) {\n                    ishui[i][j] = s.charAt(i) == s.charAt(j);\n                } else {\n                    ishui[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; ishui[i + 1][j - 1];\n                }\n\n                if(ishui[i][j]) {\n                    ans ++;\n                }\n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/#516","title":"516. \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217","text":"<p>\\(dp[i][j]\\) \u4ee3\u8868\u4e0b\u6807\u4ece i \u5230 j \u7684\u5b50\u4e32\u7684\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u4e8c\u7ef4dp\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u53d1\u73b0\u4e00\u4e9b\u89c4\u5f8b\u4e86\uff0c\u9996\u5148\u5224\u65ad\u7684\u65f6\u5019\u53ef\u4ee5\u5206\u4e3a \u7b49\u4e8e\u548c\u4e0d\u7b49\u4e8e\uff0c\u601d\u8003\u5b57\u7b26\u76f8\u7b49\u7684\u65f6\u5019\u8f6c\u79fb\u65b9\u7a0b\u662f\u4ec0\u4e48\uff0c\u4e0d\u7b49\u7684\u65f6\u5019\u8f6c\u79fb\u65b9\u7a0b\u662f\u4ec0\u4e48\uff0c\u53ef\u4ee5\u5f97\u5230\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b</p> \\[dp[i][j] =  \\begin{cases} max(dp[i + 1][j], dp[i][j - 1]), &amp; s[i] \\neq s[j] \\\\ \\\\ dp[i+1][j-1] + 2, &amp; s[i] = s[j] \\end{cases} \\] <p>\u6839\u636e\u4e0a\u4e00\u9898\u7684\u57fa\u7840\u53ef\u4ee5\u77e5\u9053\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u7684\u5b9a\u4e49</p> <pre><code>class Solution {\n    public int longestPalindromeSubseq(String s) {\n        int n = s.length();\n\n        int[][] dp = new int[n + 1][n + 1];\n\n        for(int i = n - 1; i &gt;= 0; i --) {\n            for(int j = i; j &lt; n; j ++) {\n                if(i == j) {\n                    dp[i][j] = 1;\n                } else if(i + 1 == j) {\n                    dp[i][j] = s.charAt(i) == s.charAt(j) ? 2 : 1;\n                } else {\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);            \n                    if(s.charAt(i) == s.charAt(j)) {\n                        dp[i][j] = dp[i + 1][j - 1] + 2;\n                    }\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%8D%95%E8%B0%83%E6%A0%88/","title":"\u5355\u8c03\u6808","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/","title":"\u54c8\u5e0c\u8868","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#_2","title":"\u54c8\u5e0c\u8868\u7406\u8bba\u57fa\u7840","text":"<p>\u54c8\u5e0c\u8868\u7684\u76ee\u7684\u662f\u964d\u4f4e\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u4f8b\u5982\u5982\u679c\u4e00\u4e2a\u4efb\u52a1\u7684\u9700\u6c42\uff0c\u9700\u8981\u6211\u4eec\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\u53cd\u590d\u67e5\u627e\u67d0\u4e2a\u7ed9\u5b9a\u7684\u6570 \\(x\\) \u51fa\u73b0\u4e86\u51e0\u6b21\uff0c\u90a3\u4e48\u53ef\u4ee5\u5f00\u4e00\u4e2a\u6570\u7ec4\uff0c\u4ee5\u6570\u7ec4\u4e0b\u6807\u5bf9\u5e94\u503c \\(x\\) \uff0c\u6570\u7ec4\u7684\u503c\u5bf9\u5e94\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u8fd9\u6837\u5c31\u8bb0\u5f55\u5b8c\u4e86\u6574\u4e2a\u6570\u7ec4\u4e2d\u5404\u4e2a\u6570\u503c\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u5728\u8fd9\u4e0a\u4e2a\u4f8b\u5b50\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6ca1\u6709\u7528\u5230\u54c8\u5e0c\u51fd\u6570\uff0c\u6216\u8005\u8bf4\u54c8\u5e0c\u51fd\u6570\u7684\u6620\u5c04\u5c31\u662f\u81ea\u5df1\u3002\u5f53\u6211\u4eec\u8981\u8bb0\u5f55\u7684\u503c\u4e0d\u662f\u6570\u5b57\uff0c\u800c\u662f\u5b57\u7b26\uff0c\u6216\u8005\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u9700\u8981\u7528\u5230\u54c8\u5e0c\u51fd\u6570\u4e86\u3002\u6bd4\u5982\u6709\u4e00\u4e2a\u8bb0\u5f55\u4e86\u6240\u6709\u540c\u5b66\u540d\u5b57\uff08\u5047\u8bbe\u540d\u5b57\u5404\u4e0d\u76f8\u540c\uff09\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u73b0\u5728\u9700\u8981\u4f60\u5c06\u8fd9\u4e9b\u540d\u5b57\u5168\u90e8\u8bb0\u5f55\u5230\u54c8\u5e0c\u8868\u4e2d\uff0c\u6b64\u65f6\u6211\u4eec\u5c31\u9700\u8981\u4f7f\u7528\u54c8\u5e0c\u51fd\u6570\u8fdb\u884c\u6620\u5c04\uff0c\u5f97\u5230\u4e00\u4e2a\u6570\u503c\u3002</p> <p>\u4f46\u6ce8\u610f\uff0c\u54c8\u5e0c\u8868\u7684\u67e5\u627e\u6b21\u6570\u5e76\u4e0d\u662f\u6bcf\u6b21\u90fd\u662f \\(1\\) \u6b21\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u503c\u53ef\u80fd\u88ab\u54c8\u5e0c\u51fd\u6570\u6620\u5c04\u5230\u76f8\u540c\u7684\u6570\u503c\u4e0a\uff0c\u5373\u53d1\u751f\u54c8\u5e0c\u78b0\u649e\u3002\u4e3a\u4e86\u89e3\u51b3\u54c8\u5e0c\u78b0\u649e\uff08\u4f8b\u5982\u4f7f\u7528\u7ebf\u6027\u63a2\u6d4b\u6cd5\u3001\u62c9\u94fe\u6cd5\uff09\uff0c\u4f1a\u4f7f\u5f97\u67e5\u627e\u7684\u6b21\u6570\u53d8\u591a\u3002\u4f46\u662f\u54c8\u5e0c\u8868\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u5e76\u4e0d\u76f4\u63a5\u4f9d\u8d56\u4e8e\u6570\u636e\u5927\u5c0f\uff0c\u4e3a \\(O(1)\\) </p>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#242","title":"242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<pre><code>class Solution {\n    public boolean isAnagram(String s, String t) {\n        if(s.length() != t.length()) {\n            return false;\n        }\n\n        char[] cnt = new char[26];\n\n        for(char x : s.toCharArray()) {\n            cnt[x - 'a'] ++;\n        }\n\n        for(char x : t.toCharArray()) {\n            cnt[x - 'a'] --;\n        }\n\n        for(int x : cnt) {\n            if(x != 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#383","title":"383. \u8d4e\u91d1\u4fe1","text":"<pre><code>class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        int[] cnt = new int[26];\n\n        for(var x : magazine.toCharArray()) {\n            cnt[x - 'a'] ++;\n        }\n\n        for(var x : ransomNote.toCharArray()) {\n            cnt[x - 'a'] --;\n            if(cnt[x - 'a'] &lt; 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#49","title":"49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4","text":"<pre><code>import java.util.*;\n\nclass Solution {\n    public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) {\n        Map&lt;String, List&lt;String&gt;&gt; collect = new HashMap&lt;&gt;();\n\n        for(String x : strs) {\n            char[] tempChar = x.toCharArray();\n            Arrays.sort(tempChar);\n            String temp = new String(tempChar);\n\n            if(!collect.containsKey(temp)) {\n                collect.put(temp, new ArrayList&lt;&gt;());  \n            } \n            collect.get(temp).add(x);\n        }\n\n        List&lt;List&lt;String&gt;&gt; ans = new ArrayList&lt;&gt;();\n\n        for(List&lt;String&gt; t : collect.values()) {\n            ans.add(t);\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#438","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>\u5b9a\u957f\u6ed1\u52a8\u7a97\u53e3+\u54c8\u5e0c\u8868</p> <p>\u9996\u5148\u6211\u4eec\u9700\u8981\u77e5\u9053\uff0c\u8981\u600e\u4e48\u5224\u65ad\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u5f02\u4f4d\u8bcd\u5462\uff1f\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u60f3\u5230\u7528\u4e24\u4e2a\u54c8\u5e0c\u8868\uff0c\u5206\u522b\u8bb0\u5f55\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e2d\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u7136\u540e\u518d\u6bd4\u8f83\u4e24\u4e2a\u54c8\u5e0c\u8868\u4e2d\u76f8\u540c\u952e\u5bf9\u5e94\u7684\u503c\u662f\u5426\u76f8\u7b49\u3002</p> <p>\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\u6211\u4eec\u662f\u5426\u9700\u8981\u628a\uff0c\u4e32 \\(s\\) \u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e32\u90fd\u53d6\u51fa\u6765\uff0c\u7136\u540e\u7edf\u8ba1\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\uff0c\u518d\u4e0e\u4e32 \\(p\\) \u7684\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u6bd4\u8f83\u7684\u5462\uff1f\u7b54\u6848\u662f\u5e76\u4e0d\u9700\u8981\u3002\u53ef\u4ee5\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u6765\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(p.length()\\) \u7684\u7a97\u53e3\uff0c\u6211\u4eec\u53ea\u7edf\u8ba1\u843d\u5728\u7a97\u53e3\u5185\u7684\u5b57\u6bcd\u51fa\u73b0\u6b21\u6570\uff0c\u5728\u6bd4\u8f83\u5b8c\u662f\u5426\u4e3a\u5f02\u4f4d\u8bcd\u540e\uff0c\u7a97\u53e3\u5411\u540e\u6ed1\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fdb\u5165\u7a97\u53e3\u7684\u5b57\u6bcd\u6b21\u6570\u52a0 \\(1\\)\uff0c\u4ece\u7a97\u53e3\u51fa\u53bb\u7684\u5b57\u6bcd\u6b21\u6570\u51cf \\(1\\) \u3002</p> <pre><code>import java.util.*;\nclass Solution {\n    public List&lt;Integer&gt; findAnagrams(String s, String p) {\n        int[] cnts = new int[26];\n        int[] cntp = new int[26];\n\n        int m = p.length();\n        for(int i = 0; i &lt; m; i ++) {\n            cntp[p.charAt(i) - 'a'] ++;\n        }\n\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n\n        for(int i = 0, j = 0; i &lt; s.length(); i ++) {\n            cnts[s.charAt(i) - 'a'] ++;\n            if(i - j + 1 == m) {\n                if(check(cnts, cntp)) {\n                    ans.add(j);\n                }\n                cnts[s.charAt(j) - 'a'] --;\n                j ++;\n            }\n        }\n        return ans;\n    }\n\n    public boolean check(int[] cnts, int[] cntp) {\n        for(int i = 0; i &lt; 26; i ++) {\n            if(cnts[i] != cntp[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#349","title":"349. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6","text":"<p>\u7528\u4e00\u4e2a\u54c8\u5e0c\u8868\u8bb0\u5f55\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u5185\u5bb9\uff0c\u518d\u68c0\u67e5\u53e6\u4e00\u4e2a\u6570\u7ec4\u662f\u5426\u6709\uff0c\u6709\u7684\u8bdd\u5c31\u628a\u76f8\u540c\u7684\u52a0\u5165\u5230\u4e00\u4e2a \\(set\\) \u96c6\u5408\u4e2d\uff0c\u6700\u540e\u4f7f\u7528</p> <pre><code>set.stream().mapToInt(Integer::intValue).toArray()\n</code></pre> <p>\u628a \\(set\\) \u8f6c\u5316\u4e3a \\(int\\) \u6570\u7ec4</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        boolean[] cnt1 = new boolean[1001];\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n\n        for(int x : nums1) {\n            cnt1[x] = true;\n        }        \n        for(int x : nums2) {\n            if(cnt1[x]) {\n                set.add(x);\n            }\n        }\n\n        int[] ans = set.stream().mapToInt(Integer::intValue).toArray();\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#350-ii","title":"350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II","text":"<p>\u7528\u4e24\u4e2a\u54c8\u5e0c\u8868\u5206\u522b\u7edf\u8ba1\u4e24\u4e2a\u6570\u7ec4\u4e2d\u6570\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6bd4\u8f83\u4e24\u4e2a\u54c8\u5e0c\u8868\u6bcf\u4e2a\u6570\u503c\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5982\u679c\u5728\u4e24\u4e2a\u54c8\u5e0c\u8868\u4e2d\u6570\u503c \\(x\\) \u51fa\u73b0\u6b21\u6570\u90fd\u5927\u4e8e \\(0\\) \uff0c\u5219\u53d6\u4e24\u8005\u51fa\u73b0\u6b21\u6570\u7684\u8f83\u5c0f\u503c\u4f5c\u4e3a\u6b21\u6570\u8bb0\u4f5c \\(times\\) \uff0c\u628a \\(x\\) \u52a0\u5165\u7b54\u6848 \\(times\\) \u6b21\u3002</p> <pre><code>import java.util.*;\nclass Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        int[] cnt1 = new int[1001];\n        int[] cnt2 = new int[1001];\n\n        for(int x : nums1) {\n            cnt1[x] ++;\n        }\n        for(int x : nums2) {\n            cnt2[x] ++;\n        }\n\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n\n        for(int i = 0; i &lt;= 1000; i ++) {\n            if(cnt1[i] != 0 &amp;&amp; cnt2[i] != 0) {\n                int times = Math.min(cnt1[i], cnt2[i]);\n                for(int k = 0; k &lt; times; k ++) {\n                    ans.add(i);\n                }        \n            }\n        }\n\n        return ans.stream().mapToInt(Integer::intValue).toArray();\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#202","title":"202. \u5feb\u4e50\u6570","text":"<p>\u7528\u4e00\u4e2a\u54c8\u5e0c\u8868\u5b58\u50a8\u8fbe\u5230\u8fc7\u7684\u503c\uff0c\u5224\u65ad\u5728\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u6709\u6ca1\u6709\u9677\u5165\u5230\u5faa\u73af\u4e2d</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public boolean isHappy(int n) {\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        int m = n;\n\n        while(true) {\n            m = getsum(m);\n            if(m == 1) return true;\n            if(set.contains(m)) return false;\n\n            set.add(m);\n        }\n    }\n\n    int getsum(int m) {\n        int ans = 0;\n        while(m &gt; 0) {\n            ans += (m % 10) * (m % 10);\n            m /= 10;\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#1","title":"1. \u4e24\u6570\u4e4b\u548c","text":"<p>\u679a\u4e3e\u53f3\uff0c\u7ef4\u62a4\u5de6</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map&lt;Integer, Integer&gt; cnt = new HashMap&lt;&gt;();\n\n        for(int i = 0; i &lt; nums.length; i ++) {\n            if(cnt.containsKey(target - nums[i])) {\n                return new int[]{cnt.get(target - nums[i]), i};\n            }\n            cnt.put(nums[i], i);\n        }\n\n        return new int[]{-1, -1};\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#454-ii","title":"454. \u56db\u6570\u76f8\u52a0 II","text":"<p>\u5148\u4e24\u91cd\u5faa\u73af\u7edf\u8ba1\u4e24\u4e2a\u6570\u7684\u548c\u8bb0\u5f55\uff0c\u7136\u540e\u518d\u904d\u5386\u53e6\u5916\u4e24\u4e2a\u6570\u7ec4\uff0c\u770b\u80fd\u4e0d\u80fd\u5f97\u5230\u54c8\u5e0c\u8868\u4e2d\u8bb0\u5f55\u7684\u76f8\u53cd\u6570</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {\n        Map&lt;Integer,Integer&gt; cnt = new HashMap&lt;&gt;();\n\n        for(int i = 0; i &lt; nums1.length; i ++) {\n            for(int j = 0; j &lt; nums2.length; j ++) {\n                int t = nums1[i] + nums2[j];\n                cnt.merge(t, 1, Integer::sum);\n            }\n        }\n\n        int ans = 0;\n\n        for(int i = 0; i &lt; nums3.length; i ++) {\n            for(int j = 0; j &lt; nums4.length; j ++) {\n                int t = nums3[i] + nums4[j];\n                ans += cnt.getOrDefault(-t, 0);        \n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#383_1","title":"383. \u8d4e\u91d1\u4fe1","text":"<p>\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570</p> <pre><code>class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        int[] cnt = new int[26];\n\n        for(var x : magazine.toCharArray()) {\n            cnt[x - 'a'] ++;\n        }\n\n        for(var x : ransomNote.toCharArray()) {\n            cnt[x - 'a'] --;\n            if(cnt[x - 'a'] &lt; 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%93%88%E5%B8%8C%E8%A1%A8/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<p>\u5148\u56fa\u5b9a\u4e00\u4e2a\u6570\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u4f7f\u7528\u53cc\u6307\u9488\u786e\u5b9a\u53e6\u5916\u4e24\u4e2a\u6570\u7684\u4f4d\u7f6e</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {\n        int n = nums.length;\n\n        Arrays.sort(nums);\n\n        List&lt;List&lt;Integer&gt;&gt; ans = new ArrayList&lt;&gt;();\n\n        for(int i = 0; i &lt; n; i ++) {\n            if(i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) {\n                continue;\n            }\n            int l = i + 1, r = n - 1;\n            while(l &lt; r) {\n                int sum = nums[i] + nums[l] + nums[r];\n                if(sum == 0) {\n                    ans.add(new ArrayList&lt;&gt;(Arrays.asList(nums[i], nums[l], nums[r])));\n                    while(l &lt; r &amp;&amp; nums[l] == nums[l + 1]) l ++;\n                    while(l &lt; r &amp;&amp; nums[r] == nums[r - 1]) r --;\n                    l ++;\n                    r --;\n                } else if(sum &gt; 0) {\n                    r --;\n                } else {\n                    l ++;\n                }\n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/","title":"\u56de\u6eaf\u7b97\u6cd5","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#77","title":"77. \u7ec4\u5408","text":"<p>\u5bf9\u4e8e\u5f53\u524d\u7684\u6570 n \u53ea\u6709\u4e24\u79cd\u9009\u62e9\uff0c\u9009\u6216\u8005\u4e0d\u9009\u3002\u5047\u8bbe\u5f53\u524d\u4e00\u4e2a\u6570\u90fd\u8fd8\u6ca1\u9009</p> <ul> <li>\u5982\u679c\u5f53\u524d\u6570 n \u88ab\u9009\u4e86\uff0c\u90a3\u4e48\u5c31\u4ece\u524d n - 1 \u4e2a\u6570\u4e2d\u9009 k - 1 \u4e2a\u6570</li> <li>\u5982\u679c\u5f53\u524d\u6570 n \u6ca1\u88ab\u9009\uff0c\u90a3\u4e48\u5c31\u4ece\u524d n - 1 \u4e2a\u6570\u4e2d\u9009 k \u4e2a\u6570</li> </ul> <pre><code>class Solution {\n    List&lt;List&lt;Integer&gt;&gt; ans;\n    public List&lt;List&lt;Integer&gt;&gt; combine(int n, int k) {\n        ans = new ArrayList&lt;&gt;();\n\n        dfs(n, k, new ArrayList&lt;&gt;());\n\n        return ans;\n    }\n\n    public void dfs(int n, int k, List&lt;Integer&gt; temp) {\n        if(n &lt; 1) {\n            if(k == 0) {\n                ans.add(new ArrayList&lt;&gt;(temp));\n                return;\n            }\n            return;\n        }\n\n        dfs(n - 1, k, temp);\n\n        temp.add(n);\n        dfs(n - 1, k - 1, temp);\n        temp.remove(temp.size() - 1);\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#216-iii","title":"216. \u7ec4\u5408\u603b\u548c III","text":"<p>\u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u540c\u6837\u8003\u8651\u5f53\u524d\u7684\u6570\u662f\u9009\u8fd8\u662f\u4e0d\u9009\uff0c\u4e0d\u8fc7\u8fd9\u9898\u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u8981\u8003\u8651 sum == n</p> <pre><code>class Solution {\n    private List&lt;List&lt;Integer&gt;&gt; ans;\n    private boolean[] st;\n    private int n;\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum3(int k, int n) {\n        this.ans = new ArrayList&lt;&gt;();\n        this.st = new boolean[10];\n        this.n = n;\n        dfs(k, 0, new ArrayList&lt;&gt;());\n\n        return ans;\n    }\n\n    public void dfs(int k, int sum, List&lt;Integer&gt; temp) {\n        if(sum &gt; n) {\n            return;\n        }\n\n\n        if(k == 0 &amp;&amp; sum == n) {\n            ans.add(new ArrayList&lt;&gt;(temp));\n            return;\n        }\n\n        for(int i = 1; i &lt;= 9; i ++) {\n            if(!st[i] &amp;&amp; (temp.size() == 0 || temp.get(temp.size() - 1) &lt; i)) {\n                st[i] = true;\n                temp.add(i);\n                dfs(k - 1, sum + i, temp);\n                temp.remove(temp.size() - 1);\n                st[i] = false;\n            }        \n        }\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408","text":"<p>\u9884\u5148\u5efa\u7acb\u6570\u5b57\u4e0e\u5b57\u7b26\u4e32\u7684\u6620\u5c04\uff0c\u7136\u540e\u901a\u8fc7\u9012\u5f52\uff0c\u4ece\u6bcf\u4e00\u4e2a\u6570\u5b57\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32\u4e2d\u9009\u51fa\u4e00\u4e2a\u6570\uff0c\u7ec4\u6210\u4e00\u4e2a\u7b54\u6848\u3002\u5728\u9012\u5f52\u56de\u6eaf\u7684\u8fc7\u7a0b\u4e2d\u53c8\u4f1a\u53d1\u73b0\u5176\u4ed6\u7b54\u6848\u3002Java\u4f7f\u7528StringBuilder\u6765\u8fdb\u884c\u5b57\u7b26\u4e32\u62fc\u63a5\u6548\u7387\u80fd\u9ad8\u5f88\u591a\u3002</p> <p>StringBuilder \u62fc\u63a5\u5b57\u7b26\u4e32\u6bd4 String \u9ad8\u6548\u7684\u539f\u56e0\uff1a</p> <p>String\u62fc\u63a5\uff1a</p> <ul> <li>String\u672c\u8eab\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5f53\u8981\u5bf9String\u8fdb\u884c\u62fc\u63a5\u7684\u65f6\u5019\uff0c\u4f1a\u91cd\u65b0 new \u4e00\u4e2a String\uff0c\u628a\u539f\u6765\u7684\u5b57\u7b26\u4e32\u548c\u8981\u62fc\u63a5\u7684\u5b57\u7b26\u4e32\u653e\u5230\u8fd9\u4e2a\u65b0new\u7684String\u91cc\u9762\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u5927\u91cf\u7684\u5185\u5b58\u5206\u914d\u548c\u590d\u5236\u64cd\u4f5c</li> </ul> <p>StringBuilder\u62fc\u63a5\uff1a</p> <ul> <li>StringBuilder\u662f\u53ef\u53d8\u7684\uff0c\u5b83\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5185\u90e8\u53ef\u53d8\u7684\u5b57\u7b26\u6570\u7ec4\uff0c\u4e0d\u4f1a\u9891\u7e41\u7684\u521b\u5efa\u65b0\u5bf9\u8c61\uff0c\u5927\u5927\u51cf\u5c11\u4e86\u5185\u5b58\u5206\u914d\u548c\u6570\u636e\u590d\u5236\u7684\u5f00\u9500</li> </ul> <pre><code>class Solution {\n    private static String[] map;\n    static {\n        map = new String[]{\"0\", \"1\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    }\n\n    private List&lt;String&gt; ans;\n    private String digits;\n\n    public List&lt;String&gt; letterCombinations(String digits) {\n        this.digits = digits;\n        this.ans = new ArrayList&lt;&gt;();\n        dfs(0, new StringBuilder());    \n        return ans;\n    }\n\n    public void dfs(int i, StringBuilder str) {\n        if(i &gt;= digits.length()) {\n            if(str != null &amp;&amp; str.length() != 0) {\n                ans.add(str.toString());\n            }\n            return;\n        }\n\n        int num = digits.charAt(i) - '0';\n\n        for(char c : map[num].toCharArray()) {\n            str.append(c);\n            dfs(i + 1, str);\n            str.deleteCharAt(str.length() - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#39","title":"39. \u7ec4\u5408\u603b\u548c","text":"<p>\u9012\u5f52\u56de\u6eaf\u7684\u8fc7\u7a0b\u662f\u4e00\u9897\u6811\uff0c\u8fd9\u9897\u6811\u7684\u5206\u652f\u6570\u548c candidates \u6570\u7ec4\u7684\u957f\u5ea6\u4e00\u6837\uff0c\u6bcf\u9012\u5f52\u5230\u4e00\u5c42\u5c31\u4f1a\u6709 candidates.length \u7684\u9009\u62e9\u673a\u4f1a\u3002\u4e3a\u4e86\u4fdd\u8bc1\u9009\u51fa\u6765\u7684\u7ec4\u5408\u6ca1\u6709\u91cd\u590d\uff0c\u9996\u5148\u5bf9\u6570\u7ec4\u6392\u5e8f\uff0c\u7136\u540e\u9009\u62e9\u7684\u65f6\u5019\u53ea\u9009\u62e9\u6bd4\u4e0a\u4e00\u4e2a\u6570\u5927\u7684\u6570\u3002\u4e3a\u4e86\u51cf\u5c11\u9012\u5f52\u6b21\u6570\uff0c\u8fdb\u884c\u526a\u679d\uff0c\u5f53\u76ee\u524d\u7d2f\u8ba1\u7684\u548c\u52a0\u4e0a\u9009\u4e2d\u7684 canaidates[i] \u8981\u5927\u4e8e target \u7684\u65f6\u5019\uff0c\u505c\u6b62\u904d\u5386\u6570\u7ec4\u3002</p> <pre><code>class Solution {\n    private int[] candidates;\n    private int target;\n    private List&lt;List&lt;Integer&gt;&gt; ans;\n\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] candidates, int target) {\n        this.candidates = candidates;\n        this.target = target;\n        this.ans = new ArrayList&lt;&gt;();\n\n        Arrays.sort(candidates);    \n\n        dfs(0, new ArrayList&lt;Integer&gt;());\n\n        return ans;\n    }\n\n    public void dfs(int sum, List&lt;Integer&gt; temp) {\n        if(sum == target) {\n            ans.add(new ArrayList&lt;Integer&gt;(temp));\n            return;\n        }\n\n        for(int i = 0; i &lt; candidates.length; i ++) {\n            if(sum + candidates[i] &gt; target) {\n                break;\n            }\n\n            if(temp.size() == 0 || temp.get(temp.size() - 1) &lt;= candidates[i]) {\n                temp.add(candidates[i]);\n                dfs(sum + candidates[i], temp);\n                temp.removeLast();\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#40-ii","title":"40. \u7ec4\u5408\u603b\u548c II","text":"<p>\u6240\u6709\u7684\u4faf\u9009\u6570\u4e2d\u6709\u76f8\u540c\u7684\u6570\uff0c\u4e14\u5728\u4e00\u79cd\u7ec4\u5408\u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u53ea\u80fd\u9009\u4e00\u6b21\u3002\u5bf9\u4e8e\u5982\u4f55\u9009\u51fa\u548c\u4e3a target \u7684\u7ec4\u5408\u8fd9\u4e0d\u662f\u4e00\u4ef6\u96be\u4e8b\uff0c\u5173\u952e\u5728\u4e8e\u53bb\u91cd\u3002</p> <p>\u9996\u5148\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u901a\u8fc7\u9012\u5f52\u9009\u6570\u7684\u65b9\u5f0f\u9009\u51fa\u4e00\u4e2a\u548c\u4e3a target \u7684\u7ec4\u5408\uff0c\u9012\u5f52\u7684\u7ec8\u6b62\u6761\u4ef6\u5c31\u662f\u5224\u65ad\u548c\u662f\u5426\u7b49\u4e8e target\u3002\u5173\u4e8e\u53bb\u91cd\u6709\u4e24\u4e2a\u5173\u952e\u70b9\uff1a</p> <ul> <li>\u9996\u5148\u5728\u9012\u5f52\u53c2\u6570\u4e2d\u52a0\u5165\u5f53\u524d\u7ec4\u5408\uff0c\u8003\u8651\u9012\u5f52\u5f00\u59cb\u7684\u6570\u7ec4\u4f4d\u7f6e\uff0c\u907f\u514d\u9009\u5230\u5f00\u59cb\u6570\u4e4b\u524d\u7684\u6570\uff0c\u5bfc\u81f4\u91cd\u590d</li> <li>\u5bf9\u4e8e\u8fde\u7eed\u4e00\u6bb5\u76f8\u540c\u7684\u6570\uff0c\u5728\u9012\u5f52\u8fd9\u6bb5\u6570\u7684\u5f00\u5934\u7b2c\u4e00\u4e2a\u6570\u65f6\uff0c\u5176\u5b9e\u5c31\u5df2\u7ecf\u628a\u8fd9\u4e2a\u6570\u53ef\u80fd\u7684\u7b54\u6848\u5168\u90e8\u904d\u5386\u5b8c\u4e86\uff0c\u6240\u4ee5\u5bf9\u4e8e\u540e\u9762\u7684\u6570\u76f4\u63a5\u8df3\u8fc7\uff0c\u5c31\u53ef\u4ee5\u907f\u514d\u9009\u51fa\u91cd\u590d\u7684\u7ec4\u5408</li> </ul> <pre><code>class Solution {\n    private int[] candidates;\n    private int target;\n    private List&lt;List&lt;Integer&gt;&gt; ans;\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] candidates, int target) {\n        this.candidates = candidates;\n        this.target = target;\n        this.ans = new ArrayList&lt;&gt;();    \n\n        Arrays.sort(candidates);\n\n        dfs(0, 0, new ArrayList&lt;Integer&gt;());\n\n        return ans;\n    }\n\n    public void dfs(int index, int sum, List&lt;Integer&gt; temp) {\n\n        if(sum == target) {\n            ans.add(new ArrayList&lt;Integer&gt;(temp));\n            return;\n        }\n\n        for(int i = index; i &lt; candidates.length; i ++) {\n            if(sum + candidates[i] &gt; target) {\n                break;\n            }\n\n\n            temp.add(candidates[i]);\n            dfs(i + 1, sum + candidates[i], temp);\n            temp.removeLast();\n\n\n            int j = i;\n            while(j &lt; candidates.length &amp;&amp; candidates[j] == candidates[i]) j ++;\n            i = j - 1;\n        }\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#131","title":"131. \u5206\u5272\u56de\u6587\u4e32","text":"<p>\u9884\u5904\u7406\u51fa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5224\u65ad\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u662f\u56de\u6587\uff0c\u8fdb\u884c\u9012\u5f52\u5224\u65ad\u5f53\u524d\u9009\u4e2d\u7684\u533a\u95f4\u662f\u5426\u662f\u56de\u6587\uff0c\u5982\u4f55\u662f\u56de\u6587\u5c31\u9012\u5f52\u5230\u4e0b\u4e00\u5c42\uff0c\u5982\u679c\u4e0d\u662f\u5c31\u56de\u6eaf\u5230\u4e0a\u4e00\u5c42\u3002</p> <pre><code>class Solution {\n    private boolean[][] ishui;\n    private int n;\n    private List&lt;List&lt;String&gt;&gt; ans;\n    private String s;\n\n    public List&lt;List&lt;String&gt;&gt; partition(String s) {\n        this.s = s;\n        this.n = s.length();\n        this.ishui = new boolean[n][n];\n        this.ans = new ArrayList&lt;&gt;();\n\n        for(int i = n - 1; i &gt;= 0; i --) {\n            for(int j = i; j &lt; n; j ++) {\n                if(i == j) {\n                    ishui[i][j] = true;\n                } else if(j == i + 1) {\n                    ishui[i][j] = s.charAt(i) == s.charAt(j);\n                } else {\n                    ishui[i][j] = ishui[i + 1][j - 1] &amp;&amp; (s.charAt(i) == s.charAt(j));\n                }\n            }\n        }\n\n        dfs(0, new ArrayList&lt;String&gt;());\n\n        return ans;\n    }\n\n    public void dfs(int i, List&lt;String&gt; temp) {\n        if(i &gt;= n) {\n            ans.add(new ArrayList&lt;&gt;(temp));\n            return;\n        }\n        for(int j = i; j &lt; n; j ++) {\n            if(ishui[i][j]) {\n                temp.add(s.substring(i, j + 1));\n                dfs(j + 1, temp);\n                temp.removeLast();\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#93-ip","title":"93. \u590d\u539f IP \u5730\u5740","text":"<p>\u9012\u5f52\u5904\u7406\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6570\uff0c\u5982\u679c\u5f53\u524d\u9009\u4e2d\u7684\u6570\u7b26\u5408\u5927\u5c0f\u533a\u95f4\u8981\u6c42\uff0c\u5219\u8bb0\u5f55\u5f53\u524d\u7684\u6570\uff0c\u5e76\u9012\u5f52\u5230\u4e0b\u4e00\u5c42\u3002\u5982\u679c\u6700\u540e\u9009\u4e864\u4e2a\u6570\uff0c\u5e76\u4e14\u628a\u6574\u4e2a\u5b57\u7b26\u4e32\u90fd\u9009\u5b8c\u4e86\uff0c\u90a3\u4e48\u5c31\u8bb0\u5f55\u8be5\u5408\u6cd5ip\u5730\u5740\u3002\u9047\u52300\u65f6\u8981\u7279\u5224\uff0c\u4e0d\u80fd\u51fa\u73b0\u524d\u5bfc0\u3002</p> <pre><code>class Solution {\n    private int n;\n    private String s;\n    private List&lt;String&gt; ans;\n\n    public List&lt;String&gt; restoreIpAddresses(String s) {\n        this.n = s.length();\n        this.s = s;\n        this.ans = new ArrayList&lt;&gt;();\n\n        dfs(0, new ArrayList&lt;String&gt;());\n\n        return ans;\n    }\n\n    public void dfs(int i, List&lt;String&gt; temp) {\n        if(i &gt;= n &amp;&amp; temp.size() == 4) {\n            StringBuilder sb = new StringBuilder();\n\n            for(int j = 0; j &lt; 4; j ++) {\n                sb.append(temp.get(j));\n                if(j != 3) {\n                    sb.append(\".\");\n                }\n            }\n\n            ans.add(sb.toString());\n            return;\n        }\n\n        for(int j = i; j &lt; n &amp;&amp; j &lt; i + 3; j ++) {\n            String subStr = s.substring(i, j + 1);\n            int num = Integer.parseInt(subStr);\n\n            if(num &gt;= 0 &amp;&amp; num &lt;= 255) {\n                temp.add(new String(subStr));\n                dfs(j + 1, temp);\n                temp.removeLast();\n            }\n\n            if(num == 0) {\n                break;\n            }\n\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#78","title":"78. \u5b50\u96c6","text":"<p>\u4ece\u6570\u7ec4\u4e2d\u5206\u522b\u9009\u51fa\u957f\u5ea6\u4e3a 0 \u5230 nums.length \u957f\u5ea6\u7684\u5b50\u96c6</p> <pre><code>class Solution {\n    private List&lt;List&lt;Integer&gt;&gt; ans;\n    private int[] nums;\n\n    public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) {\n        this.ans = new ArrayList&lt;&gt;();\n        this.nums = nums;\n\n        ans.add(new ArrayList&lt;&gt;()); \n\n        for(int k = 1; k &lt;= nums.length; k ++) {\n            dfs(0, k, new ArrayList&lt;&gt;());\n        }\n\n        return ans;\n    }\n\n    public void dfs(int i, int k, List&lt;Integer&gt; temp) {\n        if(k == 0) {\n            ans.add(new ArrayList&lt;&gt;(temp));\n            return;\n        }\n\n        for(int j = i; j &lt; nums.length; j ++) {\n            temp.add(nums[j]);\n            dfs(j + 1, k - 1, temp);\n            temp.removeLast();\n        }\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#90-ii","title":"90. \u5b50\u96c6 II","text":"<p>\u8fd9\u4e00\u9898\u5bf9\u4e8e\u4e0a\u4e00\u9898\u6765\u8bf4\u5c31\u662f\u591a\u52a0\u4e86\u4e00\u4e2a\u6761\u4ef6\uff0c\u6570\u7ec4\u4e2d\u5b58\u5728\u91cd\u590d\u7684\u5143\u7d20\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u6392\u5e8f\u6765\u907f\u514d\u9009\u62e9\u91cd\u590d\u7684\u5b50\u96c6\u3002</p> <pre><code>class Solution {\n    private List&lt;List&lt;Integer&gt;&gt; ans;\n    private int[] nums;\n\n    public List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(int[] nums) {\n        this.ans = new ArrayList&lt;&gt;();\n        this.nums = nums;\n\n        ans.add(new ArrayList&lt;&gt;()); \n\n        Arrays.sort(nums);\n\n        for(int k = 1; k &lt;= nums.length; k ++) {\n            dfs(0, k, new ArrayList&lt;&gt;());\n        }\n\n        return ans;\n    }\n\n    public void dfs(int i, int k, List&lt;Integer&gt; temp) {\n        if(k == 0) {\n            ans.add(new ArrayList&lt;&gt;(temp));\n            return;\n        }\n\n        for(int j = i; j &lt; nums.length; j ++) {\n            temp.add(nums[j]);\n            dfs(j + 1, k - 1, temp);\n            temp.removeLast();\n\n            int ahead = j;\n            while(ahead &lt; nums.length &amp;&amp; nums[ahead] == nums[j]) ahead ++;\n            j = ahead - 1;\n        }\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#491","title":"491. \u975e\u9012\u51cf\u5b50\u5e8f\u5217","text":"<p>\u65e0\u6cd5\u8fdb\u884c\u6392\u5e8f\uff0c\u4e0d\u80fd\u901a\u8fc7\u8df3\u8fc7\u4e00\u6bb5\u8fde\u7eed\u7684\u6570\u6765\u53bb\u91cd\uff0c\u53ea\u80fd\u4f7f\u7528set\u6765\u8fdb\u884c\u53bb\u91cd\u3002</p> <pre><code>class Solution {\n    private List&lt;List&lt;Integer&gt;&gt; ans;\n    private int[] nums;\n    private int n;\n    private Set&lt;List&lt;Integer&gt;&gt; set;\n\n    public List&lt;List&lt;Integer&gt;&gt; findSubsequences(int[] nums) {\n        this.ans = new ArrayList&lt;&gt;();\n        this.nums = nums;\n        this.n = nums.length;\n        this.set = new HashSet&lt;&gt;();\n\n        dfs(0, new ArrayList&lt;&gt;());\n\n        return ans;\n    }\n\n    public void dfs(int i, List&lt;Integer&gt; temp) {\n        if(temp.size() &gt;= 2) {\n            if(!set.contains(temp)) {\n                ans.add(new ArrayList&lt;&gt;(temp));\n                set.add(new ArrayList&lt;&gt;(temp));\n            }\n        }\n\n        for(int j = i; j &lt; n; j ++) {\n            if(temp.size() == 0 || (nums[j] &gt;= temp.get(temp.size() - 1))) {\n                temp.add(nums[j]);\n                dfs(j + 1, temp);\n                temp.removeLast();\n            }\n        }\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#46","title":"46. \u5168\u6392\u5217","text":"<p>\u4f7f\u7528\u4e00\u4e2a boolean st \u6570\u7ec4\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u662f\u5426\u88ab\u9009\u4e2d\uff0c\u4e00\u5c42\u5c42\u9012\u5f52\uff0c\u9012\u5f52\u7684\u6bcf\u4e00\u5c42\u90fd\u9009\u4e00\u4e2a\u6570\u6807\u8bb0\u5bf9\u5e94\u4f4d\u7f6e\u7684st\u503c\u4e3atrue</p> <pre><code>class Solution {\n    private int[] nums;\n    private int n;\n    private List&lt;List&lt;Integer&gt;&gt; ans;\n    private boolean[] st;\n\n    public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) {\n        this.nums = nums;\n        this.n = nums.length;\n        this.ans = new ArrayList&lt;&gt;();\n        this.st = new boolean[n];\n\n        dfs(new ArrayList&lt;Integer&gt;());\n\n        return ans;\n    }\n\n    public void dfs(List&lt;Integer&gt; temp) {\n\n        if(temp.size() == n) {\n            ans.add(new ArrayList&lt;&gt;(temp));\n            return;\n        }\n\n        for(int i = 0; i &lt; n; i ++) {\n            if(!st[i]) {\n                st[i] = true;\n                temp.add(nums[i]);\n                dfs(temp);\n                temp.removeLast();\n                st[i] = false; \n            }    \n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#51-n","title":"51. N \u7687\u540e","text":"<p>N\u7687\u540e\u6bd4\u5176\u4ed6\u56de\u6eaf\u8981\u591a\u52a0\u4e24\u4e2a\u6807\u8bb0\uff0c\u5206\u522b\u4e3a\u5f53\u524d\u4f4d\u7f6e\u6240\u5904\u7684\u6b63\u5bf9\u89d2\u7ebf\u548c\u53cd\u5bf9\u89d2\u7ebf\u662f\u5426\u6709\u7687\u540e\u3002\u9012\u5f52\u7684\u53c2\u6570\u4e3a\u5f53\u524d\u5904\u4e8e\u54ea\u4e00\u5c42\uff0c\u5f53\u524d\u5c42\u9009\u5b8c\u7687\u540e\u9012\u5f52\u5230\u4e0b\u4e00\u5c42\u3002</p> <pre><code>class Solution {\n    private char[][] ma;\n    private int n;\n    private boolean[] st, st1, st2;\n    private List&lt;List&lt;String&gt;&gt; ans;\n\n    public List&lt;List&lt;String&gt;&gt; solveNQueens(int n) {\n        this.ma = new char[n][n];\n        this.n = n;\n        this.ans = new ArrayList&lt;&gt;();\n        this.st = new boolean[n];\n        this.st1 = new boolean[2 * n];\n        this.st2 = new boolean[2 * n];\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; n; j ++) {\n                ma[i][j] = '.';\n            }\n        }\n\n        dfs(0);\n\n        return ans;\n    }\n\n    public void dfs(int i) {\n        if(i &gt;= n) {\n            List&lt;String&gt; temp = new ArrayList&lt;&gt;();\n            for(int j = 0; j &lt; n; j ++) {\n                temp.add(new String(ma[j]));\n            }\n            ans.add(temp);\n            return;\n        }\n\n        for(int j = 0; j &lt; n; j ++) {\n            if(!st[j] &amp;&amp; !st1[i - j + n] &amp;&amp; !st2[i + j]) {\n                st[j] = st1[i - j + n] = st2[i + j] = true;\n                ma[i][j] = 'Q';\n                dfs(i + 1);\n                ma[i][j] = '.';\n                st[j] = st1[i - j + n] = st2[i + j] = false;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/#37","title":"37. \u89e3\u6570\u72ec","text":"<p>\u53ea\u5b58\u5728\u4e00\u4e2a\u7b54\u6848\uff0c\u6240\u4ee5\u4e00\u65e6\u627e\u5230\u7b54\u6848\u76f4\u63a5\u8fd4\u56de\u5230\u539f\u70b9</p> <pre><code>class Solution {\n    private char[][] board;\n    private boolean found;\n\n    public void solveSudoku(char[][] board) {\n        this.board = board;\n        this.found = false;\n        dfs();\n    }\n\n    public void dfs() {\n\n        if(found) {\n            return;\n        }\n\n        int row = -1, col = -1;\n\n        for(int i = 0; i &lt; 9 &amp;&amp; row == -1; i ++) {\n            for(int j = 0; j &lt; 9; j ++) {\n                if(board[i][j] == '.') {\n                    row = i;\n                    col = j;\n                    break;\n                }\n            }\n        }\n\n        if(row == -1) {\n            found = true;\n            return;\n        }\n\n        for(char c = '1'; c &lt;= '9'; c ++) {\n            if(check(row, col, c)) {\n                board[row][col] = c;\n                dfs();\n                if(found) return;\n                board[row][col] = '.';\n            }\n        }\n\n\n    }\n\n    public boolean check(int i, int j, char c) {\n        for(int k = 0; k &lt; 9; k ++) {\n            if(board[i][k] == c) {\n                return false;\n            } \n\n            if(board[k][j] == c) {\n                return false;\n            }\n        }\n\n        int im = i % 3, jm = j % 3;\n\n        for(int q = i - im; q &lt; i - im + 3; q ++) {\n            for(int p = j - jm; p &lt; j - jm + 3; p ++) {\n                if(board[q][p] == c) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA/","title":"\u56fe\u8bba","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA/#98","title":"98. \u6240\u6709\u53ef\u8fbe\u8def\u5f84","text":"<p>\u5229\u7528</p> <pre><code>List&lt;Integer&gt; ma = new ArrayList[n + 1]; \n</code></pre> <p>\u5efa\u7acb\u4e00\u4e2a\u90bb\u63a5\u8868\u5efa\u56fe\uff0cma[i] \u5b58\u50a8\u7684\u662f\u7ed3\u70b9 i \u53ef\u4ee5\u5230\u8fbe\u7684\u7ed3\u70b9\u3002</p> <p>\u4ece\u4e0b\u6807 1 \u5f00\u59cb\u904d\u5386\uff0c\u6bcf\u6b21\u641c\u7d22\u5f53\u524d\u53ef\u4ee5\u5230\u8fbe\u7684\u7ed3\u70b9\uff0c\u76f4\u5230\u641c\u7d22\u5230\u7ed3\u70b9 n\u3002\u5982\u679c\u6574\u4e2a\u9012\u5f52\u8d70\u5b8c\u90fd\u6ca1\u6709\u8d70\u5230\u7ed3\u70b9 n \u7684\u8bdd\uff0c\u8bf4\u660e\u4ece\u7ed3\u70b9 1 \u65e0\u6cd5\u5230\u8fbe\u7ed3\u70b9 n\uff0c\u8f93\u51fa -1</p> <pre><code>import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    private static List&lt;Integer&gt;[] ma;\n    private static int n;\n    private static int m;\n    private static BufferedReader br;\n    private static BufferedWriter bw;\n    private static boolean flag = false;\n\n    public static void main(String[] args) throws Exception {\n        br = new BufferedReader(new InputStreamReader(System.in));\n        bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n        String nm = br.readLine();\n\n        n = Integer.parseInt(nm.split(\" \")[0]);\n        m = Integer.parseInt(nm.split(\" \")[1]);\n\n        ma = new ArrayList[n + 1];\n\n        for(int i = 0; i &lt; m; i ++) {\n            String ab = br.readLine();\n            int a = Integer.parseInt(ab.split(\" \")[0]);\n            int b = Integer.parseInt(ab.split(\" \")[1]);\n\n            if(ma[a] == null) {\n                ma[a] = new ArrayList&lt;&gt;();\n            }\n\n            ma[a].add(b);\n        }\n\n        dfs(1, new ArrayList&lt;&gt;(Arrays.asList(1)));\n\n        if(!flag) {\n            bw.write(\"-1\");\n        }\n\n        bw.flush();\n        bw.close();\n        br.close();\n    }\n\n    public static void dfs(int curNode, List&lt;Integer&gt; route) throws Exception{\n        if(curNode == n) {\n            flag = true;\n            for(int i = 0; i &lt; route.size(); i ++) {\n                if(i != route.size() - 1) {\n                    bw.write(route.get(i) + \" \");\n                } else {\n                    bw.write(route.get(i)+\"\");\n                }\n            }\n            bw.write(\"\\n\");\n            return;\n        }\n\n        if(ma[curNode] == null) {\n            return;\n        }\n\n        for(Integer nextNode : ma[curNode]) {\n            route.add(nextNode);\n            dfs(nextNode, route);\n            route.remove(route.size() - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA/#99","title":"99. \u5c9b\u5c7f\u6570\u91cf","text":"<p>DFS\u5199\u6cd5\uff1a</p> <p>\u4e24\u91cd\u5faa\u73af\u5bfb\u627e\u5165\u53e3\uff0c\u5f53 \\(ma[i][j] = 1\\)  \u4e14 \\((i, j)\\) \u4f4d\u7f6e\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u7684\u8bdd\uff0c\u90a3\u4e48 \\((i, j)\\) \u5c31\u53ef\u4ee5\u662f\u4e00\u4e2a\u5165\u53e3\u3002\u8fdb\u5165\u5165\u53e3\u4e4b\u540e\uff0c\u641c\u7d22\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u4f4d\uff0c\u662f\u5426\u6709\u7b26\u5408 \\(ma[i + dx][j + dy] = 1\\)  \u4e14 \u6ca1\u6709\u88ab\u6807\u8bb0\u8bbf\u95ee\u8fc7\uff0c\u90a3\u4e48\u9012\u5f52\u5230\u8fd9\u4e2a\u5408\u6cd5\u7684\u4f4d\u7f6e</p> <pre><code>import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    private static int n;\n    private static int m;\n    private static int[] dx = {-1, 1, 0, 0};\n    private static int[] dy = {0, 0, 1, -1};\n    private static int[][] ma;\n    private static boolean[][] vis;\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n        String nm = br.readLine();\n\n        n = Integer.parseInt(nm.split(\" \")[0]);\n        m = Integer.parseInt(nm.split(\" \")[1]); \n\n        ma = new int[n][m];\n        vis = new boolean[n][m];\n\n        for(int i = 0; i &lt; n; i ++) {\n            String row = br.readLine();\n            String[] nums = row.split(\" \");\n            for(int j = 0; j &lt; m; j ++) {\n                ma[i][j] = Integer.parseInt(nums[j]);\n            }\n        }\n\n        int ans = 0;\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                if(!vis[i][j] &amp;&amp; ma[i][j] == 1) {\n                    ans ++;\n                    vis[i][j] = true;\n                    dfs(i, j);\n                }\n            }\n        }\n\n        bw.write(ans+\"\");\n\n        bw.flush();\n        bw.close();\n        br.close();\n\n    }\n\n    public static void dfs(int x, int y) {\n\n        for(int i = 0; i &lt; 4; i ++) {\n            int nx = x + dx[i];\n            int ny = y + dy[i];\n            if(nx &lt; 0 || nx &gt;= n || ny &lt; 0 || ny &gt;= m || vis[nx][ny] || ma[nx][ny] == 0) {\n                continue;\n            }\n            vis[nx][ny] = true;\n            dfs(nx, ny);\n        }\n    }\n}\n</code></pre> <p>BFS\u5199\u6cd5\uff1a</p> <p>\u7528\u4e00\u4e2a\u961f\u5217\u5728\u5b58\u50a8\u7b26\u5408\u8981\u6c42\u7684\u70b9\uff0c\u7136\u540e\u518d\u62ff\u8fd9\u4e9b\u7b26\u5408\u8981\u6c42\u7684\u70b9\u7ee7\u7eed\u6269\u5c55\uff0c\u628a\u5b83\u4eec\u5468\u56f4\u7b26\u5408\u8981\u6c42\u7684\u70b9\u518d\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff0c\u5faa\u73af\u5f80\u590d\u628a\u6700\u521d\u70b9\u53ef\u4ee5\u6269\u5c55\u7684\u6240\u6709\u70b9\u90fd\u6807\u8bb0\u4e0a</p> <pre><code>import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    private static int n;\n    private static int m;\n    private static int[] dx = {-1, 1, 0, 0};\n    private static int[] dy = {0, 0, 1, -1};\n    private static int[][] ma;\n    private static boolean[][] vis;\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n        String nm = br.readLine();\n\n        n = Integer.parseInt(nm.split(\" \")[0]);\n        m = Integer.parseInt(nm.split(\" \")[1]); \n\n        ma = new int[n][m];\n        vis = new boolean[n][m];\n\n        for(int i = 0; i &lt; n; i ++) {\n            String row = br.readLine();\n            String[] nums = row.split(\" \");\n            for(int j = 0; j &lt; m; j ++) {\n                ma[i][j] = Integer.parseInt(nums[j]);\n            }\n        }\n\n        int ans = 0;\n\n        Queue&lt;int[]&gt; q = new ArrayDeque&lt;&gt;();\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                if(ma[i][j] == 1 &amp;&amp; !vis[i][j]) {\n                    ans ++;\n                    q.offer(new int[]{i, j});\n                    while(!q.isEmpty()) {\n                        int[] pos = q.poll();\n                        int x = pos[0], y = pos[1];\n                        for(int k = 0; k &lt; 4; k ++) {\n                            int nx = x + dx[k];\n                            int ny = y + dy[k];\n                            if(nx &lt; 0 || nx &gt;= n || ny &lt; 0 || ny &gt;= m || vis[nx][ny] || ma[nx][ny] == 0) {\n                                continue;\n                            } \n                            vis[nx][ny] = true;\n                            q.offer(new int[]{nx, ny});\n                        }\n                    }\n                }\n            }\n        }\n\n        bw.write(ans+\"\");\n\n        bw.flush();\n        bw.close();\n        br.close();\n    }\n\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA/#100","title":"100. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef","text":"<p>BFS\u8bb0\u5f55\u6bcf\u6b21\u8fdb\u5165\u5165\u53e3\u540e\u63a5\u89e6\u5230\u7684\u6ca1\u6807\u8bb0\u6210true\u7684\u5408\u6cd5\u4f4d\u7f6e\uff0c\u8bb0\u5f55\u7684\u603b\u6b21\u6570\u5c31\u662f\u5c9b\u5c7f\u7684\u9762\u79ef</p> <pre><code>import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    private static int n;\n    private static int m;\n    private static int[][] ma;\n    private static boolean[][] vis;\n    private static int[] dx = {-1, 1, 0, 0};\n    private static int[] dy = {0, 0, 1, -1};\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n        String nm = br.readLine();\n\n        n = Integer.parseInt(nm.split(\" \")[0]);\n        m = Integer.parseInt(nm.split(\" \")[1]);\n\n        ma = new int[n][m];\n        vis = new boolean[n][m];\n\n        for(int i = 0; i &lt; n; i ++) {\n            String onerow = br.readLine();\n            String[] row = onerow.split(\" \");\n            for(int j = 0; j &lt; m; j ++) {\n                ma[i][j] = Integer.parseInt(row[j]);\n            } \n        }\n\n        Queue&lt;int[]&gt; q = new ArrayDeque&lt;&gt;();\n\n        int ans = 0;\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                if(!vis[i][j] &amp;&amp; ma[i][j] == 1) {\n                    int area = 0;\n                    vis[i][j] = true;\n                    q.offer(new int[]{i, j});\n                    while(!q.isEmpty()) {\n                        area ++;\n                        int[] t = q.poll();\n                        int x = t[0], y = t[1];\n                        for(int k = 0; k &lt; 4; k ++) {\n                            int nx = x + dx[k];\n                            int ny = y + dy[k];\n                            if(nx &lt; 0 || nx &gt;= n || ny &lt; 0 || ny &gt;= m || vis[nx][ny] || ma[nx][ny] == 0) {\n                                continue;\n                            }\n                            vis[nx][ny] = true;\n                            q.offer(new int[]{nx, ny});\n                        }\n                    }\n                    ans = Math.max(ans, area);\n                }\n            }\n        }\n\n        bw.write(ans + \"\");\n        bw.flush();\n        bw.close();\n        br.close();\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%9B%BE%E8%AE%BA/#101","title":"101. \u5b64\u5c9b\u7684\u603b\u9762\u79ef","text":"<p>\u5982\u679c\u4e00\u4e2a\u5c9b\u5c7f\u662f\u5b64\u5c9b\u7684\u8bdd\uff0c\u90a3\u4e48\u8fdb\u884cBFS\u6269\u5c55\u7684\u8fc7\u7a0b\u4e2d\u4e00\u5b9a\u4f1a\u78b0\u5230\u8fb9\u754c\uff0c\u6211\u4eec\u8bb0\u5f55\u5176\u662f\u5426\u5728\u6269\u5c55\u4e2d\u78b0\u5230\u8fb9\u754c\uff0c\u5982\u679c\u78b0\u5230\u8fb9\u754c\u5219\u4e0d\u628a\u5176\u9762\u79ef\u52a0\u5165\u5230\u7b54\u6848</p> <pre><code>import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    private static int n;\n    private static int m;\n    private static int[][] ma;\n    private static boolean[][] vis;\n    private static int[] dx = {-1, 1, 0, 0};\n    private static int[] dy = {0, 0, 1, -1};\n\n    public static void main(String[] args) throws Exception {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n        String nm = br.readLine();\n\n        n = Integer.parseInt(nm.split(\" \")[0]);\n        m = Integer.parseInt(nm.split(\" \")[1]);\n\n        ma = new int[n][m];\n        vis = new boolean[n][m];\n\n        for(int i = 0; i &lt; n; i ++) {\n            String onerow = br.readLine();\n            String[] row = onerow.split(\" \");\n            for(int j = 0; j &lt; m; j ++) {\n                ma[i][j] = Integer.parseInt(row[j]);\n            } \n        }\n\n        Queue&lt;int[]&gt; q = new ArrayDeque&lt;&gt;();\n\n        int ans = 0;\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                if(!vis[i][j] &amp;&amp; ma[i][j] == 1) {\n\n                    vis[i][j] = true;\n                    q.offer(new int[]{i, j});\n\n                    boolean flag = true;\n                    int area = 0;\n\n                    while(!q.isEmpty()) {\n                        area ++;\n                        int[] t = q.poll();\n                        int x = t[0], y = t[1];\n\n                        for(int k = 0; k &lt; 4; k ++) {\n                            int nx = x + dx[k];\n                            int ny = y + dy[k];\n                            if(nx &lt; 0 || nx &gt;= n || ny &lt; 0 || ny &gt;= m) {\n                                flag = false;\n                                continue;\n                            }\n                            if(vis[nx][ny] || ma[nx][ny] == 0) {\n                                continue;\n                            } \n                            vis[nx][ny] = true;\n                            q.offer(new int[]{nx, ny});\n                        }\n                    }\n\n                    ans += flag ? area : 0;\n                }\n            }\n        }\n\n        bw.write(ans + \"\");\n        bw.flush();\n        bw.close();\n        br.close();\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"\u5b57\u7b26\u4e32","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/#344","title":"344. \u53cd\u8f6c\u5b57\u7b26\u4e32","text":"<p>\u4e0e\u5176\u8bf4\u662f\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e0d\u5982\u8bf4\u662f\u53cd\u8f6c\u6570\u7ec4</p> <pre><code>class Solution {\n    public void reverseString(char[] s) {\n        int l = 0, r = s.length - 1;\n\n        while(l &lt; r) {\n            char t = s[l];\n            s[l] = s[r];\n            s[r] = t;\n            l ++;\n            r --;\n        }\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/#541-ii","title":"541. \u53cd\u8f6c\u5b57\u7b26\u4e32 II","text":"<p>\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u5b57\u7b26\u6570\u7ec4\u4e4b\u540e\u8fdb\u884c\u64cd\u4f5c\uff0c\u65f6\u95f4\u6548\u7387\u9ad8\u800c\u4e14\u64cd\u4f5c\u65b9\u4fbf\uff0c\u5957\u7528\u4e0a\u4e00\u9898\u7684\u53cd\u8f6c\u5b57\u7b26\u4e32\u628a\u90e8\u5206\u5b57\u7b26\u4e32\u53cd\u8f6c\u3002</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public String reverseStr(String s, int k) {\n        int n = s.length();\n\n        char[] chrs = s.toCharArray();\n\n        for(int i = 0; i &lt; n; i += 2 * k) {\n            subReverse(chrs, i, Math.min(i + k, n) - 1);\n        } \n\n        return new String(chrs);\n    }\n\n    public void subReverse(char[] s, int l, int r) {\n        while(l &lt; r) {\n            char t = s[l];\n            s[l] = s[r];\n            s[r] = t;\n            l ++;\n            r --;\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","title":"\u66ff\u6362\u6570\u5b57\uff08\u7b2c\u516b\u671f\u6a21\u62df\u7b14\u8bd5\uff09","text":"<pre><code>import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n        String s = br.readLine();\n\n        StringBuilder ans = new StringBuilder();\n\n        for(char c : s.toCharArray()) {\n            if(c &gt;= '0' &amp;&amp; c &lt;= '9') {\n                ans.append(\"number\");\n            } else {\n                ans.append(c);\n            }\n        }\n\n        for(char c : ans.toString().toCharArray()) {\n            bw.write(c);\n        }\n\n        bw.flush();\n        br.close();\n        bw.close();\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/#151","title":"151. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd","text":"<p>\u628a\u5355\u8bcd\u5168\u90e8\u653e\u5230\u4e00\u4e2a \\(List&lt;String&gt;\\) \u4e2d\u7136\u540e\u5012\u5e8f\u653e\u5165 \\(StringBuilder\\) \u6700\u540e\u8f6c\u6210 \\(String\\)</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public String reverseWords(String s) {\n        int n = s.length();\n\n        List&lt;String&gt; collectWords = new ArrayList&lt;&gt;();\n\n        for(int i = 0; i &lt; n; i ++) {\n            while(i &lt; n &amp;&amp; s.charAt(i) == ' ') i ++;\n\n            if(i &gt;= n) {\n                break;\n            }\n\n            StringBuilder temp = new StringBuilder();\n            while(i &lt; n &amp;&amp; s.charAt(i) != ' ') {\n                temp.append(s.charAt(i));\n                i ++;\n            }\n\n            collectWords.add(temp.toString());\n        }\n\n        StringBuilder ans = new StringBuilder();\n\n        for(int i = collectWords.size() - 1; i &gt;= 0; i --) {\n            ans.append(collectWords.get(i));\n            if(i &gt; 0) ans.append(\" \");\n        }\n\n        return ans.toString();\n    }\n}\n</code></pre> <p>\u628a\u5b57\u7b26\u4e32\u8f6c\u5316\u4e3a\u5b57\u7b26\u6570\u7ec4\u8fdb\u884c\u5904\u7406</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public String reverseWords(String s) {\n        char[] chrs = s.toCharArray();\n\n        int slow = 0;\n\n        for(int i = 0; i &lt; chrs.length; i ++) {\n            if(chrs[i] != ' ') {\n                if(slow != 0) {\n                    chrs[slow ++] = ' ';\n                }\n                while(i &lt; chrs.length &amp;&amp; chrs[i] != ' ') chrs[slow ++] = chrs[i ++];\n            }\n        }\n\n        chrs = Arrays.copyOf(chrs, slow);\n\n        reverseStr(chrs, 0, chrs.length - 1);\n\n        for(int i = 0; i &lt; chrs.length; i ++) {\n            int j = i;\n            while(j &lt; chrs.length &amp;&amp; chrs[j] != ' ') j ++;\n            reverseStr(chrs, i, j - 1);\n            i = j;\n        }\n\n        return new String(chrs);\n    }\n\n    private void reverseStr(char[] chrs, int l, int r) {\n        while(l &lt; r) {\n            char t = chrs[l];\n            chrs[l] = chrs[r];\n            chrs[r] = t;\n            l ++;\n            r --;\n        } \n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/#55","title":"55. \u53f3\u65cb\u5b57\u7b26\u4e32","text":"<p>\u501f\u52a9\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u5148\u628a\u540e\u534a\u6bb5\u653e\u4e00\u4e2aStringBuilder\u91cc\u9762\uff0c\u7136\u540e\u518d\u628a\u524d\u534a\u6bb5\u653e\u8fdb\u53bb\uff0c\u6700\u540e\u8f6c\u5316\u4e3aString</p> <pre><code>import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n\n        int k = sc.nextInt();\n\n        sc.nextLine();\n        String str = sc.nextLine();\n\n\n        StringBuilder sb = new StringBuilder();\n\n        for(int i = str.length() - k; i &lt; str.length(); i ++) {\n            sb.append(str.charAt(i));\n        }\n\n        for(int i = 0; i &lt; str.length() - k; i ++) {\n            sb.append(str.charAt(i));\n        }\n\n        System.out.println(sb.toString());\n    }\n}\n</code></pre> <p>\u5982\u679c\u7ed9\u7684\u662f\u4e00\u4e2achar[] \u6570\u7ec4\uff0c\u90a3\u4e48Java\u5c31\u53ef\u4ee5\u4e0d\u7528\u501f\u52a9\u989d\u5916\u7684\u7a7a\u95f4\u3002\u9996\u5148\u53cd\u8f6c\u6574\u4e2a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u628a\u524d \\(k\\) \u4e2a\u5b57\u7b26\u53cd\u8f6c\uff0c\u518d\u5c06\u5269\u4f59\u7684\u5b57\u7b26\u53cd\u8f6c\uff0c\u5f97\u5230\u7684\u5c31\u662f\u53f3\u65cb\u5b57\u7b26\u4e32\u3002</p> <pre><code>import java.util.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args){\n        Scanner sc = new Scanner(System.in);\n\n        int k = sc.nextInt();\n\n        sc.nextLine();\n        String str = sc.nextLine();\n\n        char[] charStr = str.toCharArray();\n\n        reverseStr(charStr, 0, str.length() - 1);\n\n        reverseStr(charStr, 0, k - 1);\n\n        reverseStr(charStr, k, str.length() - 1);\n\n        System.out.println(new String(charStr));\n    }\n\n    private static void reverseStr(char[] s, int l, int r) {\n        while(l &lt; r){\n            char t = s[l];\n            s[l] = s[r];\n            s[r] = t;\n            l ++;\n            r --;\n        } \n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/#28","title":"28. \u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u4e0b\u6807","text":"<p>KMP \u7b97\u6cd5</p> <pre><code>class Solution {\n    public int strStr(String haystack, String needle) {\n        int n = needle.length();\n        int[] next = new int[n];\n        next[0] = -1;\n\n        for(int i = 1, j = -1; i &lt; n; i ++) {\n            while(j != -1 &amp;&amp; needle.charAt(j + 1) != needle.charAt(i)) j = next[j];\n            if(needle.charAt(j + 1) == needle.charAt(i)) j ++;\n            next[i] = j;\n        }\n\n        for(int i = 0, j = -1; i &lt; haystack.length(); i ++) {\n            while(j != -1 &amp;&amp; needle.charAt(j + 1) != haystack.charAt(i)) j = next[j];\n            if(needle.charAt(j + 1) == haystack.charAt(i)) j ++;\n            if(j == n - 1) {\n                return i - n + 1;\n            }\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/#459","title":"459. \u91cd\u590d\u7684\u5b50\u5b57\u7b26\u4e32","text":"<p>\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b58\u5728\u5faa\u73af\u8282\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5faa\u73af\u8282\u7684\u957f\u5ea6\u5c31\u662f n - next[n] - 1</p> <pre><code>class Solution {\n    public boolean repeatedSubstringPattern(String s) {\n        int n = s.length();\n\n        int[] next = new int[n];\n        next[0] = -1;\n\n        for(int i = 1, j = -1; i &lt; n; i ++) {\n            while(j != -1 &amp;&amp; s.charAt(j + 1) != s.charAt(i)) j = next[j];\n            if(s.charAt(j + 1) == s.charAt(i)) j ++;\n            next[i] = j;\n        }\n\n        int k = n - next[n - 1] - 1;\n\n        return n % k == 0 &amp;&amp; k != n;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/","title":"\u6570\u7ec4","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#1","title":"1.\u6570\u7ec4\u7406\u8bba\u57fa\u7840","text":"<p>\u6570\u7ec4\u5b9a\u4e49\uff1a\u6570\u7ec4\u662f\u5b58\u653e\u5728\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u4e0a\u7684\u76f8\u540c\u6570\u636e\u7c7b\u578b\u7684\u96c6\u5408\u3002</p> <p>\u5728Java\u4e2d\u6570\u7ec4\u53ef\u4ee5\u88ab\u62c6\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u4e2a\u662f\u5f15\u7528\u53d8\u91cf\uff08\u6570\u7ec4\u540d\uff09\uff0c\u4e00\u4e2a\u662f\u6570\u7ec4\u7684\u5143\u7d20\u6570\u636e\u3002</p>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#_1","title":"\u4e00\u7ef4\u6570\u7ec4","text":"<p>\u5728Java\u4e2d\u901a\u8fc7\u4e0b\u9762\u7684\u8bed\u53e5\u521d\u59cb\u5316\u6570\u7ec4</p> <pre><code>int[] arr = new int[n];\n</code></pre> <p>\u5728\u4e0a\u9762\u8fd9\u6bb5\u8bed\u53e5\u4e2d\uff0cnew \u64cd\u4f5c\u4ece\u5806\u7a7a\u95f4\u4e2d\u7533\u8bf7\u4e86 n \u4e2a int \u6240\u9700\u8981\u7684\u8fde\u7eed\u7a7a\u95f4\uff0c\u5e76\u4e14\u8ba9\u5f15\u7528\u53d8\u91cf arr \u6307\u5411\u8fd9\u6bb5\u5806\u7a7a\u95f4\uff08arr\u5b58\u50a8\u4e86\u8fd9\u6bb5\u5806\u7a7a\u95f4\u7684\u9996\u5730\u5740\uff09\u3002arr \u5f15\u7528\u672c\u8eab\u5219\u5b58\u50a8\u5728\u6808\u7a7a\u95f4\u4e2d\u3002</p> <p>\u6240\u4ee5\u5f53\u4f60\u5c06 arr \u6570\u7ec4\u76f4\u63a5\u8d4b\u503c\u7ed9\u53e6\u4e00\u4e2a\u6570\u7ec4\u65f6\uff0c\u5982\uff1a</p> <pre><code>int[] otherArr = arr\n</code></pre> <p>\u4ec5\u4ec5\u662f\u8ba9\u5f15\u7528\u53d8\u91cf otherArr \u6307\u5411 arr \u6240\u6307\u5411\u7684\u5806\u7a7a\u95f4\uff0c\u8fc7\u7a0b\u4e2d\u5e76\u6ca1\u6709\u4ea7\u751f\u65b0\u7684\u6570\u7ec4\u3002\u6240\u4ee5\u5728\u540e\u9762\u5982\u679c\u4fee\u6539\u4e86otherArr \u7684\u503c\uff0carr \u4e5f\u4f1a\u8ddf\u7740\u4e00\u8d77\u53d8\u52a8</p>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#_2","title":"\u4e8c\u7ef4\u6570\u7ec4","text":"<p>\u4e8c\u7ef4\u6570\u7ec4\u53ef\u4ee5\u89c6\u4f5c \"\u6570\u7ec4\u7684\u6570\u7ec4\"\uff0c\u5373\u4e00\u7ef4\u6570\u7ec4\u7684\u5143\u7d20\u662f\u4e00\u7ef4\u6570\u7ec4\u3002</p> <p>\u4e8c\u7ef4\u6570\u7ec4\u7684\u521d\u59cb\u5316\u8bed\u53e5\u4e3a</p> <pre><code>int[][] arr2 = new int[n][m];\n</code></pre> <p>\u6b64\u65f6arr2\u4f5c\u4e3a\u6570\u7ec4\u7684\u5f15\u7528\u53d8\u91cf\u5b58\u50a8\u5728\u6808\u5185\u5b58\u4e2d\uff0c\u800c\u5176\u4e2d\u7684\u4e00\u7ef4\u6570\u7ec4\u5143\u7d20 arr2[i] \u5219\u5b58\u50a8\u5728\u6808\u5185\u5b58\u4e2d\uff0c\u540c\u65f6 arr2[i] \u4e5f\u4f5c\u4e3a\u5f15\u7528\u53d8\u91cf\u5b58\u50a8\u7740\u7b2c i \u884c\u6570\u7ec4\u7684\u6570\u636e\uff0c\u800c\u8fd9\u4e00\u90e8\u5206\u5b9e\u9645\u7684\u6570\u636e\u4e5f\u5b58\u50a8\u5728\u5806\u5185\u5b58\u4e2d\u3002\u5b58\u50a8\u7ed3\u6784\u5982\u4e0b\u56fe\uff1a</p> <p></p>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#2","title":"2.\u4e8c\u5206\u67e5\u627e","text":"<p>\u5728\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u4e0a\u7684\u4e8c\u5206\u67e5\u627e\u53ef\u4ee5\u5206\u4e3a4\u4e2d\u60c5\u51b5\uff1a</p> <ul> <li>\u5bfb\u627e\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u7b2c\u4e00\u4e2a\u6570</li> <li>\u5bfb\u627e\u5927\u4e8e \\(x\\) \u7684\u7b2c\u4e00\u4e2a\u6570        \uff08\u7528\u5927\u4e8e\u7b49\u4e8e\u5b9e\u73b0: \\(\\ge (x + 1)\\) )</li> <li>\u5bfb\u627e\u5927\u4e8e\u7b49\u4e8e \\(x\\) \u7684\u6700\u540e\u4e00\u4e2a\u6570  \uff08\u7528\u5927\u4e8e\u7b49\u4e8e\u5b9e\u73b0: \\((\\ge (x + 1)) - 1\\) )</li> <li>\u5bfb\u627e\u5c0f\u4e8e \\(x\\) \u7684\u6700\u540e\u4e00\u4e2a\u6570    \uff08\u7528\u5927\u4e8e\u7b49\u4e8e\u5b9e\u73b0: \\((\\ge x) - 1\\) )</li> </ul> <p>\u5728\u6211\u770b\u6765\uff0c\u4e8c\u5206\u67e5\u627e\u5176\u5b9e\u5c31\u662f\u4e24\u79cd\u60c5\u51b5\uff0c\u67e5\u627e\u7b26\u5408\u8981\u6c42\u7684\u6700\u5de6\u8fb9\u7684\u6570\uff0c\u548c\u67e5\u627e\u7b26\u5408\u8981\u6c42\u7684\u6700\u53f3\u8fb9\u7684\u6570</p>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#_3","title":"\u9898\u76ee","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#704","title":"704. \u4e8c\u5206\u67e5\u627e","text":"<pre><code>class Solution {\n    public int search(int[] nums, int target) {\n        int left = 0, right = nums.length;\n\n        while(left &lt; right) {\n            int mid = left + (right - left) / 2;\n            if(nums[mid] &gt;= target) right = mid;\n            else left = mid + 1;\n        }\n\n        if(left == nums.length) return -1;\n\n        return nums[left] == target ? left : -1;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#35","title":"35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e","text":"<p>\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0c\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e \\(target\\) \u7684\u6700\u5de6\u8fb9\u7684\u4f4d\u7f6e</p> <pre><code>class Solution {\n    public int searchInsert(int[] nums, int target) {\n        int l = 0, r = nums.length;\n        while(l &lt; r) {\n            int mid = l + (r - l) / 2;\n            if(nums[mid] &gt;= target) r = mid;\n            else l = mid + 1;\n        }\n        return l;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#34","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e","text":"<p>\u67e5\u627e \\(target\\) \u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u7528 \u5de6\u95ed\u53f3\u5f00 \u533a\u95f4\uff0c\u800c\u67e5\u627e\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u8f6c\u5316\u4e3a\u67e5\u627e \\(target + 1\\) \u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u518d\u51cf\u53bb \\(1\\) \u3002</p> <pre><code>class Solution {\n\n    int lower_bound(int[] nums, int target) {\n        int l = 0, r = nums.length;\n        while(l &lt; r) {\n            int mid = l + (r - l) / 2;\n            if(nums[mid] &gt;= target) r = mid;\n            else l = mid + 1;\n        }\n        return l;\n    }\n\n    public int[] searchRange(int[] nums, int target) {\n        int leftIndex = lower_bound(nums, target);\n        if(leftIndex == nums.length || nums[leftIndex] != target) {\n            return new int[]{-1, -1};\n        }\n        int rightIndex = lower_bound(nums, target + 1) - 1;\n        return new int[]{leftIndex, rightIndex};\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#69-x","title":"69. x \u7684\u5e73\u65b9\u6839","text":"<p>\u56e0\u4e3a\u8981\u6c42\u67e5\u627e\u51fa\u6765\u7684\u5e73\u65b9\u6839\u662f\u7b97\u6570\u5e73\u65b9\u6839\u5411\u4e0b\u53d6\u6574\uff0c\u6240\u4ee5\u60c5\u51b5\u5206\u4e3a\u4ee5\u4e0b\u4e24\u79cd</p> <ul> <li>\u5982\u679c \\(x\\) \u662f\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u8bdd\uff0c\u90a3\u4e48\u4e8c\u5206\u67e5\u627e\u5230\u7684\u4e2d\u70b9 \\(mid\\) \u6ee1\u8db3\\(mid * mid = x\\)</li> <li>\u5982\u679c \\(x\\) \u4e0d\u662f\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u8bdd\uff0c\u90a3\u4e48\u6709 \\(mid * mid &lt; x\\)</li> </ul> <p>\u6240\u4ee5\u53ef\u4ee5\u77e5\u9053\u5bf9\u4e8e\u771f\u6b63\u7684\u5b9e\u6570\u5e73\u65b9\u6839 \\(\\sqrt{x}\\)\uff0c\u6211\u4eec\u8981\u67e5\u627e\u7684\u662f\u7684 \\(\\le \\sqrt{x}\\) \u6700\u5927\u7684\u6574\u6570</p> <pre><code>class Solution {\n    public int mySqrt(int x) {\n        long l = 0, r = x;\n        while(l &lt; r) {\n            long mid = (l + r + 1) / 2;\n            if(mid * mid &lt;= x) l = mid;\n            else r = mid - 1; \n        }\n        return (int)l;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#367","title":"367. \u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570","text":"<p>\u548c\u4e0a\u4e00\u9898\u4e00\u6837\uff0c\u67e5\u627e \\(x\\) \u7684\u6574\u6570\u5e73\u65b9\u6839 \\(l\\) \uff0c\u68c0\u67e5\u662f\u5426\u6ee1\u8db3 \\(l * l = x\\)</p> <pre><code>class Solution {\n    public boolean isPerfectSquare(int num) {\n        long l = 0, r = num;\n        while(l &lt; r) {\n            long mid = (l + r + 1) / 2;\n            if(mid * mid &lt;= num) l = mid;\n            else r = mid - 1;\n        }\n        return l * l == num;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#3","title":"3.\u79fb\u9664\u5143\u7d20","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#27","title":"27. \u79fb\u9664\u5143\u7d20","text":"<p>\u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488 \\(k\\) \u6307\u5411\u6570\u7ec4\u503c\u4e0d\u4e3a \\(val\\) \u7684\u5e8f\u5217\u7684\u5c3e\u90e8\uff0c\u4e00\u4e2a\u6307\u9488 \\(i\\) \u6307\u5411\u539f\u6570\u7ec4\u5e76\u4e00\u76f4\u5411\u540e\u79fb\u52a8\u3002\u5f53\u6307\u9488 \\(i\\) \u6307\u5411\u7684\u5143\u7d20\u6570\u503c\u4e0d\u4e3a \\(val\\) \u7684\u65f6\u5019\uff0c\u5c06\u6307\u9488 \\(k\\) \u6307\u5411\u7684\u4f4d\u7f6e\u503c\u7f6e\u4e3a \\(nums[i]\\)\uff0c\u7136\u540e\u6307\u9488 \\(k\\) \u5411\u540e\u79fb\u52a8\u3002</p> <pre><code>class Solution {\n    public int removeElement(int[] nums, int val) {\n        int k = 0;\n        for(int i = 0; i &lt; nums.length; i ++) {\n            if(nums[i] != val) {\n                nums[k ++] = nums[i];\n            }\n        }\n        return k;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#26","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879","text":"<p>\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488 \\(i\\) \u6307\u5411\u539f\u6570\u7ec4\uff0c\u6307\u9488 \\(j\\) \u6bcf\u6b21\u90fd\u6307\u5411 \\(i\\) \uff0c\u7136\u540e\u5411\u540e\u79fb\u52a8\uff0c\u5f53\u4e24\u4e2a\u6307\u9488\u6307\u5411\u7684\u5143\u7d20\u6570\u503c\u4e0d\u76f8\u540c\u7684\u65f6\u5019\uff0c\u6307\u9488 \\(j\\) \u505c\u6b62\u79fb\u52a8\uff0c\u7136\u540e\u8bb0\u5f55\u6307\u9488 \\(i\\) \u6240\u6307\u5411\u7684\u5143\u7d20\u3002\u6700\u540e \\(i = j - 1\\) \u8df3\u8fc7\u91cd\u590d\u7684\u5143\u7d20</p> <pre><code>class Solution {\n    public int removeDuplicates(int[] nums) {\n        int curLength = 0;\n\n        for(int i = 0; i &lt; nums.length; i ++) {\n            int j = i;\n            while(j &lt; nums.length &amp;&amp; nums[j] == nums[i]) j ++;\n\n            nums[curLength ++] = nums[i];\n\n            i = j - 1;\n        }\n\n        return curLength;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#283","title":"283. \u79fb\u52a8\u96f6","text":"<p>\u53cc\u6307\u9488\uff0c\u628a\u4e0d\u662f0\u7684\u6570\u63d2\u5230\u524d\u9762\u53bb\uff0c\u7136\u540e\u518d\u628a\u540e\u9762\u7684\u6570\u7f6e\u62100</p> <pre><code>class Solution {\n    public void moveZeroes(int[] nums) {\n        int notZeroCnt = 0;\n\n        for(int i = 0; i &lt; nums.length; i ++) {\n            if(nums[i] != 0) {\n                nums[notZeroCnt ++] = nums[i];\n            }\n        }\n\n        for(int i = notZeroCnt; i &lt; nums.length; i ++) {\n            nums[i] = 0;\n        }\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#844","title":"844. \u6bd4\u8f83\u542b\u9000\u683c\u7684\u5b57\u7b26\u4e32","text":"<p>\u628a\u5b57\u7b26\u4e32\u5220\u9664\u540e\u7684\u7ed3\u679c\u52a0\u5165\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\uff0c\u6bd4\u8f83\u4e24\u4e2a\u7ed3\u679c\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\u3002</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6: \\(O(n)\\) </p> <p>\u7a7a\u95f4\u590d\u6742\u5ea6: \\(O(n)\\) </p> <pre><code>class Solution {\n    public boolean backspaceCompare(String s, String t) {\n        int indexS = -1, indexT = -1;\n\n        char[] charS = new char[s.length()];\n        char[] charT = new char[t.length()];\n\n        for(char c : s.toCharArray()) {\n            if(c == '#' &amp;&amp; indexS != -1) {\n                indexS --;\n            } else if(c != '#'){\n                charS[++ indexS] = c;\n            }\n        }\n\n        for(char c : t.toCharArray()) {\n            if(c == '#' &amp;&amp; indexT != -1) {\n                indexT --;\n            } else if(c != '#'){\n                charT[++ indexT] = c;\n            }\n        }\n\n        if(indexS != indexT) return false;\n\n        for(int i = 0; i &lt;= indexS; i ++) {\n            if(charS[i] != charT[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n</code></pre> <p>\u8981\u5b9e\u73b0\u9898\u76ee\u8981\u6c42\u7684 \\(O(n)\\) \u65f6\u95f4\u590d\u6742\u5ea6\u548c \\(O(1)\\) \u7a7a\u95f4\u590d\u6742\u5ea6\uff0c\u53ef\u4ee5\u4ece\u540e\u9762\u5411\u524d\u9762\u627e\uff0c\u6bcf\u6b21\u627e\u5230\u7b26\u5408\u8981\u6c42\u7684\u5b57\u7b26</p> <pre><code>class Solution {\n    public boolean backspaceCompare(String s, String t) {\n        int i = s.length() - 1, j = t.length() - 1;\n\n        while(i &gt;= 0 || j &gt;= 0) {\n            i = getIndex(s, i);\n            j = getIndex(t, j);\n\n            char charS = i &gt;= 0 ? s.charAt(i) : '0';\n            char charT = j &gt;= 0 ? t.charAt(j) : '0';\n\n            if(charS != charT) {\n                return false;\n            }\n\n            i --;\n            j --;\n        }\n\n        return true;\n    }\n\n    public int getIndex(String str, int idx) {\n        int cnt = 0;\n        while((idx &gt;= 0 &amp;&amp; str.charAt(idx) == '#') || cnt &gt; 0) {\n            if(idx &gt;= 0 &amp;&amp; str.charAt(idx) == '#') {\n                cnt ++;\n            } else {\n                cnt --;\n            }\n            idx --;\n        } \n        return idx;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#977","title":"977. \u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9","text":"<p>\u7528\u4e24\u4e2a\u6570\u7ec4\uff0c\u4e00\u4e2a\u5b58\u5347\u5e8f\u7684\u6b63\u6570\uff0c\u4e00\u4e2a\u5b58\u964d\u5e8f\u7684\u8d1f\u6570\uff0c\u7136\u540e\u4e24\u4e2a\u6570\u7ec4\u6bcf\u4e2a\u5143\u7d20\u5e73\u65b9\u540e\uff0c\u5c31\u90fd\u53d8\u6210\u4e86\u5347\u5e8f\uff0c\u6700\u540e\u5408\u5e76\u4e24\u4e2a\u5347\u5e8f\u6570\u7ec4\u3002</p> <pre><code>class Solution {\n    public int[] sortedSquares(int[] nums) {\n        int[] posNum = new int[nums.length];\n        int[] negNum = new int[nums.length];\n\n        int cntPos = 0, cntNeg = 0;\n\n        int idx = 0;\n        while(idx &lt; nums.length &amp;&amp; nums[idx] &lt; 0) {\n            idx ++;\n        }\n\n\n        for(int i = idx; i &lt; nums.length; i ++) {\n            posNum[cntPos ++] = nums[i];\n        }\n        for(int i = idx - 1; i &gt;= 0; i --) {\n            negNum[cntNeg ++] = nums[i];\n        }\n\n        int[] ans = new int[nums.length];\n\n        int i = 0, j = 0, cnt = 0;\n        while(i &lt; cntPos &amp;&amp; j &lt; cntNeg) {\n            int a = posNum[i] * posNum[i];\n            int b = negNum[j] * negNum[j];\n            if(a &lt;= b) {\n                ans[cnt ++] = a;\n                i ++;\n            } else {\n                ans[cnt ++] = b;\n                j ++;\n            }\n        }\n\n        while(i &lt; cntPos) {\n            ans[cnt ++] = posNum[i] * posNum[i];\n            i ++;\n        }\n\n        while(j &lt; cntNeg) {\n            ans[cnt ++] = negNum[j] * negNum[j];\n            j ++;\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#4","title":"4.\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#209","title":"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4","text":"<p>\u53d8\u957f\u6ed1\u52a8\u7a97\u53e3\uff0c\u5f53\u6ed1\u52a8\u7a97\u53e3\u5185\u7684\u548c\u5c0f\u4e8e \\(target\\) \u7684\u8bdd\uff0c\u5c31\u628a\u7a97\u53e3\u5411\u540e\u7ee7\u7eed\u6269\u5f20\uff0c\u5982\u679c\u7a97\u53e3\u5185\u7684\u503c\u4ee5\u53ca\u6ee1\u8db3\u8981\u6c42\u7684\u8bdd\uff0c\u5219\u7a97\u53e3\u5de6\u8fb9\u754c\u5411\u53f3\u79fb\u52a8</p> <pre><code>class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        int sum = 0;\n\n        int ans = Integer.MAX_VALUE;\n        for(int i = 0, j = 0; i &lt; nums.length; i ++) {\n            sum += nums[i];\n\n            if(sum &lt; target) {\n                continue;\n            }\n\n            while(sum &gt;= target) {\n                ans = Math.min(ans, i - j + 1);\n                sum -= nums[j ++];\n            }\n        }\n\n        return ans == Integer.MAX_VALUE ? 0 : ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#904","title":"904. \u6c34\u679c\u6210\u7bee","text":"<p>\u53d8\u957f\u6ed1\u52a8\u7a97\u53e3\uff0c\u7ef4\u62a4\u4e00\u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u7a97\u53e3\u4e2d\u53ea\u5305\u542b\u4e24\u4e2a\u79cd\u7c7b\u7684\u6c34\u679c</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public int totalFruit(int[] fruits) {\n        int kind = 0;        \n\n        int mx = 0;\n        for(int x : fruits) mx = Math.max(mx, x);\n\n        int[] cnt = new int[mx + 1];\n        int ans = 0;\n\n        for(int i = 0, j = 0; i &lt; fruits.length; i ++) {\n\n            if(cnt[fruits[i]] == 0) {\n                kind ++;\n            }\n\n            cnt[fruits[i]] ++;\n\n            while(kind &gt; 2) {\n                cnt[fruits[j]] --;\n                if(cnt[fruits[j]] &lt;= 0) {\n                    kind --;\n                }\n                j ++;\n            }\n\n            ans = Math.max(ans, i - j + 1);\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#59-ii","title":"59. \u87ba\u65cb\u77e9\u9635 II","text":"<pre><code>class Solution {\n    public int[][] generateMatrix(int n) {\n        int[][] ans = new int[n][n];\n\n        int k = 1;\n\n        int i = 0, j = -1;\n        while(k &lt;= n * n) {\n            while(j + 1 &lt; n &amp;&amp; ans[i][j + 1] == 0) ans[i][++ j] = k ++;\n            while(i + 1 &lt; n &amp;&amp; ans[i + 1][j] == 0) ans[++ i][j] = k ++;\n            while(j - 1 &gt;= 0 &amp;&amp; ans[i][j - 1] == 0) ans[i][-- j] = k ++;\n            while(i - 1 &gt;= 0 &amp;&amp; ans[i - 1][j] == 0) ans[-- i][j] = k ++;\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#54","title":"54. \u87ba\u65cb\u77e9\u9635","text":"<pre><code>class Solution {\n    public List&lt;Integer&gt; spiralOrder(int[][] matrix) {\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n\n        int n = matrix.length, m = matrix[0].length;\n\n        boolean[][] vis = new boolean[n][m];\n\n        int cnt = 1;\n        int i = 0, j = -1;\n        while(cnt &lt;= n * m) {\n            while(j + 1 &lt; m &amp;&amp; !vis[i][j + 1]) {\n                vis[i][j + 1] = true;\n                ans.add(matrix[i][++ j]);\n                cnt ++;\n            }\n\n            while(i + 1 &lt; n &amp;&amp; !vis[i + 1][j]) {\n                vis[i + 1][j] = true;\n                ans.add(matrix[++ i][j]);\n                cnt ++;\n            }\n\n            while(j - 1 &gt;= 0 &amp;&amp; !vis[i][j - 1]) {\n                vis[i][j - 1] = true;\n                ans.add(matrix[i][-- j]);\n                cnt ++;\n            }\n\n            while(i - 1 &gt;= 0 &amp;&amp; !vis[i - 1][j]) {\n                vis[i - 1][j] = true;\n                ans.add(matrix[-- i][j]);\n                cnt ++;\n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#lcr-146","title":"LCR 146. \u87ba\u65cb\u904d\u5386\u4e8c\u7ef4\u6570\u7ec4","text":"<pre><code>class Solution {\n    public int[] spiralArray(int[][] array) {\n        if(array.length == 0) return new int[]{};\n\n        int n = array.length, m = array[0].length;\n        boolean[][] vis = new boolean[n][m];    \n        int[] ans = new int[n * m];\n\n        int cnt = 0;\n        int i = 0, j = -1;\n        while(cnt &lt; n * m) {\n            while(j + 1 &lt; m &amp;&amp; !vis[i][j + 1]) {\n                vis[i][j + 1] = true;\n                ans[cnt ++] = array[i][++ j];\n            }\n\n            while(i + 1 &lt; n &amp;&amp; !vis[i + 1][j]) {\n                vis[i + 1][j] = true;\n                ans[cnt ++] = array[++ i][j];\n            }\n\n            while(j - 1 &gt;= 0 &amp;&amp; !vis[i][j - 1]) {\n                vis[i][j - 1] = true;\n                ans[cnt ++] = array[i][-- j];\n            }\n\n            while(i - 1 &gt;= 0 &amp;&amp; !vis[i - 1][j]) {\n                vis[i - 1][j] = true;\n                ans[cnt ++] = array[-- i][j];\n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#5","title":"5.\u533a\u95f4\u548c","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#58","title":"58.\u533a\u95f4\u548c","text":"<pre><code>import java.util.*;\nimport java.io.*;\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n        int n = Integer.parseInt(br.readLine());\n        int[] arr = new int[n];\n\n        for(int i = 0; i &lt; n; i ++) {\n            arr[i] = Integer.parseInt(br.readLine());\n        }\n\n        int[] sum = new int[n + 1];\n\n        for(int i = 0; i &lt; n; i ++) {\n            sum[i + 1] = sum[i] + arr[i];\n        }\n\n        String line;\n        while((line = br.readLine()) != null) {\n            int l = Integer.parseInt(line.split(\" \")[0]);\n            int r = Integer.parseInt(line.split(\" \")[1]);\n            System.out.println(sum[r + 1] - sum[l]);\n        }\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%95%B0%E7%BB%84/#44","title":"44.\u5f00\u53d1\u5546\u8d2d\u4e70\u571f\u5730","text":"<pre><code>import java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\n\n        String nm  = br.readLine();\n\n        int n = Integer.parseInt(nm.split(\" \")[0]);\n        int m = Integer.parseInt(nm.split(\" \")[1]);\n\n        int[][] nums = new int[n][m];\n\n        for(int i = 0; i &lt; n; i ++) {\n            String line = br.readLine();\n            String[] splitLine = line.split(\" \");\n            for(int j = 0; j &lt; m; j ++) {\n                nums[i][j] = Integer.parseInt(splitLine[j]);\n            }\n        }\n\n        int[][] sum = new int[n + 1][m + 1];\n\n        for(int i = 0; i &lt; n; i ++) {\n            for(int j = 0; j &lt; m; j ++) {\n                sum[i + 1][j + 1] = sum[i][j + 1] + sum[i + 1][j] - sum[i][j] + nums[i][j];\n            }\n        }\n\n        int ans = Integer.MAX_VALUE;\n\n        for(int i = 1; i &lt;= n; i ++) {\n            int a = sum[i][m];\n            ans = Math.min(ans, Math.abs(sum[n][m] - 2 * a));\n        }\n\n        for(int j = 1; j &lt;= m; j ++) {\n            int a = sum[n][j];\n            ans = Math.min(ans, Math.abs(sum[n][m] - 2 * a));\n        }\n\n        bw.write(ans+\"\");\n        bw.flush();\n\n        br.close();\n        bw.close();\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/","title":"\u6808\u4e0e\u961f\u5217","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#232","title":"232. \u7528\u6808\u5b9e\u73b0\u961f\u5217","text":"<p>\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u8f93\u5165\u6808\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u8f93\u51fa\u6808\uff0c\u8981\u8f93\u5165\u7684\u65f6\u5019\u628a\u8f93\u5165\u6808\u7684\u6570\u5168\u90e8\u817e\u5230\u8f93\u51fa\u6808\u91cc\u9762\uff0c\u7136\u540e\u628a\u8f93\u51fa\u6808\u7684\u6808\u9876\u4f5c\u4e3a\u7b54\u6848\u3002</p> <pre><code>import java.util.*;\n\nclass MyQueue {\n    Stack&lt;Integer&gt; stk1;\n    Stack&lt;Integer&gt; stk2;\n    public MyQueue() {\n        stk1 = new Stack&lt;&gt;();\n        stk2 = new Stack&lt;&gt;();\n    }\n\n    public void push(int x) {\n        stk1.push(x);\n    }\n\n    public int pop() {\n        transfer();\n        return stk2.pop();\n    }\n\n    public int peek() {\n        transfer();\n        return stk2.peek();\n    }\n\n    public boolean empty() {\n        return stk1.isEmpty() &amp;&amp; stk2.isEmpty();\n    }\n\n    public void transfer() {\n        if(stk2.isEmpty()) {\n            while(!stk1.isEmpty()) {\n                stk2.push(stk1.pop());\n            }\n        }\n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue obj = new MyQueue();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.peek();\n * boolean param_4 = obj.empty();\n */\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#225","title":"225. \u7528\u961f\u5217\u5b9e\u73b0\u6808","text":"<p>\u6808\u8981\u6c42\u5148\u8fdb\u540e\u51fa\uff0c\u8bbe\u4e24\u4e2a\u961f\u5217\u5206\u522b\u4e3a\u961f\u5217 \\(q1\\) \u548c\u961f\u5217 \\(q2\\) \uff0c\u5f53 \\(q1\\) \u4f5c\u4e3a\u63a5\u53d7\u5143\u7d20\u7684\u961f\u5217\uff0c\u8981\u8f93\u51fa\u65f6\uff0c\u628a\u524d \\(q1.size() - 1\\) \u4e2a\u5143\u7d20\u8f93\u51fa\u5230 \\(q2\\) \u4e2d\uff0c\u7136\u540e\u8f93\u51fa \\(q1\\) \u7684\u6700\u540e\u4e00\u4e2a\u6570\u3002\u540c\u7406\uff0c\u5f53 \\(q2\\) \u4f5c\u4e3a\u63a5\u53d7\u5143\u7d20\u7684\u961f\u5217\uff0c\u8981\u8f93\u51fa\u65f6\uff0c\u628a\u524d \\(q2.size() - 1\\) \u4e2a\u5143\u7d20\u8f93\u51fa\u5230 \\(q1\\) \u7136\u540e\u8f93\u51fa \\(q2\\) \u7684\u6700\u540e\u4e00\u4e2a\u6570\u3002</p> <pre><code>import java.util.*;\n\nclass MyStack {\n    Queue&lt;Integer&gt; q1, q2;\n    boolean status = false;\n\n    public MyStack() {\n        q1 = new LinkedList&lt;&gt;();    \n        q2 = new LinkedList&lt;&gt;();\n    }\n\n    public void push(int x) {\n        if(!status) {\n            q1.add(x);\n        } else {\n            q2.add(x);\n        }\n    }\n\n    public int pop() {\n        transfer();\n        if(!status) {\n            status = true;\n            return q1.poll();\n        } else {\n            status = false;\n            return q2.poll();\n        }\n    }\n\n    public int top() {\n        transfer();\n        if(!status) {\n            status = true;\n            int t = q1.peek();\n            q2.add(q1.poll());\n            return t;\n        } else {\n            status = false;\n            int t = q2.peek();\n            q1.add(q2.poll());\n            return t;\n        }\n    }\n\n    public boolean empty() {\n        return q1.isEmpty() &amp;&amp; q2.isEmpty();\n    }\n\n    public void transfer() {\n        if(!status) {\n            while(q1.size() &gt; 1) {\n                q2.add(q1.poll());\n            }\n        } else {\n            while(q2.size() &gt; 1) {\n                q1.add(q2.poll());\n            }\n        }\n    }\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.top();\n * boolean param_4 = obj.empty();\n */\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":"<p>\u7528\u4e00\u4e2a\u6808\u5b58\u50a8\u5de6\u62ec\u53f7\uff0c\u5f53\u9047\u5230\u53f3\u62ec\u53f7\u7684\u65f6\uff0c\u68c0\u67e5\u6808\u4e2d\u7684\u5de6\u62ec\u53f7\u662f\u5426\u4e0e\u5f53\u524d\u9047\u5230\u7684\u53f3\u62ec\u53f7\u5339\u914d\uff0c\u4e0d\u5339\u914d\u8fd4\u56de false\u3002\u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\u90fd\u6ca1\u6709\u8fd4\u56de false\uff0c\u68c0\u67e5\u6808\u4e2d\u662f\u5426\u8fd8\u6709\u5b57\u7b26\uff0c\u5982\u679c\u6ca1\u6709\u5b57\u7b26\u5219\u8fd4\u56detrue</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public boolean isValid(String s) {\n        Stack&lt;Character&gt; stk = new Stack&lt;&gt;();\n\n        for(char c : s.toCharArray()) {\n            if(c == '(' || c == '[' || c == '{') {\n                stk.push(c);\n            } else {\n                if(stk.isEmpty()) {\n                    return false;\n                }\n\n                char t =  stk.pop();\n\n                if(c == ')' &amp;&amp; t != '(') {\n                    return false;\n                }\n                if(c == '}' &amp;&amp; t != '{') {\n                    return false;\n                }\n                if(c == ']' &amp;&amp; t != '[') {\n                    return false;\n                }\n            } \n        }   \n\n        return stk.isEmpty();\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#1047","title":"1047. \u5220\u9664\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u76f8\u90bb\u91cd\u590d\u9879","text":"<p>\u5229\u7528\u6808\u6765\u5224\u65ad\u4e24\u4e2a\u76f8\u90bb\u7684\u5b57\u7b26\u662f\u5426\u4e00\u6837\uff0c\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5f53\u524d\u5b57\u7b26\u548c\u6808\u9876\u7684\u5b57\u7b26\u76f8\u7b49\uff0c\u5219\u6808\u9876\u5b57\u7b26\u51fa\u6808\uff0c\u5f53\u524d\u5b57\u7b26\u4e0d\u5165\u6808\uff0c\u5426\u5219\u5f53\u524d\u5b57\u7b26\u5165\u6808\u3002</p> <p>\u6700\u540e\u628a\u6240\u6709\u6808\u5185\u5b57\u7b26\u5f39\u51fa\u540e\u6536\u96c6\u5230StringBuilder\u4e2d\uff0c\u7136\u540e\u53cd\u8f6c\u5b57\u7b26\u4e32\u4f5c\u4e3a\u6700\u7ec8\u7b54\u6848\u3002</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public String removeDuplicates(String s) {\n        Stack&lt;Character&gt; stk = new Stack&lt;&gt;();\n\n        for(char c : s.toCharArray()) {\n            if(!stk.isEmpty() &amp;&amp; stk.peek() == c) {\n                stk.pop();\n            } else {\n                stk.push(c);\n            }\n        }\n\n        StringBuilder sb = new StringBuilder();\n\n        while(!stk.isEmpty()) {\n            sb.append(stk.pop());\n        }\n\n        return sb.reverse().toString();\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#150","title":"150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c","text":"<p>\u8bbe\u7f6e\u4e00\u4e2a\u6808\u4f5c\u4e3a\u6570\u5b57\u6808\uff0c\u5b58\u653e\u6570\u5b57\uff0c\u9047\u5230\u8fd0\u7b97\u7b26\u65f6\uff0c\u4ece\u6808\u9876\u53d6\u51fa\u4e24\u4e2a\u6570\uff0c\u8ba1\u7b97\u540e\u653e\u5165\u6570\u5b57\u6808\u4e2d\u3002</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public int evalRPN(String[] tokens) {\n        Stack&lt;Integer&gt; numbers = new Stack&lt;&gt;();\n\n        for(int i = 0; i &lt; tokens.length; i ++) {\n            if(isNumber(tokens[i])) {\n                numbers.push(Integer.parseInt(tokens[i]));\n            } else {\n                //System.out.println(tokens[i]);\n                int b = numbers.pop(), a = numbers.pop();\n                if(\"+\".equals(tokens[i])) {\n                    numbers.push(a + b);\n                } else if(\"-\".equals(tokens[i])) {\n                    numbers.push(a - b);\n                } else if(\"/\".equals(tokens[i])) {\n                    numbers.push(a / b);\n                } else {\n                    numbers.push(a * b);\n                }\n            }\n        }        \n\n        return numbers.pop();\n    }\n\n    public boolean isNumber(String str) {\n        if(str == null || str.length() == 0) {\n            return false;\n        }\n\n        for(int i = 0; i &lt; str.length(); i ++) {\n            char c = str.charAt(i);\n            if(i == 0 &amp;&amp; c == '-' &amp;&amp; str.length() &gt; 1) {\n                continue;\n            }\n            if(c &lt; '0' || c &gt; '9') {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#239","title":"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c","text":"<p>\u4f7f\u7528\u4e00\u4e2a\u53cc\u7aef\u961f\u5217\u6765\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u3002\u5355\u8c03\u961f\u5217\u8981\u7ef4\u62a4\u5b58\u50a8\u5728\u961f\u5217\u4e2d\u6570\u636e\u7684\u5355\u8c03\u6027\uff0c\u672c\u9898\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u9012\u51cf\u7684\u961f\u5217\uff0c\u56e0\u4e3a\u5982\u679c\u904d\u5386\u5230\u5f53\u524d\u7684\u503c\uff0c\u5927\u4e8e\u961f\u5217\u4e2d\u7684\u503c\uff0c\u90a3\u4e48\u961f\u5217\u4e2d\u7684\u503c\u5c31\u4e0d\u53ef\u80fd\u4f5c\u4e3a\u540e\u7eed\u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c\u4e86\u3002\u540c\u6837\u6211\u4eec\u8fd8\u8981\u7ef4\u62a4\u961f\u5217\u4e2d\u7684\u6570\u5e94\u8be5\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(k\\) \u7684\u7a97\u53e3\u4e2d\uff0c\u6240\u4ee5\u91c7\u7528\u8bb0\u5f55\u7d22\u5f15\u7684\u65b9\u5f0f\u5904\u7406\u3002</p> <pre><code>import java.util.*;\n\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        Deque&lt;Integer&gt; q = new ArrayDeque&lt;&gt;();\n\n        int[] ans = new int[nums.length - k + 1];\n\n        for(int i = 0, j = 0; i &lt; nums.length; i ++) {\n            if(!q.isEmpty() &amp;&amp; i - q.peekFirst() + 1 &gt; k) {\n                q.pollFirst();\n            }\n\n            while(!q.isEmpty() &amp;&amp; nums[q.peekLast()] &lt; nums[i]) {\n                q.pollLast();\n            }\n\n            q.addLast(i);\n\n            if(i &gt;= k - 1) {\n                ans[j ++] = nums[q.peekFirst()];\n            }\n        }   \n\n        return ans;\n\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/#347-k","title":"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20","text":"<p>\u9650\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a\u6700\u5927\u4e3a \\(k\\) \u7684\u5c0f\u6839\u5806\uff0c\u7528\u8be5\u5c0f\u6839\u5806\u6bd4\u8f83\u51fa\u6570\u7ec4\u4e2d\u5404\u6570\u51fa\u73b0\u6b21\u6570\u5927\u5c0f\u7684\u524d \\(k\\) \u4e2a\u3002\u9996\u5148\u7528\u54c8\u5e0c\u8868\u5f97\u5230\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7136\u540e\u4e00\u4e2a\u4e2a\u63d2\u5165\u5230\u5c0f\u6839\u5806\u4e2d\u3002</p> <ul> <li> <p>\u5982\u679c\u5c0f\u6839\u5806\u4e2d\u5df2\u7ecf\u8bb0\u5f55\u4e86 \\(k\\) \u4e2a\u5143\u7d20</p> </li> <li> <p>\u5982\u679c\u5c0f\u6839\u5806\u7684\u5806\u9876\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\u5927\u4e8e\u5f53\u524d\u5143\u7d20\u51fa\u73b0\u6b21\u6570\u3002\u5219\u5f53\u524d\u5143\u7d20\u4e00\u5b9a\u4e0d\u662f\u7b54\u6848\u3002</p> </li> <li> <p>\u5982\u679c\u5c0f\u6839\u5806\u7684\u5806\u9876\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5219\u5f39\u51fa\u5806\u9876\uff0c\u628a\u5f53\u524d\u5143\u7d20\u8bb0\u5f55\u8fdb\u5c0f\u6839\u5806</p> </li> <li> <p>\u5982\u679c\u5c0f\u6839\u5806\u4e2d\u8bb0\u5f55\u5143\u7d20\u4e0d\u8db3 \\(k\\) \u4e2a\uff0c\u5219\u76f4\u63a5\u628a\u5f53\u524d\u5143\u7d20\u8bb0\u5f55\u5230\u5c0f\u6839\u5806</p> </li> </ul> <pre><code>import java.util.*;\n\nclass Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        Map&lt;Integer, Integer&gt; cnt = new HashMap&lt;&gt;();\n\n        for(int x : nums) {\n            cnt.merge(x, 1, Integer::sum);\n        }\n        // \u5c0f\u6839\u5806\u81ea\u5b9a\u4e49\u6bd4\u8f83\u65b9\u6cd5\n        PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;(new Comparator&lt;&gt;() {\n            public int compare(Integer a, Integer b) {\n                return cnt.get(a) - cnt.get(b);\n            }\n        });\n\n        for(int x : cnt.keySet()) {\n            if(heap.size() == k) {\n                if(cnt.get(heap.peek()) &lt; cnt.get(x)) {\n                    heap.poll();\n                    heap.add(x);\n                }\n            } else {\n                heap.add(x);\n            }\n        }\n\n        int[] ans = new int[k];\n        for(int i = 0; i &lt; k; i ++) {\n            ans[i] = heap.poll();\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/","title":"\u8d2a\u5fc3","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#455","title":"455. \u5206\u53d1\u997c\u5e72","text":"<p>\u5bf9\u5c0f\u5b69\u7684\u80c3\u53e3\u503c\u548c\u997c\u5e72\u7684\u5c3a\u5bf8\u5206\u522b\u8fdb\u884c\u6392\u5e8f\uff0c\u4f18\u5148\u6ee1\u8db3\u80c3\u53e3\u5c0f\u7684\u5c0f\u5b69\uff0c\u8fd9\u6837\u53ef\u4ee5\u6ee1\u8db3\u5c3d\u53ef\u80fd\u591a\u7684\u5b69\u5b50\u3002</p> <pre><code>class Solution {\n    public int findContentChildren(int[] g, int[] s) {\n        int ans = 0;\n        Arrays.sort(g);\n        Arrays.sort(s);\n\n        int j = 0;\n\n        for(int i = 0; i &lt; g.length; i ++) {\n\n            while(j &lt; s.length &amp;&amp; s[j] &lt; g[i]) j ++;\n            if(j &gt;= s.length) {\n                break;\n            } else {\n                j ++;\n                ans ++;\n            }\n\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#376","title":"376. \u6446\u52a8\u5e8f\u5217","text":"<p>\u52a8\u6001\u89c4\u5212\u505a\u6cd5\uff1a</p> <p>up[i]\uff1a\u8868\u793a\u524d i \u4e2a\u6570\u4e2d\u6700\u957f\u7684\u4ee5\u4e0a\u5347\u7ed3\u5c3e\u7684\u6446\u52a8\u5e8f\u5217</p> <p>down[i]\uff1a\u8868\u793a\u524d i \u4e2a\u6570\u4e2d\u6700\u957f\u7684\u4ee5\u4e0b\u964d\u7ed3\u5c3e\u7684\u6446\u52a8\u5e8f\u5217</p> <ul> <li>\u5f53 nums[i] &gt; nums[i - 1] \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6446\u52a8\u5e8f\u5217\u4e0a\u5347\u7684\u7ed3\u5c3e\uff0c\u6240\u4ee5\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a</li> </ul> <pre><code>up[i] = max(up[i - 1], down[i - 1] + 1);\ndown[i] = down[i - 1];\n</code></pre> <ul> <li>\u5f53 nums[i] &lt; nums[i - 1] \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u6446\u52a8\u5e8f\u5217\u4e0b\u964d\u7684\u7ed3\u5c3e\uff0c\u6240\u4ee5\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a</li> </ul> <pre><code>down[i] = max(down[i - 1], up[i - 1] + 1);\nup[i] = up[i - 1];\n</code></pre> <pre><code>class Solution {\n    public int wiggleMaxLength(int[] nums) {\n        int n = nums.length;\n\n        int[] up = new int[n];\n        int[] down = new int[n];\n\n        for(int i = 1; i &lt; n; i ++) {\n            if(nums[i] &gt; nums[i - 1]) {\n                up[i] = Math.max(up[i - 1], down[i - 1] + 1);\n                down[i] = down[i - 1];\n            } else if(nums[i] &lt; nums[i - 1]) {\n                down[i] = Math.max(down[i - 1], up[i - 1] + 1);\n                up[i] = up[i - 1];\n            } else {\n                up[i] = up[i - 1];\n                down[i] = down[i - 1];\n            }\n        }\n\n        return Math.max(down[n - 1], up[n - 1]) + 1;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#53","title":"53. \u6700\u5927\u5b50\u6570\u7ec4\u548c","text":"<p>\u52a8\u6001\u89c4\u5212\u505a\u6cd5\uff1a</p> <p>dp[i]\uff1a\u8868\u793a\u4ee5\u4e0b\u6807 i \u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u6570\u7ec4\u7684\u548c\uff0c\u8981\u4f7f\u5f97\u548c\u6700\u5927\u53ef\u5f97\u8f6c\u79fb\u65b9\u7a0b\uff1a</p> <pre><code>dp[i] = max(dp[i - 1], 0) + nums[i]\n</code></pre> <p>\u8981\u4e48\u5728\u524d\u9762\u8fde\u7eed\u7684\u548c\u4e0a\u52a0\u4e0anums[i]\uff0c\u8981\u4e48\u820d\u5f03\u4e4b\u524d\u7684\u8fde\u7eed\u548c\uff0c\u8ba9\u5f53\u524d\u7684nums[i]\u4f5c\u4e3a\u8fde\u7eed\u5b50\u6570\u7ec4\u548c\u7684\u5f00\u59cb\u3002</p> <pre><code>class Solution {\n    public int maxSubArray(int[] nums) {\n        int sum = nums[0];\n        int ans = sum;\n        for(int i = 1; i &lt; nums.length; i ++) {\n            sum = Math.max(sum, 0) + nums[i];\n            ans = Math.max(ans, sum);\n        }\n        return ans;\n    } \n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#122-ii","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II","text":"<p>\u52a8\u6001\u89c4\u5212\u505a\u6cd5\uff1a</p> <p>DP\u72b6\u6001\u673a\uff0c\u8bbe\u7f6e\u4e24\u4e2adp\u6570\u7ec4:</p> <pre><code>dp[i][0] // \u8868\u793a\u4ee5 i \u7ed3\u5c3e\uff0c\u672a\u6301\u6709\u80a1\u7968\u7684\u6700\u5927\u5229\u6da6\ndp[i][1] // \u8868\u793a\u4ee5 i \u7ed3\u5c3e\uff0c\u6301\u6709\u80a1\u7968\u7684\u6700\u5927\u5229\u6da6\n// \u53ef\u5f97\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\ndp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + price[i])\ndp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - price[i])\n\n// \u7531\u4e8e\u540c\u4e00\u4f4d\u7f6e\uff0c\u672a\u6301\u6709\u80a1\u7968\u7684\u5229\u6da6\u4e00\u5b9a\u5927\u4e8e\u7b49\u4e8e\u6301\u6709\u80a1\u7968\u7684\u5229\u6da6\uff0c\u6240\u4ee5\u6700\u540e\u7b54\u6848\u5c31\u662f dp[i][0]\n// \u5bf9\u4e8e\u8fb9\u754c\u4f4d\u7f6e\u7684\u521d\u59cb\u5316\uff1a\ndp[i][0] = 0, dp[i][1] = -inf\n</code></pre> <p>\u53ef\u5f97\u4ee3\u7801\uff1a</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int n = prices.length;\n\n        int[][] dp = new int[n + 1][2];\n\n        dp[0][0] = 0;\n        dp[0][1] = Integer.MIN_VALUE;\n\n        for(int i = 0; i &lt; n; i ++) {\n            dp[i + 1][1] = Math.max(dp[i][1], dp[i][0] - prices[i]);\n            dp[i + 1][0] = Math.max(dp[i][0], dp[i][1] + prices[i]);\n        }\n\n        return dp[n][0];\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#55","title":"55. \u8df3\u8dc3\u6e38\u620f","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#45-ii","title":"45. \u8df3\u8dc3\u6e38\u620f II","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#1005-k","title":"1005. K \u6b21\u53d6\u53cd\u540e\u6700\u5927\u5316\u7684\u6570\u7ec4\u548c","text":"<p>\u5148\u627e\u5230\u6b63\u6570\u548c\u8d1f\u6570\u7684\u5206\u754c\u7ebf\uff0c\u7136\u540e\u4f18\u5148\u628a\u8d1f\u6570\u53d8\u6210\u6b63\u6570\u3002\u5f53\u6570\u7ec4\u91cc\u9762\u5168\u90e8\u662f\u6b63\u6570\u7684\u65f6\u5019\uff0c\u5982\u679c k \u662f\u5076\u6570\u6216\u8005\u6570\u7ec4\u91cc\u9762\u5305\u542b 0 \u503c\uff0c\u90a3\u4e48\u5f53\u524d\u6570\u7ec4\u548c\u5c31\u662f\u6700\u5927\u503c\uff0c\u5982\u679c k \u662f\u5947\u6570\uff0c\u90a3\u4e48\u5c31\u628a\u5f53\u524d\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u53d8\u6210\u8d1f\u6570\u3002</p> <pre><code>class Solution {\n    public int largestSumAfterKNegations(int[] nums, int k) {\n        Arrays.sort(nums);\n\n        int par = 0;\n        while(par &lt; nums.length &amp;&amp; nums[par] &lt; 0) {\n            par ++;\n        }\n\n        for(int i = 0; i &lt; par &amp;&amp; k &gt; 0; i ++) {\n            nums[i] = -nums[i];\n            k --;\n        }\n\n        if((par &lt; nums.length &amp;&amp; nums[par] == 0) || k % 2 == 0) {\n            k = 0;\n        }\n\n        Arrays.sort(nums);\n        if(k &gt; 0) {\n            nums[0] = -nums[0];\n        }\n\n        int ans = 0;\n        for(int i = 0; i &lt; nums.length; i ++) {\n            ans += nums[i];\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#134","title":"134. \u52a0\u6cb9\u7ad9","text":"<p>\u9996\u5148\u8981\u77e5\u9053\u5f53 sum(gas) &gt;= sum(cost) \u7684\u65f6\u5019\u4e00\u5b9a\u6709\u89e3\uff0csum(gas) &lt; sum(cost) \u7684\u65f6\u5019\u4e00\u5b9a\u65e0\u89e3</p>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#135","title":"135. \u5206\u53d1\u7cd6\u679c","text":"<p>\u4ece\u5de6\u5f80\u53f3\u53d1\uff0c\u4e0d\u786e\u5b9a\u7cd6\u679c\u6570\u7684\u5148\u653e 1 \u4e2a\uff0c\u518d\u4ece\u53f3\u5f80\u5de6\u53d1</p> <pre><code>class Solution {\n    public int candy(int[] ratings) {\n        int ans = 0;\n        int n = ratings.length;\n\n        if(n == 1) {\n            return 1;\n        }\n\n        int[] f = new int[n];\n\n        for(int i = 0; i &lt; n; i ++) {\n            if(i == 0) {\n                f[i] = 1;\n            } else if(ratings[i] &gt; ratings[i - 1]) {\n                f[i] = f[i - 1] + 1;\n            } else {\n                f[i] = 1;\n            }\n        }\n\n        for(int i = n - 2; i &gt;= 0; i --) {\n            if(ratings[i] &gt; ratings[i + 1] &amp;&amp; f[i] &lt;= f[i + 1]) {\n                f[i] = f[i + 1] + 1;\n            }\n        }\n\n        for(int i = 0; i &lt; n; i ++) {\n            ans += f[i];\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#860","title":"860. \u67e0\u6aac\u6c34\u627e\u96f6","text":"<p>\u5148\u627e10\u5757\u7684\uff0c\u518d\u627e5\u5757\u7684\uff0c\u4ee5\u514d\u540e\u9762\u6709\u4ed810\u5757\u7684\u627e\u4e0d\u5f00</p> <pre><code>class Solution {\n    public boolean lemonadeChange(int[] bills) {\n\n        int m5 = 0;\n        int m10 = 0;\n        int m20 = 0;\n\n        for(int bill : bills) {\n            if(bill == 5) {\n                m5 ++;\n            } else if(bill == 10) {\n                if(m5 == 0) {\n                    return false;\n                } else {\n                    m5 --;\n                    m10 ++;\n                }\n            } else {\n                if((m5 * 5 + m10 * 10) &lt; 15 || m5 == 0) {\n                    return false;\n                } else if(m10 &gt;= 1) {\n                    m10 --;\n                    m5 --;\n                    m20 ++;\n                } else {\n                    m5 -= 3;\n                    m20 ++;\n                }\n            }\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#406","title":"406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#452","title":"452. \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403","text":"<p>\u8981\u4f7f\u5f97\u82b1\u8d39\u7684\u7bad\u6570\u91cf\u6700\u5c0f\uff0c\u5219\u6bcf\u4e00\u6b21\u8981\u8ba9\u4e00\u652f\u7bad\u5c04\u5c3d\u53ef\u80fd\u591a\u7684\u6c14\u7403\uff0c\u5176\u5b9e\u5c31\u662f\u6bcf\u6b21\u627e\u4e00\u4e2a\u6709\u5171\u540c\u70b9\u7684\u533a\u95f4\u96c6\u5408\uff0c\u8981\u4f7f\u5f97\u8fd9\u4e2a\u96c6\u5408\u7684\u533a\u95f4\u6570\u91cf\u5c3d\u53ef\u80fd\u7684\u5927\u3002\u7528\u6392\u5e8f+\u53cc\u6307\u9488\u53ef\u4ee5\u9009\u51fa\u6bcf\u6b21\u53ef\u4ee5\u5c04\u7684\u6700\u5927\u6570\u91cf\u7684\u6c14\u7403\u3002</p> <pre><code>class Solution {\n    public int findMinArrowShots(int[][] points) {\n        Arrays.sort(points, (a, b) -&gt; {\n            if(a[0] != b[0]) {\n                return Integer.compare(a[0], b[0]);\n            }\n            return Integer.compare(a[1], b[1]);\n        });\n\n\n        int minR = Integer.MAX_VALUE;\n        int ans = 0;\n\n        for(int i = 0; i &lt; points.length; i ++) {\n\n            int j = i;\n            while(j &lt; points.length) {\n                if(points[j][0] &lt;= minR) {\n                    minR = Math.min(minR, points[j][1]);\n                    j ++; \n                } else {\n                    minR = points[j][1];\n                    break;\n                }\n            }\n            ans ++;\n            if(j != i) {\n                i = j - 1;\n            }\n        }\n        return ans;\n    }\n\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#435","title":"435. \u65e0\u91cd\u53e0\u533a\u95f4","text":"<p>\u4e0d\u77e5\u9053\u600e\u4e48\u8bc1\u660e</p> <pre><code>class Solution {\n    public int eraseOverlapIntervals(int[][] intervals) {\n        Arrays.sort(intervals, (a, b) -&gt; {\n            return Integer.compare(a[1], b[1]);\n        });\n\n        int ans = 0;\n\n        for(int i = 0; i &lt; intervals.length; i ++) {\n            int r = intervals[i][1];\n            int j = i + 1;\n            while(j &lt; intervals.length &amp;&amp; intervals[j][0] &lt; r) {\n                j ++;\n                ans ++;\n            }\n            i = j - 1;\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#763","title":"763. \u5212\u5206\u5b57\u6bcd\u533a\u95f4","text":"<p>\u4e00\u79cd\u5b57\u6bcd\u53ea\u80fd\u51fa\u73b0\u5728\u4e00\u4e2a\u7247\u6bb5\u4e2d\uff0c\u4e14\u8981\u5b8c\u5168\u5305\u542b\u4e8e\u4e00\u4e2a\u7247\u6bb5\u3002\u628a\u4e00\u4e2a\u5b57\u6bcd\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u7406\u89e3\u4e3a\u4e00\u4e2a\u533a\u95f4\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u5c31\u662f\u5728\u95ee\u5408\u5e76\u76f8\u4ea4\u533a\u95f4\u4e4b\u540e\uff0c\u6bcf\u4e2a\u533a\u95f4\u7684\u957f\u5ea6\u3002</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; partitionLabels(String s) {\n        Map&lt;Character, Integer&gt; cnt = new HashMap&lt;&gt;();\n\n        for(int i = 0; i &lt; s.length(); i ++) {\n            cnt.put(s.charAt(i), i);\n        }\n\n        List&lt;Integer&gt; ans = new ArrayList&lt;&gt;();\n\n        int start = 0;\n        int end = 0;\n\n        for(int i = 0; i &lt; s.length(); i ++) {\n            end = Math.max(end, cnt.get(s.charAt(i)));\n            if(i == end) {\n                ans.add(i - start + 1);\n                start = i + 1;\n            }\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#56","title":"56. \u5408\u5e76\u533a\u95f4","text":"<p>\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u987a\u5e8f\u904d\u5386\uff0c\u5982\u679c\u91cd\u53e0\u4e86\u5c31\u5408\u5e76\u4e24\u4e2a\u533a\u95f4</p> <pre><code>class Solution {\n    public int[][] merge(int[][] intervals) {\n        Arrays.sort(intervals, (a, b) -&gt; {\n            return Integer.compare(a[0], b[0]);\n        });\n\n        List&lt;int[]&gt; ans = new ArrayList&lt;&gt;();\n\n        int l = intervals[0][0];\n        int r = intervals[0][1];\n\n        for(int i = 1; i &lt; intervals.length; i ++) {\n            if(intervals[i][0] &lt;= r) {\n                r = Math.max(r,intervals[i][1]);\n            } else {\n                ans.add(new int[]{l, r});\n                l = intervals[i][0];\n                r = intervals[i][1];\n            }\n        }\n        ans.add(new int[]{l, r});\n\n        return ans.toArray(new int[0][]);\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#738","title":"738. \u5355\u8c03\u9012\u589e\u7684\u6570\u5b57","text":"<p>\u82e5\u53d1\u73b0\u540e\u4e00\u4f4d\u6570\u6bd4\u5f53\u524d\u4f4d\u7684\u6570\u5927\uff0c\u90a3\u4e48\u628a\u5f53\u524d\u6570\u51cf\u4e00\uff0c\u540e\u9762\u7684\u6570\u90fd\u53d8\u62109</p> <pre><code>class Solution {\n    public int monotoneIncreasingDigits(int n) {\n        List&lt;Integer&gt; nums = new ArrayList&lt;&gt;();\n\n        int temp = n;\n        while(temp &gt; 0) {\n            nums.add(temp % 10);\n            temp /= 10;\n        }\n\n        Collections.reverse(nums);\n\n        boolean flag = false;\n\n        for(int i = 0; i &lt; nums.size(); i ++) {\n            if(flag) {\n                nums.set(i, 9);\n                continue;\n            }\n\n            int j = i;\n            while(j &lt; nums.size() &amp;&amp; nums.get(j) == nums.get(i)) j ++;\n            j --;\n            if(j + 1 &lt; nums.size() &amp;&amp; nums.get(j) &gt; nums.get(j + 1)) {\n                nums.set(i, nums.get(i) - 1);\n                flag = true;\n            }\n        }       \n\n        int ans = 0;\n        for(int i = 0; i &lt; nums.size(); i ++) {\n            ans = ans * 10 + nums.get(i);\n        }\n\n        return ans;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E8%B4%AA%E5%BF%83/#968","title":"968. \u76d1\u63a7\u4e8c\u53c9\u6811","text":"<p>\u4e0d\u4f1a\u5199\u8fd8\u6ca1\u641e\u61c2</p>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E9%93%BE%E8%A1%A8/","title":"\u94fe\u8868","text":""},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E9%93%BE%E8%A1%A8/#203","title":"203. \u79fb\u9664\u94fe\u8868\u5143\u7d20","text":"<p>\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff0c\u53ef\u4ee5\u89c4\u907f\u5220\u9664\u7684\u6570\u662f\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u6570\u6240\u9700\u8981\u7684\u5224\u65ad\u3002</p> <p>\u4e14\u5728\u94fe\u8868\u4e2d\u8981\u5220\u9664\u4e00\u4e2a\u7ed3\u70b9 \\(p\\) \uff0c\u9700\u8981\u627e\u5230 \\(p\\) \u524d\u9762\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6240\u4ee5\u94fe\u8868\u904d\u5386\u7684\u6761\u4ef6\u9700\u8981\u8003\u8651\u3002</p> <pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode dummyHead = new ListNode(-1, head);\n\n        ListNode curNode = dummyHead;\n        while(curNode != null &amp;&amp; curNode.next != null) {\n            if(curNode.next.val == val) {\n                curNode.next = curNode.next.next;\n            } else {\n                curNode = curNode.next;\n            }\n        }\n\n        return dummyHead.next;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E9%93%BE%E8%A1%A8/#707","title":"707. \u8bbe\u8ba1\u94fe\u8868","text":"<p>\u4e3a\u4e86\u5c3e\u63d2\u6cd5\u80fd\u5b9e\u73b0 \\(O(1)\\) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5c3e\u6307\u9488 \\(tail\\) \uff0c\u5c3e\u6307\u9488\u9700\u8981\u53d8\u52a8\u7684\u65f6\u5019\u6709\u4ee5\u4e0b \\(4\\) \u79cd\u60c5\u51b5</p> <ol> <li>\u5f53\u94fe\u8868\u957f\u5ea6\u4e3a \\(0\\) \u65f6\uff0c\u4f7f\u7528\u5934\u63d2\u6cd5\u63d2\u5165\u5143\u7d20\uff0c\u6b64\u65f6\u5c3e\u6307\u9488\u9700\u8981\u6307\u5411\u63d2\u5165\u7684\u5143\u7d20</li> <li>\u4f7f\u7528\u5c3e\u63d2\u6cd5\u63d2\u5165\u5143\u7d20\u540e\uff0c\u8981\u6307\u5411\u521a\u63d2\u5165\u7684\u5143\u7d20</li> <li>\u5f53\u6309\u7167\u7d22\u5f15\u5220\u9664\u7684\u6570\u662f\u6700\u540e\u4e00\u4e2a\u6570\u7684\u65f6\u5019\uff0c\u9700\u8981\u628a \\(tail\\) \u6307\u5411\u5012\u6570\u5012\u6570\u7b2c\u4e8c\u4e2a\u6570</li> <li>\u5f53\u6309\u7167\u6240\u4ee5\u52a0\u5165\u6570\u7684\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u9700\u8981\u628a \\(tail\\) \u6307\u5411\u8fd9\u4e2a\u52a0\u5165\u7684\u6570</li> </ol> <p>\u5355\u94fe\u8868\u5b9e\u73b0\u4ee3\u7801\uff1a</p> <pre><code>class MyLinkedList {\n    class ListNode {\n        int val;\n        ListNode next;\n        public ListNode(){}\n        public ListNode(int val, ListNode next) {\n            this.val = val;\n            this.next = next;\n        }\n    }\n\n    ListNode head, tail;\n    int length;\n\n    public MyLinkedList() {\n        head = tail = new ListNode(-1, null);    \n        length = 0;\n    }\n\n    public int get(int index) {\n        int cnt = -1;\n        for(ListNode p = head; p != null; p = p.next, cnt ++) {\n            if(cnt == index) {\n                return p.val;\n            }\n        }\n        return -1;\n    }\n\n    public void addAtHead(int val) {\n        ListNode t = new ListNode(val, null);\n        t.next = head.next;\n        head.next = t;\n        if(length == 0) tail = t;\n        length ++;\n    }\n\n    public void addAtTail(int val) {\n        ListNode t = new ListNode(val, null);\n        tail.next = t;\n        tail = t;\n        length ++;\n    }\n\n    public void addAtIndex(int index, int val) {\n        if(index &gt; length) {\n            return;\n        }\n\n        int cnt = -1;\n        ListNode t = new ListNode(val, null);\n        if(index == length) tail = t;\n        for(ListNode p = head; p != null; p = p.next, cnt ++) {\n            if(cnt + 1 == index) {\n                t.next = p.next;\n                p.next = t;\n                length ++;\n                break;\n            }\n        }\n    }\n\n    public void deleteAtIndex(int index) {\n        if(index &gt;= length) {\n            return;\n        }\n        int cnt = -1;\n        for(ListNode p = head; p != null &amp;&amp; p.next != null; p = p.next, cnt ++) {\n            if(cnt + 1 == index) {\n                if(index == length - 1) {\n                    tail = p;\n                }\n                p.next = p.next.next;\n                length --;\n                break;\n            }\n        }\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = new MyLinkedList();\n * int param_1 = obj.get(index);\n * obj.addAtHead(val);\n * obj.addAtTail(val);\n * obj.addAtIndex(index,val);\n * obj.deleteAtIndex(index);\n */\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E9%93%BE%E8%A1%A8/#206","title":"206. \u53cd\u8f6c\u94fe\u8868","text":"<p>\u5934\u63d2\u6cd5\u53cd\u8f6c\u94fe\u8868</p> <pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode dummyHead = new ListNode(-1, null);\n\n        for(ListNode p = head, nxt; p != null; p = nxt) {\n            nxt = p.next;\n            p.next = dummyHead.next;\n            dummyHead.next = p;\n        }\n\n        return dummyHead.next;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E9%93%BE%E8%A1%A8/#24","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<p>\u7528\u4e09\u4e2a\u6307\u9488\u5b9e\u73b0\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9\uff0c\u5206\u522b\u662f\u524d\u540e\u4e24\u4e2a\u6307\u9488\u548c\u4e00\u4e2a\u7528\u6765\u8fde\u63a5\u4ea4\u6362\u540e\u7684\u6307\u9488</p> <pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        if(head == null || head.next == null) {\n            return head;\n        }\n\n        ListNode dummyHead = new ListNode(-1, null);\n\n        ListNode link = dummyHead;\n        ListNode preNode = head, curNode = head.next;\n\n        while(curNode != null) {\n            ListNode nxt = curNode.next;\n            curNode.next = preNode;\n            preNode.next = nxt;\n            link.next = curNode;\n\n            if(nxt != null) {\n                link = preNode;\n                preNode = nxt;\n                curNode = preNode.next;\n            } else {\n                break;\n            }           \n        }\n\n        return dummyHead.next;\n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E9%93%BE%E8%A1%A8/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9","text":"<p>\u5148\u6c42\u957f\u5ea6\uff0c\u5efa\u7acb\u4e00\u4e2a\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff0c\u4ee5\u4fbf\u4e8e\u5220\u9664\u7684\u5143\u7d20\u662f\u4e00\u4e2a\u4f4d\u7f6e</p> <pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        int length = 0;\n        for(ListNode p = head; p != null; p = p.next) {\n            length ++;\n        }\n\n        ListNode dummyHead = new ListNode(-1, head);\n\n        int index = 0;  \n        for(ListNode p = dummyHead; p != null; p = p.next, index ++) {\n            if(index + 1 == length - n + 1) {\n                p.next = p.next.next;\n            }\n        }\n\n        return dummyHead.next; \n    }\n}\n</code></pre>"},{"location":"%E7%AE%97%E6%B3%95%E9%A2%98/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/%E9%93%BE%E8%A1%A8/#0207","title":"\u9762\u8bd5\u9898 02.07. \u94fe\u8868\u76f8\u4ea4","text":"<p>\u8bbe\u7b2c\u4e00\u6761\u94fe\u8868\u7684\u957f\u5ea6\u662f \\(length1\\)\uff0c\u7b2c\u4e8c\u6761\u94fe\u8868\u7684\u957f\u5ea6\u662f \\(length2\\)\u3002\u5047\u8bbe\u8fd9\u4e24\u6761\u94fe\u8868\u76f8\u4ea4\u4e0e\u4e00\u70b9\uff0c\u8bbe\u5b83\u4eec\u76f8\u4ea4\u7684\u957f\u5ea6\u4e3a \\(len\\) ,\u90a3\u4e48\u76f8\u4ea4\u524d\u4e24\u6761\u94fe\u8868\u7684\u5404\u81ea\u7684\u4e24\u6bb5\u957f\u5ea6\u662f \\(a = length1 - len\\) \u548c \\(b = length2 - len\\)\u3002\u90a3\u4e48\u5982\u4f55\u4f7f\u5f97\u4e24\u4e2a\u6307\u9488\u5728\u904d\u5386\u4e24\u6761\u94fe\u8868\u7684\u65f6\u5019\u5728\u76f8\u4ea4\u70b9\u76f8\u9047\u5462\uff1f</p> <ol> <li>\u5982\u679c \\(a==b\\) \u90a3\u4e48\u4e24\u4e2a\u6307\u9488\u4f1a\u540c\u65f6\u8d70\u5230\u76f8\u4ea4\u70b9\u4e0a</li> <li>\u5982\u679c \\(a \\neq b\\) \u90a3\u4e48\u4e00\u5b9a\u6709\u4e00\u4e2a\u6307\u9488\u5148\u8d70\u5230\u76f8\u4ea4\u70b9\u4e0a\uff0c\u4e14\u5148 \\(\\max(a,b)-\\max(a,b)\\) \u6b65\u3002\u4e00\u4e2a\u5f88\u5999\u7684\u60f3\u6cd5\u662f\u8ba9\u7b2c\u4e00\u6761\u94fe\u8868\u7684\u6307\u9488\u8d70\u5230\u5c3e\u4e4b\u540e\uff0c\u4ece\u7b2c\u4e8c\u6761\u94fe\u8868\u5f00\u59cb\u8d70\uff1b\u7b2c\u4e8c\u6761\u94fe\u8868\u7684\u6307\u9488\u8d70\u5230\u5c3e\u4e4b\u540e\uff0c\u4ece\u7b2c\u4e00\u6761\u94fe\u8868\u5f00\u59cb\u8d70\u3002\u8fd9\u6837\u8d70\uff0c\u4e24\u4e2a\u6307\u9488\u4e00\u5b9a\u4f1a\u5728\u76f8\u4ea4\u70b9\u76f8\u9047\uff0c\u56e0\u4e3a\u4e24\u4e2a\u6307\u9488\u8d70\u7684\u6b65\u6570\u5206\u522b\u4e3a \\(a + len + b\\) \u548c \\(b + len + a\\) </li> </ol> <pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) {\n *         val = x;\n *         next = null;\n *     }\n * }\n */\npublic class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        ListNode da = headA, db = headB;\n\n        boolean f1 = false, f2 = false;\n\n        while(da != null &amp;&amp; db != null) {\n            if(da == db) {\n                return da;\n            }\n            da = da.next;\n            db = db.next;\n            if(da == null &amp;&amp; !f1) {\n                f1 = true;\n                da = headB;\n            }\n            if(db == null &amp;&amp; !f2) {\n                f2 = true;\n                db = headA;\n            }\n        }\n        return null;\n    }\n}\n</code></pre>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/","title":"\u8ba1\u7b97\u673a\u7406\u8bba","text":"<p>Abstract</p> <p>\u5b66\u4e60\u8ba1\u7b97\u673a\u8f6f\u786c\u4ef6\u7406\u8bba\u7b14\u8bb0</p> <ul> <li> <p>\u8ba1\u7b97\u673a\u7406\u8bba</p> <ul> <li>\u8ba1\u7b97\u673a\u7f51\u7edc</li> <li>\u6570\u636e\u5e93</li> </ul> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E6%95%B0%E6%8D%AE%E5%BA%93/","title":"\u8bb0\u5f55\u5b66\u4e60\u6570\u636e\u5e93\u7684\u8981\u70b9","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E6%95%B0%E6%8D%AE%E5%BA%93/0.%E6%A6%82%E8%BF%B0/","title":"\u6570\u636e\u5e93\u7cfb\u7edf\u6982\u5ff5","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E6%95%B0%E6%8D%AE%E5%BA%93/0.%E6%A6%82%E8%BF%B0/#_2","title":"\u5173\u7cfb\u578b\u6570\u636e\u5e93","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E6%95%B0%E6%8D%AE%E5%BA%93/0.%E6%A6%82%E8%BF%B0/#sql","title":"SQL","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","title":"\u5b66\u4e60\u8ba1\u7b97\u673a\u7f51\u7edc-\u81ea\u9876\u5411\u4e0b\u65b9\u6cd5","text":"<p>Abstract</p> <p>\u4e3b\u8981\u8bb0\u5f55\u6bcf\u4e00\u7ae0\u7684\u5b66\u4e60\u5fc3\u5f97\uff0c\u548c\u89e3\u51b3\u6bcf\u4e00\u7ae0\u7684\u590d\u4e60\u9898\u3001\u4e60\u9898\u3002</p> <ul> <li> <p>\u8ba1\u7b97\u673a\u7f51\u7edc</p> <ul> <li>1.\u8ba1\u7b97\u673a\u7f51\u7edc\u548c\u56e0\u7279\u7f51 <ul> <li>1.1\u8ba1\u7b97\u673a\u7f51\u7edc\u548c\u56e0\u7279\u7f51\u9898\u76ee</li> </ul> </li> <li>2.\u5e94\u7528\u5c42</li> <li>3.\u8fd0\u8f93\u5c42</li> </ul> </li> </ul>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/","title":"\u8ba1\u7b97\u673a\u7f51\u7edc\u548c\u56e0\u7279\u7f51","text":"<p>Abstract</p> <p>\u8ba1\u7b97\u673a\u7f51\u7edc\u6982\u8ff0\u3002\u4ece\u4e24\u4e2a\u65b9\u9762\u89e3\u91ca\u4e86\u4ec0\u4e48\u662f\u56e0\u7279\u7f51\uff0c\u4ecb\u7ecd\u4e86\u7f51\u7edc\u8fb9\u7f18\u3001\u7f51\u7edc\u6838\u5fc3\u3001\u5206\u7ec4\u4ea4\u6362\u7f51\u4e2d\u7684\u65f6\u5ef6\u3001\u4e22\u5305\u548c\u541e\u5410\u91cf\u3001\u534f\u8bae\u5c42\u6b21\u53ca\u5176\u670d\u52a1\u6a21\u578b\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#1","title":"1.\u4ec0\u4e48\u662f\u56e0\u7279\u7f51","text":"<p>\u5173\u4e8e\u4ec0\u4e48\u662f\u56e0\u7279\u7f51\uff08Internet\uff09\uff0c\u53ef\u4ee5\u4ece\u4e24\u4e2a\u65b9\u9762\u6765\u56de\u7b54\uff1a</p> <ol> <li>\u4ece\u56e0\u7279\u7f51\u7684\u5177\u4f53\u6784\u6210\u6765\u56de\u7b54\uff0c\u5373\u6784\u6210\u56e0\u7279\u7f51\u7684\u57fa\u672c\u786c\u4ef6\u548c\u8f6f\u4ef6\u7ec4\u4ef6</li> <li>\u4ece\u4e3a\u5206\u5e03\u5f0f\u5e94\u7528\u63d0\u4f9b\u670d\u52a1\u7684\u8054\u7f51\u57fa\u7840\u8bbe\u65bd\u6765\u56de\u7b54</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#11","title":"1.1 \u4ece\u5177\u4f53\u7684\u6784\u6210\u6765\u56de\u7b54","text":"<p>\u5177\u4f53\u6784\u6210\u4e0a\uff0c\u9996\u5148\u6211\u4eec\u4f7f\u7528\u7684\u8fde\u5165\u4e92\u8054\u7f51\u7684\u8bbe\u5907\u5c31\u662f\u56e0\u7279\u7f51\u7684\u6784\u6210\u4e4b\u4e00\uff0c\u4f8b\u5982\u6211\u4eec\u7684\u7535\u8111\u3001\u624b\u673a\u3001\u7535\u89c6\u3001\u6e38\u620f\u673a\u90fd\u53ef\u4ee5\u8054\u7f51\uff0c\u8fd9\u4e9b\u5728\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u672f\u8bed\u4e2d\u7edf\u79f0\u4e3a\u7aef\u7cfb\u7edf\uff08end system\uff09/\u4e3b\u673a\uff08host\uff09\u3002\u5728\u751f\u6d3b\u4e2d\uff0c\u5982\u679c\u8981\u8ba9\u4e00\u53f0\u7535\u8111\u8054\u7f51\uff0c\u5219\u8981\u63a5\u5165\u4e00\u6839\u201c\u7f51\u7ebf\u201d\u6765\u4e0e\u56e0\u7279\u7f51\u5efa\u7acb\u8fde\u63a5\uff0c\u8fd9\u6839\u201c\u7f51\u7ebf\u201d\u5c31\u662f\u901a\u4fe1\u94fe\u8def\uff08communication link\uff09 \u7684\u7269\u7406\u5a92\u4ecb\uff0c\u5b8c\u6574\u7684\u901a\u4fe1\u94fe\u8def\u8fd8\u8981\u5305\u542b\u5b9e\u73b0\u8be5\u94fe\u8def\u4e0a\u534f\u8bae\u7684\u8f6f\u4ef6\u548c\u786c\u4ef6\u3002\u7269\u7406\u5a92\u4ecb\u65b9\u9762\u6709\u5f88\u591a\u79cd\u9009\u62e9\uff0c\u53ef\u4ee5\u5212\u5206\u4e3a\u5bfc\u5f15\u578b\u5a92\u4ecb\u548c\u975e\u5bfc\u5f15\u578b\u5a92\u4ecb\uff0c\u5e38\u89c1\u7684\u5bfc\u5f15\u578b\u5a92\u4ecb\u6709\uff1a\u540c\u8f74\u7535\u7f06\u3001\u94dc\u7ebf\u3001\u5149\u7ea4\uff0c\u5e38\u89c1\u7684\u975e\u5bfc\u5f15\u578b\u5a92\u4ecb\u6709\uff1a\u65e0\u7ebf\u7535\u9891\u8c31\u3002\u5f53\u4e00\u53f0\u7aef\u7cfb\u7edf\u8981\u5411\u53e6\u4e00\u53f0\u7aef\u7cfb\u7edf\u53d1\u9001\u6570\u636e\u65f6\uff0c\u53d1\u9001\u7aef\u7cfb\u7edf\u5c06\u6570\u636e\u5206\u6bb5\uff0c\u5e76\u4e3a\u6bcf\u4e00\u6bb5\u52a0\u4e0a\u9996\u90e8\u5b57\u8282\uff0c\u8fd9\u6837\u7684\u4e00\u6bb5\u5728\u5c31\u88ab\u79f0\u4e3a\u5206\u7ec4\uff08packet\uff09\u3002\u8981\u5728\u7f51\u7edc\u4e2d\u4f20\u8f93\u8fd9\u6837\u7684\u5206\u7ec4\uff0c\u4e0d\u4ec5\u4ec5\u8981\u4f9d\u9760\u901a\u4fe1\u94fe\u8def\uff0c\u8fd8\u9700\u8981\u5206\u7ec4\u4ea4\u6362\u673a\uff08packet switch\uff09\uff0c\u5206\u7ec4\u4ea4\u6362\u673a\u4ece\u5b83\u7684\u4e00\u6761\u5165\u901a\u4fe1\u94fe\u8def\u63a5\u53d7\u5206\u7ec4\uff0c\u4ece\u5b83\u7684\u4e00\u6761\u51fa\u901a\u4fe1\u94fe\u8def\u8f6c\u53d1\u5206\u7ec4\u3002\u4e24\u79cd\u5e38\u89c1\u7684\u5206\u7ec4\u4ea4\u6362\u673a\u662f\uff1a \u8def\u7531\u5668\uff08route\uff09 \u548c \u94fe\u8def\u5c42\u4ea4\u6362\u673a\uff08link-layer switch\uff09 \u3002\u7aef\u7cfb\u7edf\u8981\u63a5\u5165\u4e92\u8054\u7f51\uff0c\u9700\u8981\u901a\u8fc7\u56e0\u7279\u7f51\u670d\u52a1\u63d0\u4f9b\u5546\uff08Internet Service Provider\uff0cISP\uff09 \u63a5\u5165\uff0c\u4f8b\u5982\u6211\u4eec\u56fd\u5185\u7684\u4e09\u5927\u8fd0\u8425\u5546\uff1a\u7535\u4fe1\u3001\u8054\u901a\u3001\u79fb\u52a8\uff0c\u5c31\u662fISP\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#12","title":"1.2 \u4ece\u670d\u52a1\u65b9\u9762\u56de\u7b54","text":"<p>\u6211\u4eec\u8fd8\u53ef\u4ee5\u4ece\u5206\u5e03\u5f0f\u5e94\u7528\u8fdb\u7a0b\u548c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u670d\u52a1\u7684\u57fa\u7840\u8bbe\u65bd\u65b9\u9762\u63cf\u8ff0\u56e0\u7279\u7f51\u3002\u56e0\u4e3a\u8fd9\u4e9b\u5e94\u7528\u6d89\u53ca\u591a\u4e2a\u76f8\u4e92\u4ea4\u6362\u6570\u636e\u7684\u7aef\u7cfb\u7edf\uff0c\u6545\u5b83\u4eec\u88ab\u79f0\u4e3a\u5206\u5e03\u5f0f\u5e94\u7528\u3002\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u4e9b\u5e94\u7528\u8fd0\u884c\u5728\u7aef\u7cfb\u7edf\u4e0a\uff0c\u800c\u4e0d\u8fd0\u884c\u5728\u5206\u7ec4\u4ea4\u6362\u673a\u4e0a\uff0c\u5373\u5206\u7ec4\u4ea4\u6362\u673a\u53ea\u7ba1\u8f6c\u53d1\u6536\u5230\u7684\u5206\u7ec4\uff0c\u5e76\u4e0d\u77e5\u9053\u6e90\u4e3b\u673a\u548c\u76ee\u7684\u4e3b\u673a\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u90a3\u4e48\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u201c\u6307\u6325\u201d\u56e0\u7279\u7f51\uff0c\u628a\u6570\u636e\u4f20\u9001\u5230\u53e6\u4e00\u53f0\u4e3b\u673a\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u5462\uff1f\u7b54\u6848\u662f\u5957\u63a5\u5b57\u63a5\u53e3\uff08socket interface\uff09\uff0c\u8be5\u63a5\u53e3\u89c4\u5b9a\u4e86\u8fd0\u884c\u5728\u7aef\u7cfb\u7edf\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u5411\u53e6\u4e00\u53f0\u7aef\u7cfb\u7edf\u7684\u7279\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u4f20\u9001\u6570\u636e\u7684\u65b9\u5f0f\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#13","title":"1.3 \u4ec0\u4e48\u662f\u534f\u8bae","text":"<p>\u638c\u63e1\u8ba1\u7b97\u673a\u7f51\u7edc\u77e5\u8bc6\u7684\u8fc7\u7a0b\uff0c\u5c31\u662f\u7406\u89e3\u8ba1\u7b97\u673a\u7f51\u7edc\u534f\u8bae\u7684\u6784\u6210\u3001\u539f\u7406\u548c\u5de5\u4f5c\u65b9\u5f0f\u7684\u8fc7\u7a0b\u3002\u8ba1\u7b97\u673a\u7f51\u7edc\u4e2d\u5b58\u5728\u5f88\u591a\u7684\u534f\u8bae\uff0c\u4f8b\u5982\u8457\u540d\u7684TCP\uff08Transmission Control Protocol\uff09\u548cIP\uff08Internet Protocol\uff09\u534f\u8bae\uff0c\u56e0\u7279\u7f51\u4e2d\u7684\u4e3b\u8981\u534f\u8bae\u7edf\u79f0\u4e3a TCP/IP\u3002\u4e25\u683c\u6765\u8bf4\uff0c\u534f\u8bae\u7684\u5b9a\u4e49\u5982\u4e0b</p> <p>\u534f\u8bae\uff08Protocol\uff09: \u5b9a\u4e49\u4e86\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u901a\u4fe1\u5b9e\u4f53\u4e4b\u95f4\u4ea4\u6362\u7684\u62a5\u6587\u7684\u683c\u5f0f\u548c\u987a\u5e8f\uff0c\u4ee5\u53ca\u62a5\u6587\u7684\u53d1\u9001/\u63a5\u53d7\u6216\u5176\u4ed6\u4e8b\u4ef6\u6240\u91c7\u53d6\u7684\u64cd\u4f5c\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#2","title":"2.\u7f51\u7edc\u8fb9\u7f18","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#21","title":"2.1 \u7aef\u7cfb\u7edf","text":"<p>\u4e0e\u56e0\u7279\u7f51\u76f8\u8fde\u7684\u8ba1\u7b97\u673a\u548c\u5176\u4ed6\u8bbe\u5907\u79f0\u4e3a\u7aef\u7cfb\u7edf\uff0c\u56e0\u4e3a\u4f4d\u4e8e\u56e0\u7279\u7f51\u7684\u8fb9\u7f18\uff0c\u6240\u4ee5\u79f0\u4e4b\u4e3a\u7aef\u7cfb\u7edf\u7aef\u7cfb\u7edf\u3002\u7aef\u7cfb\u7edf\u4e5f\u53ef\u4ee5\u88ab\u79f0\u4e3a\u4e3b\u673a\uff08host\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u5bb9\u7eb3\u5e94\u7528\u7a0b\u5e8f\u3002\u4e3b\u673a\u53c8\u53ef\u4ee5\u88ab\u5212\u5206\u4e3a\u5ba2\u6237\u673a\uff08Client\uff09\u548c\u670d\u52a1\u5668\uff08server\uff09\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#22","title":"2.2 \u63a5\u5165\u7f51","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#221-dslftth5g","title":"2.2.1 \u5bb6\u5ead\u63a5\u5165: DSL\u3001\u7535\u7f06\u3001FTTH\u548c5G\u56fa\u5b9a\u5f0f\u65e0\u7ebf","text":"<p>\u6570\u5b57\u7528\u6237\u7ebf\uff08Digital Subscriber Line\uff0cDSL\uff09\u662f\u4e00\u79cd\u628a\u56e0\u7279\u7f51\u63a5\u5165\u548c\u7535\u8bdd\u7ebf\u7ed1\u5b9a\u5728\u4e00\u5757\u7684\u6280\u672f\uff0c\u63d0\u4f9b\u7535\u8bdd\u7ebf\u7684\u516c\u53f8\u540c\u6837\u662f\u63d0\u4f9b\u56e0\u7279\u7f51\u63a5\u5165\u670d\u52a1\u7684ISP\u3002\u516c\u53f8\u5185\u6709\u4e2a\u6570\u5b57\u7528\u6237\u7ebf\u63a5\u5165\u590d\u7528\u5668\uff08DSLAM\uff09\uff0c\u6bcf\u4e2a\u7528\u6237\u7684DSL\u8c03\u5236\u89e3\u8c03\u5668\u4f7f\u7528\u73b0\u6709\u7684\u7535\u8bdd\u7ebf\u548c\u7535\u8bdd\u516c\u53f8\u7684\u672c\u5730\u4e2d\u5fc3\u5c40\u7684DSLAM\u4ea4\u6362\u6570\u636e\u3002\u4e8e\u662f\u63a5\u5165\u56e0\u7279\u7f51\u7684\u4e3b\u673a\u5c31\u548c\u7535\u8bdd\u5171\u7528\u4e86\u4e00\u6761\u7ebf\u63a5\u5411\u4e86\u7535\u8bdd\u516c\u53f8\u3002</p> <p>\u90a3\u4e48\u5171\u7528\u4e00\u6761\u7ebf\u7535\u8bdd\u516c\u53f8\u600e\u4e48\u77e5\u9053\u6536\u5230\u7684\u6570\u636e\u662f\u8981\u53d1\u5f80\u56e0\u7279\u7f51\u7684\u8fd8\u662f\u7535\u8bdd\u7f51\u7684\u5462\uff1f\u8fd9\u4e0b\u5c31\u4e0d\u5f97\u4e0d\u63d0 \u9891\u5206\u590d\u7528\u6280\u672f\uff08FDM\uff09 \u4e86\uff0c\u9891\u5206\u590d\u7528\u4e3a\u6bcf\u4e00\u4e2a\u53d1\u9001\u65b9\u6307\u914d\u4e00\u4e2a\u9891\u7387\u8303\u56f4\uff0c\u8981\u6c42\u8be5\u53d1\u9001\u65b9\u4ee5\u53d1\u9001\u7684\u4fe1\u53f7\u8981\u5728\u8be5\u9891\u7387\u8303\u56f4\u4e4b\u5185\uff0c\u63a5\u6536\u65b9\u5219\u4f1a\u6839\u636e\u4e0d\u540c\u7684\u9891\u7387\u5c06\u4e0d\u540c\u4fe1\u53f7\u5206\u79bb\u51fa\u6765\uff0c\u53d1\u9001\u5230\u76ee\u7684\u5730\u3002</p> <p>\u7535\u7f06\u56e0\u7279\u7f51\u63a5\u5165 \u548cDSL\u63a5\u5165\u7c7b\u4f3c\uff0c\u7535\u7f06\u56e0\u7279\u7f51\u63a5\u5165\u662f\u5229\u7528\u4e86\u6709\u7ebf\u7535\u89c6\u7684\u57fa\u7840\u8bbe\u65bd\u3002</p> <p>\u5149\u7ea4\u5230\u6237\uff08FTTH\uff09 \u7406\u60f3\u662f\u63d0\u4f9b\u4e00\u6761\u4ece\u672c\u5730\u4e2d\u5fc3\u5c40\u76f4\u63a5\u5230\u5bb6\u5ead\u7684\u5149\u7ea4\u8def\u5f84\u3002</p> <p>5G\u56fa\u5b9a\u5f0f\u65e0\u7ebf \uff1a\u6570\u636e\u4ee5\u65e0\u7ebf\u7684\u65b9\u5f0f\u4ece\u4f9b\u5e94\u5546\u5230\u5bb6\u4e2d\u7684\u8c03\u5236\u89e3\u8c03\u5668\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#222-wifi","title":"2.2.2 \u4f01\u4e1a\uff08\u548c\u5bb6\u5ead\uff09\u63a5\u5165\uff1a\u4ee5\u592a\u7f51\u548cWIFI","text":"<p>\u5c06\u7aef\u7cfb\u7edf\u7684\u8bbe\u5907\u8fde\u63a5\u6210\u4e00\u4e2a\u5c40\u57df\u7f51\uff08\u6709\u7ebf\u5c40\u57df\u7f51\u6216\u8005\u662f\u65e0\u7ebf\u5c40\u57df\u7f51\uff09\uff0c\u518d\u901a\u8fc7\u4e00\u4e2a\u8def\u7531\u5668\uff0c\u63a5\u5165\u5230\u56e0\u7279\u7f51\u4e2d\uff0c\u8fd9\u4e2a\u8def\u7531\u5668\u4e5f\u88ab\u79f0\u4e3a\u8fb9\u7f18\u8def\u7531\u5668\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#223-3glte-4g5g","title":"2.2.3 \u5e7f\u57df\u7f51\u65e0\u7ebf\u63a5\u5165\uff1a3G\u3001LTE 4G\u548c5G","text":"<p>\u8702\u7a9d\u7f51\u53ef\u4ee5\u5728\u8ddd\u79bb\u57fa\u7ad9\u6570\u4e07\u7c73\u7684\u8303\u56f4\u5185\u63a5\u53d7\u4fe1\u53f7\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#23","title":"2.3 \u7269\u7406\u5a92\u4ecb","text":"<p>\u5bfc\u5f15\u578b\u5a92\u4ecb\uff1a \u53cc\u7ede\u7ebf\u3001\u540c\u8f74\u7535\u7f06\u3001\u5149\u7ea4</p> <p>\u975e\u5bfc\u5f15\u578b\u5a92\u4ecb\uff1a \u9646\u5730\u65e0\u7ebf\u7535\u4fe1\u9053\u3001\u536b\u661f\u65e0\u7ebf\u7535\u4fe1\u9053</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#3","title":"3.\u7f51\u7edc\u6838\u5fc3","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#31","title":"3.1 \u5206\u7ec4\u4ea4\u6362","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#311","title":"3.1.1 \u5b58\u50a8\u8f6c\u53d1\u4f20\u8f93","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#312","title":"3.1.2 \u6392\u961f\u65f6\u5ef6\u548c\u5206\u7ec4\u4e22\u5931","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#313","title":"3.1.3 \u8f6c\u53d1\u8868\u548c\u8def\u7531\u9009\u62e9\u534f\u8bae","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#32","title":"3.2 \u7535\u8def\u4ea4\u6362","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#321","title":"3.2.1 \u7535\u8def\u4ea4\u6362\u4e2d\u7684\u590d\u7528","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#322","title":"3.2.2 \u5206\u7ec4\u4ea4\u6362\u4e0e\u7535\u8def\u4ea4\u6362\u7684\u5bf9\u6bd4","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#33","title":"3.3 \u7f51\u7edc\u7684\u7f51\u7edc","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#4","title":"4.\u5206\u7ec4\u4ea4\u6362\u7f51\u4e2d\u7684\u65f6\u5ef6\u3001\u4e22\u5305\u548c\u541e\u5410\u91cf","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#41","title":"4.1 \u5206\u7ec4\u4ea4\u6362\u4e2d\u7684\u65f6\u5ef6","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#42","title":"4.2 \u4e22\u5305","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#43","title":"4.3 \u541e\u5410\u91cf","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#5","title":"5.\u534f\u8bae\u5c42\u6b21\u53ca\u5176\u670d\u52a1\u6a21\u578b","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#51","title":"5.1 \u5206\u5c42\u7684\u4f53\u7cfb\u7ed3\u6784","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#52","title":"5.2 \u5c01\u88c5","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#53","title":"5.3 \u9762\u5bf9\u653b\u51fb\u7684\u7f51\u7edc","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91/#54","title":"5.4 \u8ba1\u7b97\u673a\u7f51\u7edc\u548c\u56e0\u7279\u7f51\u7684\u5386\u53f2","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%E9%A2%98%E7%9B%AE/","title":"\u8bfe\u540e\u4e60\u9898\u548c\u95ee\u9898","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%E9%A2%98%E7%9B%AE/#_2","title":"\u590d\u4e60\u9898","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%E9%A2%98%E7%9B%AE/#11","title":"1.1 \u8282","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%E9%A2%98%E7%9B%AE/#r1","title":"R1","text":"<p>\u7b54\uff1a\u4e3b\u673a\u548c\u7aef\u7cfb\u7edf\u4e4b\u95f4\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u5e38\u89c1\u7684\u7aef\u7cfb\u7edf\u6709\u7535\u8111\u3001\u624b\u673a\u3001\u7535\u89c6\u3001\u6e38\u620f\u673a\uff0c\u80fd\u591f\u63a5\u5165\u56e0\u7279\u7f51\uff0c\u5e76\u4e14\u5229\u7528\u56e0\u7279\u7f51\u4e3a\u8bbe\u5907\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\u7684\u8bbe\u5907\uff0c\u88ab\u79f0\u4e3a\u7aef\u7cfb\u7edf\u6216\u8005\u4e3b\u673a\u3002Web\u670d\u52a1\u5668\u662f\u4e00\u79cd\u7aef\u7cfb\u7edf\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%E9%A2%98%E7%9B%AE/#r2","title":"R2","text":"<p>\u7b54\uff1a\u6ca1\u67e5\u5230\u3002\u5e94\u8be5\u662f\u5f02\u56fd\u4ea4\u5f80\u4e4b\u95f4\u8981\u9075\u5b88\u7684\u4e00\u4e9b\u7ea6\u5b9a\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%E9%A2%98%E7%9B%AE/#r3","title":"R3","text":"<p>\u7b54\uff1a\u56e0\u4e3a\u534f\u8bae\u662f\u9700\u8981\u901a\u8fc7\u8f6f\u4ef6\u548c\u786c\u4ef6\u53bb\u5b9e\u73b0\u7684\uff0c\u5982\u679c\u534f\u8bae\u7684\u6807\u51c6\u4e0d\u540c\uff0c\u90a3\u4e48\u5404\u5927\u5382\u5546\u5728\u5236\u5b9a\u4e3a\u5b9e\u73b0\u8be5\u534f\u8bae\u7684\u786c\u4ef6\u8bbe\u5907\u548c\u8f6f\u4ef6\u7684\u6807\u51c6\u4e5f\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4f1a\u4f7f\u5f97\u4e24\u53f0\u8bbe\u5907\u65e0\u6cd5\u8fdb\u884c\u901a\u4fe1\u3002</p>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%E9%A2%98%E7%9B%AE/#12","title":"1.2\u8282","text":""},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%E9%A2%98%E7%9B%AE/#r4","title":"R4","text":"<p>\u7b54\uff1a</p> <ol> <li>\u4f4f\u5b85\u63a5\u5165\uff1a\u6570\u5b57\u7528\u6237\u63a5\u5165\u6280\u672f\uff08DSL\uff09\u3001\u7535\u7f06\u56e0\u7279\u7f51\u63a5\u5165\u3001\u5149\u7ea4\u5230\u6237\uff08FTTH\uff09\u30015G\u56fa\u5b9a\u5f0f\u65e0\u7ebf</li> <li>\u516c\u53f8\u63a5\u5165\uff1a\u6709\u7ebf\u5c40\u57df\u7f51\u63a5\u5165\u3001\u65e0\u7ebf\u5c40\u57df\u7f51\u63a5\u5165</li> <li>\u5e7f\u57df\u65e0\u7ebf\u63a5\u5165\uff1a\u8702\u7a9d\u7f51\u63a5\u5165</li> </ol>"},{"location":"%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%92%8C%E5%9B%A0%E7%89%B9%E7%BD%91%E9%A2%98%E7%9B%AE/#r5","title":"R5","text":"<p>\u7b54\uff1aHFC\u5728\u7528\u6237\u95f4\u662f\u5171\u4eab\u7684\u3002\u4e0b\u884cHFC\u4fe1\u9053\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u78b0\u649e\uff0c\u4e0b\u884c\u4fe1\u9053\u5373\u7528\u6237\u63a5\u53d7\u7ecf\u7535\u7f06\u5934\u7aef\u4f20\u6765\u7684\u6570\u636e\uff0c\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\u3002\u5728\u4e0a\u884c\u4fe1\u9053\u624d\u4f1a\u56e0\u4e3a\u5171\u4eab\u800c\u53d1\u751f\u78b0\u649e\u3002</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/category/%E7%AE%97%E6%B3%95/","title":"\u7b97\u6cd5","text":""},{"location":"blog/category/%E7%AE%97%E6%B3%95%E6%AF%94%E8%B5%9B/","title":"\u7b97\u6cd5\u6bd4\u8d5b","text":""},{"location":"blog/category/%E7%AC%94%E8%AF%95/","title":"\u7b14\u8bd5","text":""},{"location":"blog/category/%E6%95%B0%E5%AD%A6/","title":"\u6570\u5b66","text":""},{"location":"blog/page/2/","title":"Blog","text":""}]}